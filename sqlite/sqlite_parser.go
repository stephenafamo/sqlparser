// Code generated from ./sqlite/SQLiteParser.g4 by ANTLR 4.13.2. DO NOT EDIT.

package parser // SQLiteParser

import (
	"fmt"
	"strconv"
	"sync"

	"github.com/antlr4-go/antlr/v4"
)

// Suppress unused import errors
var _ = fmt.Printf
var _ = strconv.Itoa
var _ = sync.Once{}

type SQLiteParser struct {
	*antlr.BaseParser
}

var SQLiteParserParserStaticData struct {
	once                   sync.Once
	serializedATN          []int32
	LiteralNames           []string
	SymbolicNames          []string
	RuleNames              []string
	PredictionContextCache *antlr.PredictionContextCache
	atn                    *antlr.ATN
	decisionToDFA          []*antlr.DFA
}

func sqliteparserParserInit() {
	staticData := &SQLiteParserParserStaticData
	staticData.LiteralNames = []string{
		"", "';'", "'.'", "'('", "')'", "','", "'='", "'*'", "'+'", "'-'", "'->'",
		"'->>'", "'~'", "'||'", "'/'", "'%'", "'<<'", "'>>'", "'&'", "'|'",
		"'<'", "'<='", "'>'", "'>='", "'=='", "'!='", "'<>'", "'ABORT'", "'ACTION'",
		"'ADD'", "'AFTER'", "'ALL'", "'ALTER'", "'ANALYZE'", "'AND'", "'AS'",
		"'ASC'", "'ATTACH'", "'AUTOINCREMENT'", "'BEFORE'", "'BEGIN'", "'BETWEEN'",
		"'BY'", "'CASCADE'", "'CASE'", "'CAST'", "'CHECK'", "'COLLATE'", "'COLUMN'",
		"'COMMIT'", "'CONFLICT'", "'CONSTRAINT'", "'CREATE'", "'CROSS'", "'CURRENT_DATE'",
		"'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", "'DATABASE'", "'DEFAULT'",
		"'DEFERRABLE'", "'DEFERRED'", "'DELETE'", "'DESC'", "'DETACH'", "'DISTINCT'",
		"'DROP'", "'EACH'", "'ELSE'", "'END'", "'ESCAPE'", "'EXCEPT'", "'EXCLUSIVE'",
		"'EXISTS'", "'EXPLAIN'", "'FAIL'", "'FOR'", "'FOREIGN'", "'FROM'", "'FULL'",
		"'GLOB'", "'GROUP'", "'HAVING'", "'IF'", "'IGNORE'", "'IMMEDIATE'",
		"'IN'", "'INDEX'", "'INDEXED'", "'INITIALLY'", "'INNER'", "'INSERT'",
		"'INSTEAD'", "'INTERSECT'", "'INTO'", "'IS'", "'ISNULL'", "'JOIN'",
		"'KEY'", "'LEFT'", "'LIKE'", "'LIMIT'", "'MATCH'", "'MATERIALIZED'",
		"'NATURAL'", "'NO'", "'NOT'", "'NOTNULL'", "'NULL'", "'OF'", "'OFFSET'",
		"'ON'", "'OR'", "'ORDER'", "'OUTER'", "'PLAN'", "'PRAGMA'", "'PRIMARY'",
		"'QUERY'", "'RAISE'", "'RECURSIVE'", "'REFERENCES'", "'REGEXP'", "'REINDEX'",
		"'RELEASE'", "'RENAME'", "'REPLACE'", "'RESTRICT'", "'RETURNING'", "'RIGHT'",
		"'ROLLBACK'", "'ROW'", "'ROWS'", "'SAVEPOINT'", "'SELECT'", "'SET'",
		"'TABLE'", "'TEMP'", "'TEMPORARY'", "'THEN'", "'TO'", "'TRANSACTION'",
		"'TRIGGER'", "'UNION'", "'UNIQUE'", "'UPDATE'", "'USING'", "'VACUUM'",
		"'VALUES'", "'VIEW'", "'VIRTUAL'", "'WHEN'", "'WHERE'", "'WITH'", "'WITHOUT'",
		"'FIRST_VALUE'", "'OVER'", "'PARTITION'", "'RANGE'", "'PRECEDING'",
		"'UNBOUNDED'", "'CURRENT'", "'FOLLOWING'", "'CUME_DIST'", "'DENSE_RANK'",
		"'LAG'", "'LAST_VALUE'", "'LEAD'", "'NTH_VALUE'", "'NTILE'", "'PERCENT_RANK'",
		"'RANK'", "'ROW_NUMBER'", "'GENERATED'", "'ALWAYS'", "'STORED'", "'TRUE'",
		"'FALSE'", "'WINDOW'", "'NULLS'", "'FIRST'", "'LAST'", "'FILTER'", "'GROUPS'",
		"'EXCLUDE'", "'TIES'", "'OTHERS'", "'DO'", "'NOTHING'",
	}
	staticData.SymbolicNames = []string{
		"", "SCOL", "DOT", "OPEN_PAR", "CLOSE_PAR", "COMMA", "EQ", "STAR", "PLUS",
		"MINUS", "PTR", "PTR2", "TILDE", "PIPE2", "DIV", "MOD", "LT2", "GT2",
		"AMP", "PIPE", "LT", "LTE", "GT", "GTE", "EQ2", "NOT_EQ1", "NOT_EQ2",
		"ABORT_", "ACTION_", "ADD_", "AFTER_", "ALL_", "ALTER_", "ANALYZE_",
		"AND_", "AS_", "ASC_", "ATTACH_", "AUTOINCREMENT_", "BEFORE_", "BEGIN_",
		"BETWEEN_", "BY_", "CASCADE_", "CASE_", "CAST_", "CHECK_", "COLLATE_",
		"COLUMN_", "COMMIT_", "CONFLICT_", "CONSTRAINT_", "CREATE_", "CROSS_",
		"CURRENT_DATE_", "CURRENT_TIME_", "CURRENT_TIMESTAMP_", "DATABASE_",
		"DEFAULT_", "DEFERRABLE_", "DEFERRED_", "DELETE_", "DESC_", "DETACH_",
		"DISTINCT_", "DROP_", "EACH_", "ELSE_", "END_", "ESCAPE_", "EXCEPT_",
		"EXCLUSIVE_", "EXISTS_", "EXPLAIN_", "FAIL_", "FOR_", "FOREIGN_", "FROM_",
		"FULL_", "GLOB_", "GROUP_", "HAVING_", "IF_", "IGNORE_", "IMMEDIATE_",
		"IN_", "INDEX_", "INDEXED_", "INITIALLY_", "INNER_", "INSERT_", "INSTEAD_",
		"INTERSECT_", "INTO_", "IS_", "ISNULL_", "JOIN_", "KEY_", "LEFT_", "LIKE_",
		"LIMIT_", "MATCH_", "MATERIALIZED_", "NATURAL_", "NO_", "NOT_", "NOTNULL_",
		"NULL_", "OF_", "OFFSET_", "ON_", "OR_", "ORDER_", "OUTER_", "PLAN_",
		"PRAGMA_", "PRIMARY_", "QUERY_", "RAISE_", "RECURSIVE_", "REFERENCES_",
		"REGEXP_", "REINDEX_", "RELEASE_", "RENAME_", "REPLACE_", "RESTRICT_",
		"RETURNING_", "RIGHT_", "ROLLBACK_", "ROW_", "ROWS_", "SAVEPOINT_",
		"SELECT_", "SET_", "TABLE_", "TEMP_", "TEMPORARY_", "THEN_", "TO_",
		"TRANSACTION_", "TRIGGER_", "UNION_", "UNIQUE_", "UPDATE_", "USING_",
		"VACUUM_", "VALUES_", "VIEW_", "VIRTUAL_", "WHEN_", "WHERE_", "WITH_",
		"WITHOUT_", "FIRST_VALUE_", "OVER_", "PARTITION_", "RANGE_", "PRECEDING_",
		"UNBOUNDED_", "CURRENT_", "FOLLOWING_", "CUME_DIST_", "DENSE_RANK_",
		"LAG_", "LAST_VALUE_", "LEAD_", "NTH_VALUE_", "NTILE_", "PERCENT_RANK_",
		"RANK_", "ROW_NUMBER_", "GENERATED_", "ALWAYS_", "STORED_", "TRUE_",
		"FALSE_", "WINDOW_", "NULLS_", "FIRST_", "LAST_", "FILTER_", "GROUPS_",
		"EXCLUDE_", "TIES_", "OTHERS_", "DO_", "NOTHING_", "IDENTIFIER", "NUMERIC_LITERAL",
		"NUMBERED_BIND_PARAMETER", "NAMED_BIND_PARAMETER", "STRING_LITERAL",
		"BLOB_LITERAL", "SINGLE_LINE_COMMENT", "MULTILINE_COMMENT", "SPACES",
		"UNEXPECTED_CHAR",
	}
	staticData.RuleNames = []string{
		"parse", "sql_stmt_list", "sql_stmt", "alter_table_stmt", "analyze_stmt",
		"attach_stmt", "begin_stmt", "commit_stmt", "rollback_stmt", "savepoint_stmt",
		"release_stmt", "create_index_stmt", "indexed_column", "create_table_stmt",
		"column_def", "type_name", "column_constraint", "signed_number", "table_constraint",
		"foreign_key_clause", "conflict_clause", "create_trigger_stmt", "create_view_stmt",
		"create_virtual_table_stmt", "delete_stmt", "detach_stmt", "drop_stmt",
		"expr", "raise_function", "literal_value", "value_row", "values_clause",
		"insert_stmt", "returning_clause", "upsert_clause", "pragma_stmt", "pragma_value",
		"reindex_stmt", "select_stmt", "select_core", "result_column", "from_item",
		"join_operator", "join_constraint", "table_or_subquery", "compound_select",
		"compound_operator", "update_stmt", "column_name_list", "qualified_table_name",
		"vacuum_stmt", "filter_clause", "window_defn", "over_clause", "frame_spec",
		"frame_clause", "with_clause", "common_table_expression", "where_stmt",
		"order_by_stmt", "group_by_stmt", "window_stmt", "limit_stmt", "ordering_term",
		"asc_desc", "frame_left", "frame_right", "frame_single", "offset", "default_value",
		"partition_by", "order_by_expr", "order_by_expr_asc_desc", "unary_operator",
		"error_message", "module_argument", "keyword", "name", "function_name",
		"schema_name", "table_name", "table_or_index_name", "column_name", "collation_name",
		"foreign_table", "index_name", "trigger_name", "view_name", "module_name",
		"pragma_name", "savepoint_name", "table_alias", "transaction_name",
		"window_name", "alias", "filename", "base_window_name", "simple_func",
		"aggregate_func", "window_func", "table_function_name", "identifier",
	}
	staticData.PredictionContextCache = antlr.NewPredictionContextCache()
	staticData.serializedATN = []int32{
		4, 1, 197, 1720, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2, 4,
		7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2, 10,
		7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15, 7,
		15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7, 20,
		2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25, 2,
		26, 7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2, 31,
		7, 31, 2, 32, 7, 32, 2, 33, 7, 33, 2, 34, 7, 34, 2, 35, 7, 35, 2, 36, 7,
		36, 2, 37, 7, 37, 2, 38, 7, 38, 2, 39, 7, 39, 2, 40, 7, 40, 2, 41, 7, 41,
		2, 42, 7, 42, 2, 43, 7, 43, 2, 44, 7, 44, 2, 45, 7, 45, 2, 46, 7, 46, 2,
		47, 7, 47, 2, 48, 7, 48, 2, 49, 7, 49, 2, 50, 7, 50, 2, 51, 7, 51, 2, 52,
		7, 52, 2, 53, 7, 53, 2, 54, 7, 54, 2, 55, 7, 55, 2, 56, 7, 56, 2, 57, 7,
		57, 2, 58, 7, 58, 2, 59, 7, 59, 2, 60, 7, 60, 2, 61, 7, 61, 2, 62, 7, 62,
		2, 63, 7, 63, 2, 64, 7, 64, 2, 65, 7, 65, 2, 66, 7, 66, 2, 67, 7, 67, 2,
		68, 7, 68, 2, 69, 7, 69, 2, 70, 7, 70, 2, 71, 7, 71, 2, 72, 7, 72, 2, 73,
		7, 73, 2, 74, 7, 74, 2, 75, 7, 75, 2, 76, 7, 76, 2, 77, 7, 77, 2, 78, 7,
		78, 2, 79, 7, 79, 2, 80, 7, 80, 2, 81, 7, 81, 2, 82, 7, 82, 2, 83, 7, 83,
		2, 84, 7, 84, 2, 85, 7, 85, 2, 86, 7, 86, 2, 87, 7, 87, 2, 88, 7, 88, 2,
		89, 7, 89, 2, 90, 7, 90, 2, 91, 7, 91, 2, 92, 7, 92, 2, 93, 7, 93, 2, 94,
		7, 94, 2, 95, 7, 95, 2, 96, 7, 96, 2, 97, 7, 97, 2, 98, 7, 98, 2, 99, 7,
		99, 2, 100, 7, 100, 2, 101, 7, 101, 1, 0, 3, 0, 206, 8, 0, 1, 0, 1, 0,
		1, 1, 5, 1, 211, 8, 1, 10, 1, 12, 1, 214, 9, 1, 1, 1, 1, 1, 4, 1, 218,
		8, 1, 11, 1, 12, 1, 219, 1, 1, 5, 1, 223, 8, 1, 10, 1, 12, 1, 226, 9, 1,
		1, 1, 5, 1, 229, 8, 1, 10, 1, 12, 1, 232, 9, 1, 1, 2, 1, 2, 1, 2, 3, 2,
		237, 8, 2, 3, 2, 239, 8, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
		2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
		2, 1, 2, 1, 2, 3, 2, 263, 8, 2, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 3, 3, 270,
		8, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 3, 3, 277, 8, 3, 1, 3, 1, 3, 1, 3,
		1, 3, 3, 3, 283, 8, 3, 1, 3, 1, 3, 3, 3, 287, 8, 3, 1, 3, 1, 3, 1, 3, 3,
		3, 292, 8, 3, 1, 3, 3, 3, 295, 8, 3, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 3, 4,
		302, 8, 4, 1, 4, 3, 4, 305, 8, 4, 1, 5, 1, 5, 3, 5, 309, 8, 5, 1, 5, 1,
		5, 1, 5, 1, 5, 1, 6, 1, 6, 3, 6, 317, 8, 6, 1, 6, 1, 6, 3, 6, 321, 8, 6,
		3, 6, 323, 8, 6, 1, 7, 1, 7, 3, 7, 327, 8, 7, 1, 8, 1, 8, 3, 8, 331, 8,
		8, 1, 8, 1, 8, 3, 8, 335, 8, 8, 1, 8, 3, 8, 338, 8, 8, 1, 9, 1, 9, 1, 9,
		1, 10, 1, 10, 3, 10, 345, 8, 10, 1, 10, 1, 10, 1, 11, 1, 11, 3, 11, 351,
		8, 11, 1, 11, 1, 11, 1, 11, 1, 11, 3, 11, 357, 8, 11, 1, 11, 1, 11, 1,
		11, 3, 11, 362, 8, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11,
		5, 11, 371, 8, 11, 10, 11, 12, 11, 374, 9, 11, 1, 11, 1, 11, 3, 11, 378,
		8, 11, 1, 12, 1, 12, 3, 12, 382, 8, 12, 1, 12, 1, 12, 3, 12, 386, 8, 12,
		1, 12, 3, 12, 389, 8, 12, 1, 13, 1, 13, 3, 13, 393, 8, 13, 1, 13, 1, 13,
		1, 13, 1, 13, 3, 13, 399, 8, 13, 1, 13, 1, 13, 1, 13, 3, 13, 404, 8, 13,
		1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 5, 13, 411, 8, 13, 10, 13, 12, 13, 414,
		9, 13, 1, 13, 1, 13, 5, 13, 418, 8, 13, 10, 13, 12, 13, 421, 9, 13, 1,
		13, 1, 13, 1, 13, 3, 13, 426, 8, 13, 1, 13, 1, 13, 3, 13, 430, 8, 13, 1,
		14, 1, 14, 3, 14, 434, 8, 14, 1, 14, 5, 14, 437, 8, 14, 10, 14, 12, 14,
		440, 9, 14, 1, 15, 4, 15, 443, 8, 15, 11, 15, 12, 15, 444, 1, 15, 1, 15,
		1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 3, 15, 457, 8,
		15, 1, 16, 1, 16, 3, 16, 461, 8, 16, 1, 16, 1, 16, 1, 16, 3, 16, 466, 8,
		16, 1, 16, 3, 16, 469, 8, 16, 1, 16, 3, 16, 472, 8, 16, 1, 16, 3, 16, 475,
		8, 16, 1, 16, 1, 16, 3, 16, 479, 8, 16, 1, 16, 3, 16, 482, 8, 16, 1, 16,
		1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1,
		16, 3, 16, 496, 8, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 3, 16, 503, 8,
		16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 3, 16, 510, 8, 16, 3, 16, 512, 8,
		16, 1, 17, 3, 17, 515, 8, 17, 1, 17, 1, 17, 1, 18, 1, 18, 3, 18, 521, 8,
		18, 1, 18, 1, 18, 1, 18, 3, 18, 526, 8, 18, 1, 18, 1, 18, 1, 18, 1, 18,
		5, 18, 532, 8, 18, 10, 18, 12, 18, 535, 9, 18, 1, 18, 1, 18, 3, 18, 539,
		8, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1,
		18, 1, 18, 5, 18, 552, 8, 18, 10, 18, 12, 18, 555, 9, 18, 1, 18, 1, 18,
		1, 18, 3, 18, 560, 8, 18, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 5,
		19, 568, 8, 19, 10, 19, 12, 19, 571, 9, 19, 1, 19, 1, 19, 3, 19, 575, 8,
		19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 3, 19, 585,
		8, 19, 1, 19, 1, 19, 5, 19, 589, 8, 19, 10, 19, 12, 19, 592, 9, 19, 1,
		19, 3, 19, 595, 8, 19, 1, 19, 1, 19, 1, 19, 3, 19, 600, 8, 19, 3, 19, 602,
		8, 19, 1, 20, 1, 20, 1, 20, 1, 20, 1, 21, 1, 21, 3, 21, 610, 8, 21, 1,
		21, 1, 21, 1, 21, 1, 21, 3, 21, 616, 8, 21, 1, 21, 1, 21, 1, 21, 3, 21,
		621, 8, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 3, 21, 628, 8, 21, 1, 21,
		1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 5, 21, 637, 8, 21, 10, 21, 12,
		21, 640, 9, 21, 3, 21, 642, 8, 21, 3, 21, 644, 8, 21, 1, 21, 1, 21, 1,
		21, 1, 21, 1, 21, 3, 21, 651, 8, 21, 1, 21, 1, 21, 3, 21, 655, 8, 21, 1,
		21, 1, 21, 1, 21, 1, 21, 1, 21, 3, 21, 662, 8, 21, 1, 21, 1, 21, 4, 21,
		666, 8, 21, 11, 21, 12, 21, 667, 1, 21, 1, 21, 1, 22, 1, 22, 3, 22, 674,
		8, 22, 1, 22, 1, 22, 1, 22, 1, 22, 3, 22, 680, 8, 22, 1, 22, 1, 22, 1,
		22, 3, 22, 685, 8, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 5, 22, 692, 8,
		22, 10, 22, 12, 22, 695, 9, 22, 1, 22, 1, 22, 3, 22, 699, 8, 22, 1, 22,
		1, 22, 1, 22, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 3, 23, 710, 8,
		23, 1, 23, 1, 23, 1, 23, 3, 23, 715, 8, 23, 1, 23, 1, 23, 1, 23, 1, 23,
		1, 23, 1, 23, 1, 23, 5, 23, 724, 8, 23, 10, 23, 12, 23, 727, 9, 23, 1,
		23, 1, 23, 3, 23, 731, 8, 23, 1, 24, 3, 24, 734, 8, 24, 1, 24, 1, 24, 1,
		24, 1, 24, 3, 24, 740, 8, 24, 1, 24, 3, 24, 743, 8, 24, 1, 24, 3, 24, 746,
		8, 24, 1, 24, 3, 24, 749, 8, 24, 1, 25, 1, 25, 3, 25, 753, 8, 25, 1, 25,
		1, 25, 1, 26, 1, 26, 1, 26, 1, 26, 3, 26, 761, 8, 26, 1, 26, 1, 26, 1,
		26, 3, 26, 766, 8, 26, 1, 26, 1, 26, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27,
		5, 27, 775, 8, 27, 10, 27, 12, 27, 778, 9, 27, 1, 27, 1, 27, 1, 27, 1,
		27, 1, 27, 1, 27, 1, 27, 1, 27, 3, 27, 788, 8, 27, 1, 27, 1, 27, 1, 27,
		3, 27, 793, 8, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1,
		27, 1, 27, 5, 27, 804, 8, 27, 10, 27, 12, 27, 807, 9, 27, 1, 27, 3, 27,
		810, 8, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 3, 27, 817, 8, 27, 1, 27,
		1, 27, 1, 27, 5, 27, 822, 8, 27, 10, 27, 12, 27, 825, 9, 27, 1, 27, 3,
		27, 828, 8, 27, 1, 27, 1, 27, 3, 27, 832, 8, 27, 1, 27, 1, 27, 1, 27, 1,
		27, 1, 27, 5, 27, 839, 8, 27, 10, 27, 12, 27, 842, 9, 27, 1, 27, 3, 27,
		845, 8, 27, 1, 27, 1, 27, 3, 27, 849, 8, 27, 1, 27, 1, 27, 1, 27, 1, 27,
		1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 3, 27, 861, 8, 27, 1, 27, 3,
		27, 864, 8, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 3, 27, 872, 8,
		27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 4, 27, 879, 8, 27, 11, 27, 12, 27,
		880, 1, 27, 1, 27, 3, 27, 885, 8, 27, 1, 27, 1, 27, 1, 27, 3, 27, 890,
		8, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1,
		27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27,
		1, 27, 1, 27, 1, 27, 3, 27, 915, 8, 27, 1, 27, 1, 27, 1, 27, 1, 27, 3,
		27, 921, 8, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 3, 27, 928, 8, 27, 1,
		27, 1, 27, 3, 27, 932, 8, 27, 1, 27, 1, 27, 1, 27, 3, 27, 937, 8, 27, 1,
		27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 3, 27,
		949, 8, 27, 1, 27, 1, 27, 1, 27, 1, 27, 3, 27, 955, 8, 27, 1, 27, 1, 27,
		3, 27, 959, 8, 27, 1, 27, 1, 27, 1, 27, 1, 27, 3, 27, 965, 8, 27, 1, 27,
		1, 27, 1, 27, 1, 27, 3, 27, 971, 8, 27, 1, 27, 1, 27, 1, 27, 1, 27, 3,
		27, 977, 8, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 5, 27, 984, 8, 27, 10,
		27, 12, 27, 987, 9, 27, 3, 27, 989, 8, 27, 1, 27, 1, 27, 3, 27, 993, 8,
		27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 3, 27, 1000, 8, 27, 1, 27, 1, 27,
		1, 27, 5, 27, 1005, 8, 27, 10, 27, 12, 27, 1008, 9, 27, 1, 28, 1, 28, 1,
		28, 1, 28, 1, 28, 1, 28, 3, 28, 1016, 8, 28, 1, 28, 1, 28, 1, 29, 1, 29,
		1, 30, 1, 30, 1, 30, 1, 30, 5, 30, 1026, 8, 30, 10, 30, 12, 30, 1029, 9,
		30, 1, 30, 1, 30, 1, 31, 1, 31, 1, 31, 1, 31, 5, 31, 1037, 8, 31, 10, 31,
		12, 31, 1040, 9, 31, 1, 32, 3, 32, 1043, 8, 32, 1, 32, 1, 32, 1, 32, 1,
		32, 1, 32, 3, 32, 1050, 8, 32, 1, 32, 1, 32, 1, 32, 1, 32, 3, 32, 1056,
		8, 32, 1, 32, 1, 32, 1, 32, 3, 32, 1061, 8, 32, 1, 32, 1, 32, 1, 32, 1,
		32, 5, 32, 1067, 8, 32, 10, 32, 12, 32, 1070, 9, 32, 1, 32, 1, 32, 3, 32,
		1074, 8, 32, 1, 32, 1, 32, 3, 32, 1078, 8, 32, 1, 32, 3, 32, 1081, 8, 32,
		1, 32, 1, 32, 3, 32, 1085, 8, 32, 1, 32, 3, 32, 1088, 8, 32, 1, 33, 1,
		33, 1, 33, 1, 33, 5, 33, 1094, 8, 33, 10, 33, 12, 33, 1097, 9, 33, 1, 34,
		1, 34, 1, 34, 1, 34, 1, 34, 1, 34, 5, 34, 1105, 8, 34, 10, 34, 12, 34,
		1108, 9, 34, 1, 34, 1, 34, 3, 34, 1112, 8, 34, 3, 34, 1114, 8, 34, 1, 34,
		1, 34, 1, 34, 1, 34, 1, 34, 1, 34, 3, 34, 1122, 8, 34, 1, 34, 1, 34, 1,
		34, 1, 34, 1, 34, 3, 34, 1129, 8, 34, 1, 34, 1, 34, 1, 34, 5, 34, 1134,
		8, 34, 10, 34, 12, 34, 1137, 9, 34, 1, 34, 3, 34, 1140, 8, 34, 3, 34, 1142,
		8, 34, 1, 35, 1, 35, 1, 35, 1, 35, 3, 35, 1148, 8, 35, 1, 35, 1, 35, 1,
		35, 1, 35, 1, 35, 1, 35, 1, 35, 3, 35, 1157, 8, 35, 1, 36, 1, 36, 1, 36,
		3, 36, 1162, 8, 36, 1, 37, 1, 37, 1, 37, 1, 37, 1, 37, 3, 37, 1169, 8,
		37, 1, 37, 1, 37, 3, 37, 1173, 8, 37, 3, 37, 1175, 8, 37, 1, 38, 3, 38,
		1178, 8, 38, 1, 38, 1, 38, 5, 38, 1182, 8, 38, 10, 38, 12, 38, 1185, 9,
		38, 1, 38, 3, 38, 1188, 8, 38, 1, 38, 3, 38, 1191, 8, 38, 1, 39, 1, 39,
		3, 39, 1195, 8, 39, 1, 39, 1, 39, 1, 39, 5, 39, 1200, 8, 39, 10, 39, 12,
		39, 1203, 9, 39, 1, 39, 1, 39, 3, 39, 1207, 8, 39, 1, 39, 3, 39, 1210,
		8, 39, 1, 39, 1, 39, 1, 39, 1, 39, 1, 39, 3, 39, 1217, 8, 39, 3, 39, 1219,
		8, 39, 1, 39, 1, 39, 1, 39, 1, 39, 5, 39, 1225, 8, 39, 10, 39, 12, 39,
		1228, 9, 39, 3, 39, 1230, 8, 39, 1, 39, 3, 39, 1233, 8, 39, 1, 40, 1, 40,
		1, 40, 1, 40, 1, 40, 1, 40, 1, 40, 3, 40, 1242, 8, 40, 1, 40, 3, 40, 1245,
		8, 40, 3, 40, 1247, 8, 40, 1, 41, 1, 41, 1, 41, 1, 41, 3, 41, 1253, 8,
		41, 5, 41, 1255, 8, 41, 10, 41, 12, 41, 1258, 9, 41, 1, 42, 1, 42, 3, 42,
		1262, 8, 42, 1, 42, 3, 42, 1265, 8, 42, 1, 42, 3, 42, 1268, 8, 42, 1, 42,
		1, 42, 3, 42, 1272, 8, 42, 1, 42, 1, 42, 3, 42, 1276, 8, 42, 1, 42, 1,
		42, 3, 42, 1280, 8, 42, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43,
		5, 43, 1289, 8, 43, 10, 43, 12, 43, 1292, 9, 43, 1, 43, 1, 43, 3, 43, 1296,
		8, 43, 1, 44, 1, 44, 1, 44, 3, 44, 1301, 8, 44, 1, 44, 1, 44, 3, 44, 1305,
		8, 44, 1, 44, 3, 44, 1308, 8, 44, 1, 44, 1, 44, 1, 44, 1, 44, 1, 44, 3,
		44, 1315, 8, 44, 1, 44, 1, 44, 1, 44, 3, 44, 1320, 8, 44, 1, 44, 1, 44,
		1, 44, 1, 44, 1, 44, 5, 44, 1327, 8, 44, 10, 44, 12, 44, 1330, 9, 44, 1,
		44, 1, 44, 3, 44, 1334, 8, 44, 1, 44, 3, 44, 1337, 8, 44, 1, 44, 1, 44,
		1, 44, 1, 44, 3, 44, 1343, 8, 44, 1, 44, 3, 44, 1346, 8, 44, 1, 44, 1,
		44, 1, 44, 1, 44, 3, 44, 1352, 8, 44, 1, 45, 1, 45, 1, 45, 1, 46, 1, 46,
		3, 46, 1359, 8, 46, 1, 46, 1, 46, 3, 46, 1363, 8, 46, 1, 47, 3, 47, 1366,
		8, 47, 1, 47, 1, 47, 1, 47, 3, 47, 1371, 8, 47, 1, 47, 1, 47, 1, 47, 1,
		47, 3, 47, 1377, 8, 47, 1, 47, 1, 47, 1, 47, 1, 47, 1, 47, 3, 47, 1384,
		8, 47, 1, 47, 1, 47, 1, 47, 5, 47, 1389, 8, 47, 10, 47, 12, 47, 1392, 9,
		47, 1, 47, 1, 47, 3, 47, 1396, 8, 47, 1, 47, 3, 47, 1399, 8, 47, 1, 47,
		3, 47, 1402, 8, 47, 1, 47, 3, 47, 1405, 8, 47, 1, 47, 3, 47, 1408, 8, 47,
		1, 48, 1, 48, 1, 48, 1, 48, 5, 48, 1414, 8, 48, 10, 48, 12, 48, 1417, 9,
		48, 1, 48, 1, 48, 1, 49, 1, 49, 1, 49, 3, 49, 1424, 8, 49, 1, 49, 1, 49,
		1, 49, 3, 49, 1429, 8, 49, 1, 49, 1, 49, 1, 49, 1, 49, 1, 49, 3, 49, 1436,
		8, 49, 1, 50, 1, 50, 3, 50, 1440, 8, 50, 1, 50, 1, 50, 3, 50, 1444, 8,
		50, 1, 51, 1, 51, 1, 51, 1, 51, 1, 51, 1, 51, 1, 52, 1, 52, 3, 52, 1454,
		8, 52, 1, 52, 1, 52, 1, 52, 1, 52, 1, 52, 5, 52, 1461, 8, 52, 10, 52, 12,
		52, 1464, 9, 52, 3, 52, 1466, 8, 52, 1, 52, 3, 52, 1469, 8, 52, 1, 52,
		3, 52, 1472, 8, 52, 1, 52, 1, 52, 1, 53, 1, 53, 1, 53, 3, 53, 1479, 8,
		53, 1, 54, 1, 54, 1, 54, 1, 54, 1, 54, 1, 54, 1, 54, 1, 54, 3, 54, 1489,
		8, 54, 3, 54, 1491, 8, 54, 1, 55, 1, 55, 1, 55, 1, 55, 1, 55, 1, 55, 1,
		55, 3, 55, 1500, 8, 55, 1, 56, 1, 56, 3, 56, 1504, 8, 56, 1, 56, 1, 56,
		1, 56, 5, 56, 1509, 8, 56, 10, 56, 12, 56, 1512, 9, 56, 1, 57, 1, 57, 1,
		57, 1, 57, 1, 57, 5, 57, 1519, 8, 57, 10, 57, 12, 57, 1522, 9, 57, 1, 57,
		1, 57, 3, 57, 1526, 8, 57, 1, 57, 1, 57, 3, 57, 1530, 8, 57, 1, 57, 3,
		57, 1533, 8, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 58, 1, 58, 1, 58, 1, 59,
		1, 59, 1, 59, 1, 59, 1, 59, 5, 59, 1547, 8, 59, 10, 59, 12, 59, 1550, 9,
		59, 1, 60, 1, 60, 1, 60, 5, 60, 1555, 8, 60, 10, 60, 12, 60, 1558, 9, 60,
		1, 61, 1, 61, 1, 61, 1, 61, 1, 62, 1, 62, 1, 62, 1, 62, 3, 62, 1568, 8,
		62, 1, 63, 1, 63, 1, 63, 3, 63, 1573, 8, 63, 1, 63, 3, 63, 1576, 8, 63,
		1, 63, 1, 63, 3, 63, 1580, 8, 63, 1, 64, 1, 64, 1, 65, 1, 65, 1, 65, 1,
		65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 3, 65, 1594, 8, 65, 1, 66,
		1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 3, 66, 1606,
		8, 66, 1, 67, 1, 67, 1, 67, 1, 67, 1, 67, 1, 67, 1, 67, 3, 67, 1615, 8,
		67, 1, 68, 1, 68, 1, 68, 1, 69, 1, 69, 1, 69, 1, 70, 1, 70, 1, 70, 4, 70,
		1626, 8, 70, 11, 70, 12, 70, 1627, 1, 71, 1, 71, 1, 71, 4, 71, 1633, 8,
		71, 11, 71, 12, 71, 1634, 1, 72, 1, 72, 1, 72, 1, 72, 3, 72, 1641, 8, 72,
		1, 72, 1, 72, 1, 72, 3, 72, 1646, 8, 72, 5, 72, 1648, 8, 72, 10, 72, 12,
		72, 1651, 9, 72, 1, 73, 1, 73, 1, 74, 1, 74, 1, 75, 1, 75, 3, 75, 1659,
		8, 75, 1, 76, 1, 76, 1, 77, 1, 77, 1, 78, 1, 78, 1, 79, 1, 79, 1, 80, 1,
		80, 1, 81, 1, 81, 1, 82, 1, 82, 1, 83, 1, 83, 1, 84, 1, 84, 1, 85, 1, 85,
		1, 86, 1, 86, 1, 87, 1, 87, 1, 88, 1, 88, 1, 89, 1, 89, 1, 90, 1, 90, 1,
		91, 1, 91, 1, 92, 1, 92, 1, 93, 1, 93, 1, 94, 1, 94, 1, 95, 1, 95, 1, 96,
		1, 96, 1, 97, 1, 97, 1, 98, 1, 98, 1, 99, 1, 99, 3, 99, 1709, 8, 99, 1,
		100, 1, 100, 1, 101, 1, 101, 1, 101, 1, 101, 1, 101, 3, 101, 1718, 8, 101,
		1, 101, 2, 412, 444, 1, 54, 102, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20,
		22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56,
		58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92,
		94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122,
		124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152,
		154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182,
		184, 186, 188, 190, 192, 194, 196, 198, 200, 202, 0, 25, 3, 0, 60, 60,
		71, 71, 84, 84, 2, 0, 49, 49, 68, 68, 1, 0, 136, 137, 2, 0, 149, 149, 174,
		174, 1, 0, 8, 9, 2, 0, 61, 61, 144, 144, 2, 0, 58, 58, 107, 107, 2, 0,
		60, 60, 84, 84, 5, 0, 27, 27, 74, 74, 83, 83, 125, 125, 129, 129, 4, 0,
		86, 86, 135, 135, 141, 141, 148, 148, 2, 0, 7, 9, 14, 14, 1, 0, 16, 19,
		2, 0, 6, 6, 20, 26, 2, 0, 79, 79, 121, 121, 2, 0, 34, 34, 111, 111, 3,
		0, 27, 27, 74, 74, 129, 129, 5, 0, 54, 56, 107, 107, 175, 176, 189, 189,
		192, 193, 2, 0, 31, 31, 64, 64, 3, 0, 78, 78, 98, 98, 128, 128, 3, 0, 131,
		131, 157, 157, 182, 182, 2, 0, 5, 5, 109, 109, 1, 0, 179, 180, 2, 0, 36,
		36, 62, 62, 3, 0, 8, 9, 12, 12, 105, 105, 3, 0, 27, 101, 103, 126, 128,
		183, 1950, 0, 205, 1, 0, 0, 0, 2, 212, 1, 0, 0, 0, 4, 238, 1, 0, 0, 0,
		6, 264, 1, 0, 0, 0, 8, 296, 1, 0, 0, 0, 10, 306, 1, 0, 0, 0, 12, 314, 1,
		0, 0, 0, 14, 324, 1, 0, 0, 0, 16, 328, 1, 0, 0, 0, 18, 339, 1, 0, 0, 0,
		20, 342, 1, 0, 0, 0, 22, 348, 1, 0, 0, 0, 24, 381, 1, 0, 0, 0, 26, 390,
		1, 0, 0, 0, 28, 431, 1, 0, 0, 0, 30, 442, 1, 0, 0, 0, 32, 460, 1, 0, 0,
		0, 34, 514, 1, 0, 0, 0, 36, 520, 1, 0, 0, 0, 38, 561, 1, 0, 0, 0, 40, 603,
		1, 0, 0, 0, 42, 607, 1, 0, 0, 0, 44, 671, 1, 0, 0, 0, 46, 703, 1, 0, 0,
		0, 48, 733, 1, 0, 0, 0, 50, 750, 1, 0, 0, 0, 52, 756, 1, 0, 0, 0, 54, 889,
		1, 0, 0, 0, 56, 1009, 1, 0, 0, 0, 58, 1019, 1, 0, 0, 0, 60, 1021, 1, 0,
		0, 0, 62, 1032, 1, 0, 0, 0, 64, 1042, 1, 0, 0, 0, 66, 1089, 1, 0, 0, 0,
		68, 1098, 1, 0, 0, 0, 70, 1143, 1, 0, 0, 0, 72, 1161, 1, 0, 0, 0, 74, 1163,
		1, 0, 0, 0, 76, 1177, 1, 0, 0, 0, 78, 1232, 1, 0, 0, 0, 80, 1246, 1, 0,
		0, 0, 82, 1248, 1, 0, 0, 0, 84, 1279, 1, 0, 0, 0, 86, 1295, 1, 0, 0, 0,
		88, 1351, 1, 0, 0, 0, 90, 1353, 1, 0, 0, 0, 92, 1362, 1, 0, 0, 0, 94, 1365,
		1, 0, 0, 0, 96, 1409, 1, 0, 0, 0, 98, 1423, 1, 0, 0, 0, 100, 1437, 1, 0,
		0, 0, 102, 1445, 1, 0, 0, 0, 104, 1451, 1, 0, 0, 0, 106, 1475, 1, 0, 0,
		0, 108, 1480, 1, 0, 0, 0, 110, 1492, 1, 0, 0, 0, 112, 1501, 1, 0, 0, 0,
		114, 1513, 1, 0, 0, 0, 116, 1538, 1, 0, 0, 0, 118, 1541, 1, 0, 0, 0, 120,
		1551, 1, 0, 0, 0, 122, 1559, 1, 0, 0, 0, 124, 1563, 1, 0, 0, 0, 126, 1569,
		1, 0, 0, 0, 128, 1581, 1, 0, 0, 0, 130, 1593, 1, 0, 0, 0, 132, 1605, 1,
		0, 0, 0, 134, 1614, 1, 0, 0, 0, 136, 1616, 1, 0, 0, 0, 138, 1619, 1, 0,
		0, 0, 140, 1622, 1, 0, 0, 0, 142, 1629, 1, 0, 0, 0, 144, 1636, 1, 0, 0,
		0, 146, 1652, 1, 0, 0, 0, 148, 1654, 1, 0, 0, 0, 150, 1658, 1, 0, 0, 0,
		152, 1660, 1, 0, 0, 0, 154, 1662, 1, 0, 0, 0, 156, 1664, 1, 0, 0, 0, 158,
		1666, 1, 0, 0, 0, 160, 1668, 1, 0, 0, 0, 162, 1670, 1, 0, 0, 0, 164, 1672,
		1, 0, 0, 0, 166, 1674, 1, 0, 0, 0, 168, 1676, 1, 0, 0, 0, 170, 1678, 1,
		0, 0, 0, 172, 1680, 1, 0, 0, 0, 174, 1682, 1, 0, 0, 0, 176, 1684, 1, 0,
		0, 0, 178, 1686, 1, 0, 0, 0, 180, 1688, 1, 0, 0, 0, 182, 1690, 1, 0, 0,
		0, 184, 1692, 1, 0, 0, 0, 186, 1694, 1, 0, 0, 0, 188, 1696, 1, 0, 0, 0,
		190, 1698, 1, 0, 0, 0, 192, 1700, 1, 0, 0, 0, 194, 1702, 1, 0, 0, 0, 196,
		1704, 1, 0, 0, 0, 198, 1708, 1, 0, 0, 0, 200, 1710, 1, 0, 0, 0, 202, 1717,
		1, 0, 0, 0, 204, 206, 3, 2, 1, 0, 205, 204, 1, 0, 0, 0, 205, 206, 1, 0,
		0, 0, 206, 207, 1, 0, 0, 0, 207, 208, 5, 0, 0, 1, 208, 1, 1, 0, 0, 0, 209,
		211, 5, 1, 0, 0, 210, 209, 1, 0, 0, 0, 211, 214, 1, 0, 0, 0, 212, 210,
		1, 0, 0, 0, 212, 213, 1, 0, 0, 0, 213, 215, 1, 0, 0, 0, 214, 212, 1, 0,
		0, 0, 215, 224, 3, 4, 2, 0, 216, 218, 5, 1, 0, 0, 217, 216, 1, 0, 0, 0,
		218, 219, 1, 0, 0, 0, 219, 217, 1, 0, 0, 0, 219, 220, 1, 0, 0, 0, 220,
		221, 1, 0, 0, 0, 221, 223, 3, 4, 2, 0, 222, 217, 1, 0, 0, 0, 223, 226,
		1, 0, 0, 0, 224, 222, 1, 0, 0, 0, 224, 225, 1, 0, 0, 0, 225, 230, 1, 0,
		0, 0, 226, 224, 1, 0, 0, 0, 227, 229, 5, 1, 0, 0, 228, 227, 1, 0, 0, 0,
		229, 232, 1, 0, 0, 0, 230, 228, 1, 0, 0, 0, 230, 231, 1, 0, 0, 0, 231,
		3, 1, 0, 0, 0, 232, 230, 1, 0, 0, 0, 233, 236, 5, 73, 0, 0, 234, 235, 5,
		117, 0, 0, 235, 237, 5, 114, 0, 0, 236, 234, 1, 0, 0, 0, 236, 237, 1, 0,
		0, 0, 237, 239, 1, 0, 0, 0, 238, 233, 1, 0, 0, 0, 238, 239, 1, 0, 0, 0,
		239, 262, 1, 0, 0, 0, 240, 263, 3, 6, 3, 0, 241, 263, 3, 8, 4, 0, 242,
		263, 3, 10, 5, 0, 243, 263, 3, 12, 6, 0, 244, 263, 3, 14, 7, 0, 245, 263,
		3, 22, 11, 0, 246, 263, 3, 26, 13, 0, 247, 263, 3, 42, 21, 0, 248, 263,
		3, 44, 22, 0, 249, 263, 3, 46, 23, 0, 250, 263, 3, 48, 24, 0, 251, 263,
		3, 50, 25, 0, 252, 263, 3, 52, 26, 0, 253, 263, 3, 64, 32, 0, 254, 263,
		3, 70, 35, 0, 255, 263, 3, 74, 37, 0, 256, 263, 3, 20, 10, 0, 257, 263,
		3, 16, 8, 0, 258, 263, 3, 18, 9, 0, 259, 263, 3, 76, 38, 0, 260, 263, 3,
		94, 47, 0, 261, 263, 3, 100, 50, 0, 262, 240, 1, 0, 0, 0, 262, 241, 1,
		0, 0, 0, 262, 242, 1, 0, 0, 0, 262, 243, 1, 0, 0, 0, 262, 244, 1, 0, 0,
		0, 262, 245, 1, 0, 0, 0, 262, 246, 1, 0, 0, 0, 262, 247, 1, 0, 0, 0, 262,
		248, 1, 0, 0, 0, 262, 249, 1, 0, 0, 0, 262, 250, 1, 0, 0, 0, 262, 251,
		1, 0, 0, 0, 262, 252, 1, 0, 0, 0, 262, 253, 1, 0, 0, 0, 262, 254, 1, 0,
		0, 0, 262, 255, 1, 0, 0, 0, 262, 256, 1, 0, 0, 0, 262, 257, 1, 0, 0, 0,
		262, 258, 1, 0, 0, 0, 262, 259, 1, 0, 0, 0, 262, 260, 1, 0, 0, 0, 262,
		261, 1, 0, 0, 0, 263, 5, 1, 0, 0, 0, 264, 265, 5, 32, 0, 0, 265, 269, 5,
		135, 0, 0, 266, 267, 3, 158, 79, 0, 267, 268, 5, 2, 0, 0, 268, 270, 1,
		0, 0, 0, 269, 266, 1, 0, 0, 0, 269, 270, 1, 0, 0, 0, 270, 271, 1, 0, 0,
		0, 271, 294, 3, 160, 80, 0, 272, 282, 5, 124, 0, 0, 273, 274, 5, 139, 0,
		0, 274, 283, 3, 160, 80, 0, 275, 277, 5, 48, 0, 0, 276, 275, 1, 0, 0, 0,
		276, 277, 1, 0, 0, 0, 277, 278, 1, 0, 0, 0, 278, 279, 3, 164, 82, 0, 279,
		280, 5, 139, 0, 0, 280, 281, 3, 164, 82, 0, 281, 283, 1, 0, 0, 0, 282,
		273, 1, 0, 0, 0, 282, 276, 1, 0, 0, 0, 283, 295, 1, 0, 0, 0, 284, 286,
		5, 29, 0, 0, 285, 287, 5, 48, 0, 0, 286, 285, 1, 0, 0, 0, 286, 287, 1,
		0, 0, 0, 287, 288, 1, 0, 0, 0, 288, 295, 3, 28, 14, 0, 289, 291, 5, 65,
		0, 0, 290, 292, 5, 48, 0, 0, 291, 290, 1, 0, 0, 0, 291, 292, 1, 0, 0, 0,
		292, 293, 1, 0, 0, 0, 293, 295, 3, 164, 82, 0, 294, 272, 1, 0, 0, 0, 294,
		284, 1, 0, 0, 0, 294, 289, 1, 0, 0, 0, 295, 7, 1, 0, 0, 0, 296, 304, 5,
		33, 0, 0, 297, 305, 3, 158, 79, 0, 298, 299, 3, 158, 79, 0, 299, 300, 5,
		2, 0, 0, 300, 302, 1, 0, 0, 0, 301, 298, 1, 0, 0, 0, 301, 302, 1, 0, 0,
		0, 302, 303, 1, 0, 0, 0, 303, 305, 3, 162, 81, 0, 304, 297, 1, 0, 0, 0,
		304, 301, 1, 0, 0, 0, 304, 305, 1, 0, 0, 0, 305, 9, 1, 0, 0, 0, 306, 308,
		5, 37, 0, 0, 307, 309, 5, 57, 0, 0, 308, 307, 1, 0, 0, 0, 308, 309, 1,
		0, 0, 0, 309, 310, 1, 0, 0, 0, 310, 311, 3, 54, 27, 0, 311, 312, 5, 35,
		0, 0, 312, 313, 3, 158, 79, 0, 313, 11, 1, 0, 0, 0, 314, 316, 5, 40, 0,
		0, 315, 317, 7, 0, 0, 0, 316, 315, 1, 0, 0, 0, 316, 317, 1, 0, 0, 0, 317,
		322, 1, 0, 0, 0, 318, 320, 5, 140, 0, 0, 319, 321, 3, 184, 92, 0, 320,
		319, 1, 0, 0, 0, 320, 321, 1, 0, 0, 0, 321, 323, 1, 0, 0, 0, 322, 318,
		1, 0, 0, 0, 322, 323, 1, 0, 0, 0, 323, 13, 1, 0, 0, 0, 324, 326, 7, 1,
		0, 0, 325, 327, 5, 140, 0, 0, 326, 325, 1, 0, 0, 0, 326, 327, 1, 0, 0,
		0, 327, 15, 1, 0, 0, 0, 328, 330, 5, 129, 0, 0, 329, 331, 5, 140, 0, 0,
		330, 329, 1, 0, 0, 0, 330, 331, 1, 0, 0, 0, 331, 337, 1, 0, 0, 0, 332,
		334, 5, 139, 0, 0, 333, 335, 5, 132, 0, 0, 334, 333, 1, 0, 0, 0, 334, 335,
		1, 0, 0, 0, 335, 336, 1, 0, 0, 0, 336, 338, 3, 180, 90, 0, 337, 332, 1,
		0, 0, 0, 337, 338, 1, 0, 0, 0, 338, 17, 1, 0, 0, 0, 339, 340, 5, 132, 0,
		0, 340, 341, 3, 180, 90, 0, 341, 19, 1, 0, 0, 0, 342, 344, 5, 123, 0, 0,
		343, 345, 5, 132, 0, 0, 344, 343, 1, 0, 0, 0, 344, 345, 1, 0, 0, 0, 345,
		346, 1, 0, 0, 0, 346, 347, 3, 180, 90, 0, 347, 21, 1, 0, 0, 0, 348, 350,
		5, 52, 0, 0, 349, 351, 5, 143, 0, 0, 350, 349, 1, 0, 0, 0, 350, 351, 1,
		0, 0, 0, 351, 352, 1, 0, 0, 0, 352, 356, 5, 86, 0, 0, 353, 354, 5, 82,
		0, 0, 354, 355, 5, 105, 0, 0, 355, 357, 5, 72, 0, 0, 356, 353, 1, 0, 0,
		0, 356, 357, 1, 0, 0, 0, 357, 361, 1, 0, 0, 0, 358, 359, 3, 158, 79, 0,
		359, 360, 5, 2, 0, 0, 360, 362, 1, 0, 0, 0, 361, 358, 1, 0, 0, 0, 361,
		362, 1, 0, 0, 0, 362, 363, 1, 0, 0, 0, 363, 364, 3, 170, 85, 0, 364, 365,
		5, 110, 0, 0, 365, 366, 3, 160, 80, 0, 366, 367, 5, 3, 0, 0, 367, 372,
		3, 24, 12, 0, 368, 369, 5, 5, 0, 0, 369, 371, 3, 24, 12, 0, 370, 368, 1,
		0, 0, 0, 371, 374, 1, 0, 0, 0, 372, 370, 1, 0, 0, 0, 372, 373, 1, 0, 0,
		0, 373, 375, 1, 0, 0, 0, 374, 372, 1, 0, 0, 0, 375, 377, 5, 4, 0, 0, 376,
		378, 3, 116, 58, 0, 377, 376, 1, 0, 0, 0, 377, 378, 1, 0, 0, 0, 378, 23,
		1, 0, 0, 0, 379, 382, 3, 164, 82, 0, 380, 382, 3, 54, 27, 0, 381, 379,
		1, 0, 0, 0, 381, 380, 1, 0, 0, 0, 382, 385, 1, 0, 0, 0, 383, 384, 5, 47,
		0, 0, 384, 386, 3, 166, 83, 0, 385, 383, 1, 0, 0, 0, 385, 386, 1, 0, 0,
		0, 386, 388, 1, 0, 0, 0, 387, 389, 3, 128, 64, 0, 388, 387, 1, 0, 0, 0,
		388, 389, 1, 0, 0, 0, 389, 25, 1, 0, 0, 0, 390, 392, 5, 52, 0, 0, 391,
		393, 7, 2, 0, 0, 392, 391, 1, 0, 0, 0, 392, 393, 1, 0, 0, 0, 393, 394,
		1, 0, 0, 0, 394, 398, 5, 135, 0, 0, 395, 396, 5, 82, 0, 0, 396, 397, 5,
		105, 0, 0, 397, 399, 5, 72, 0, 0, 398, 395, 1, 0, 0, 0, 398, 399, 1, 0,
		0, 0, 399, 403, 1, 0, 0, 0, 400, 401, 3, 158, 79, 0, 401, 402, 5, 2, 0,
		0, 402, 404, 1, 0, 0, 0, 403, 400, 1, 0, 0, 0, 403, 404, 1, 0, 0, 0, 404,
		405, 1, 0, 0, 0, 405, 429, 3, 160, 80, 0, 406, 407, 5, 3, 0, 0, 407, 412,
		3, 28, 14, 0, 408, 409, 5, 5, 0, 0, 409, 411, 3, 28, 14, 0, 410, 408, 1,
		0, 0, 0, 411, 414, 1, 0, 0, 0, 412, 413, 1, 0, 0, 0, 412, 410, 1, 0, 0,
		0, 413, 419, 1, 0, 0, 0, 414, 412, 1, 0, 0, 0, 415, 416, 5, 5, 0, 0, 416,
		418, 3, 36, 18, 0, 417, 415, 1, 0, 0, 0, 418, 421, 1, 0, 0, 0, 419, 417,
		1, 0, 0, 0, 419, 420, 1, 0, 0, 0, 420, 422, 1, 0, 0, 0, 421, 419, 1, 0,
		0, 0, 422, 425, 5, 4, 0, 0, 423, 424, 5, 153, 0, 0, 424, 426, 5, 188, 0,
		0, 425, 423, 1, 0, 0, 0, 425, 426, 1, 0, 0, 0, 426, 430, 1, 0, 0, 0, 427,
		428, 5, 35, 0, 0, 428, 430, 3, 76, 38, 0, 429, 406, 1, 0, 0, 0, 429, 427,
		1, 0, 0, 0, 430, 27, 1, 0, 0, 0, 431, 433, 3, 164, 82, 0, 432, 434, 3,
		30, 15, 0, 433, 432, 1, 0, 0, 0, 433, 434, 1, 0, 0, 0, 434, 438, 1, 0,
		0, 0, 435, 437, 3, 32, 16, 0, 436, 435, 1, 0, 0, 0, 437, 440, 1, 0, 0,
		0, 438, 436, 1, 0, 0, 0, 438, 439, 1, 0, 0, 0, 439, 29, 1, 0, 0, 0, 440,
		438, 1, 0, 0, 0, 441, 443, 3, 154, 77, 0, 442, 441, 1, 0, 0, 0, 443, 444,
		1, 0, 0, 0, 444, 445, 1, 0, 0, 0, 444, 442, 1, 0, 0, 0, 445, 456, 1, 0,
		0, 0, 446, 447, 5, 3, 0, 0, 447, 448, 3, 34, 17, 0, 448, 449, 5, 4, 0,
		0, 449, 457, 1, 0, 0, 0, 450, 451, 5, 3, 0, 0, 451, 452, 3, 34, 17, 0,
		452, 453, 5, 5, 0, 0, 453, 454, 3, 34, 17, 0, 454, 455, 5, 4, 0, 0, 455,
		457, 1, 0, 0, 0, 456, 446, 1, 0, 0, 0, 456, 450, 1, 0, 0, 0, 456, 457,
		1, 0, 0, 0, 457, 31, 1, 0, 0, 0, 458, 459, 5, 51, 0, 0, 459, 461, 3, 154,
		77, 0, 460, 458, 1, 0, 0, 0, 460, 461, 1, 0, 0, 0, 461, 511, 1, 0, 0, 0,
		462, 463, 5, 116, 0, 0, 463, 465, 5, 97, 0, 0, 464, 466, 3, 128, 64, 0,
		465, 464, 1, 0, 0, 0, 465, 466, 1, 0, 0, 0, 466, 468, 1, 0, 0, 0, 467,
		469, 3, 40, 20, 0, 468, 467, 1, 0, 0, 0, 468, 469, 1, 0, 0, 0, 469, 471,
		1, 0, 0, 0, 470, 472, 5, 38, 0, 0, 471, 470, 1, 0, 0, 0, 471, 472, 1, 0,
		0, 0, 472, 512, 1, 0, 0, 0, 473, 475, 5, 105, 0, 0, 474, 473, 1, 0, 0,
		0, 474, 475, 1, 0, 0, 0, 475, 476, 1, 0, 0, 0, 476, 479, 5, 107, 0, 0,
		477, 479, 5, 143, 0, 0, 478, 474, 1, 0, 0, 0, 478, 477, 1, 0, 0, 0, 479,
		481, 1, 0, 0, 0, 480, 482, 3, 40, 20, 0, 481, 480, 1, 0, 0, 0, 481, 482,
		1, 0, 0, 0, 482, 512, 1, 0, 0, 0, 483, 484, 5, 46, 0, 0, 484, 485, 5, 3,
		0, 0, 485, 486, 3, 54, 27, 0, 486, 487, 5, 4, 0, 0, 487, 512, 1, 0, 0,
		0, 488, 495, 5, 58, 0, 0, 489, 496, 3, 34, 17, 0, 490, 496, 3, 58, 29,
		0, 491, 492, 5, 3, 0, 0, 492, 493, 3, 54, 27, 0, 493, 494, 5, 4, 0, 0,
		494, 496, 1, 0, 0, 0, 495, 489, 1, 0, 0, 0, 495, 490, 1, 0, 0, 0, 495,
		491, 1, 0, 0, 0, 496, 512, 1, 0, 0, 0, 497, 498, 5, 47, 0, 0, 498, 512,
		3, 166, 83, 0, 499, 512, 3, 38, 19, 0, 500, 501, 5, 172, 0, 0, 501, 503,
		5, 173, 0, 0, 502, 500, 1, 0, 0, 0, 502, 503, 1, 0, 0, 0, 503, 504, 1,
		0, 0, 0, 504, 505, 5, 35, 0, 0, 505, 506, 5, 3, 0, 0, 506, 507, 3, 54,
		27, 0, 507, 509, 5, 4, 0, 0, 508, 510, 7, 3, 0, 0, 509, 508, 1, 0, 0, 0,
		509, 510, 1, 0, 0, 0, 510, 512, 1, 0, 0, 0, 511, 462, 1, 0, 0, 0, 511,
		478, 1, 0, 0, 0, 511, 483, 1, 0, 0, 0, 511, 488, 1, 0, 0, 0, 511, 497,
		1, 0, 0, 0, 511, 499, 1, 0, 0, 0, 511, 502, 1, 0, 0, 0, 512, 33, 1, 0,
		0, 0, 513, 515, 7, 4, 0, 0, 514, 513, 1, 0, 0, 0, 514, 515, 1, 0, 0, 0,
		515, 516, 1, 0, 0, 0, 516, 517, 5, 189, 0, 0, 517, 35, 1, 0, 0, 0, 518,
		519, 5, 51, 0, 0, 519, 521, 3, 154, 77, 0, 520, 518, 1, 0, 0, 0, 520, 521,
		1, 0, 0, 0, 521, 559, 1, 0, 0, 0, 522, 523, 5, 116, 0, 0, 523, 526, 5,
		97, 0, 0, 524, 526, 5, 143, 0, 0, 525, 522, 1, 0, 0, 0, 525, 524, 1, 0,
		0, 0, 526, 527, 1, 0, 0, 0, 527, 528, 5, 3, 0, 0, 528, 533, 3, 24, 12,
		0, 529, 530, 5, 5, 0, 0, 530, 532, 3, 24, 12, 0, 531, 529, 1, 0, 0, 0,
		532, 535, 1, 0, 0, 0, 533, 531, 1, 0, 0, 0, 533, 534, 1, 0, 0, 0, 534,
		536, 1, 0, 0, 0, 535, 533, 1, 0, 0, 0, 536, 538, 5, 4, 0, 0, 537, 539,
		3, 40, 20, 0, 538, 537, 1, 0, 0, 0, 538, 539, 1, 0, 0, 0, 539, 560, 1,
		0, 0, 0, 540, 541, 5, 46, 0, 0, 541, 542, 5, 3, 0, 0, 542, 543, 3, 54,
		27, 0, 543, 544, 5, 4, 0, 0, 544, 560, 1, 0, 0, 0, 545, 546, 5, 76, 0,
		0, 546, 547, 5, 97, 0, 0, 547, 548, 5, 3, 0, 0, 548, 553, 3, 164, 82, 0,
		549, 550, 5, 5, 0, 0, 550, 552, 3, 164, 82, 0, 551, 549, 1, 0, 0, 0, 552,
		555, 1, 0, 0, 0, 553, 551, 1, 0, 0, 0, 553, 554, 1, 0, 0, 0, 554, 556,
		1, 0, 0, 0, 555, 553, 1, 0, 0, 0, 556, 557, 5, 4, 0, 0, 557, 558, 3, 38,
		19, 0, 558, 560, 1, 0, 0, 0, 559, 525, 1, 0, 0, 0, 559, 540, 1, 0, 0, 0,
		559, 545, 1, 0, 0, 0, 560, 37, 1, 0, 0, 0, 561, 562, 5, 120, 0, 0, 562,
		574, 3, 168, 84, 0, 563, 564, 5, 3, 0, 0, 564, 569, 3, 164, 82, 0, 565,
		566, 5, 5, 0, 0, 566, 568, 3, 164, 82, 0, 567, 565, 1, 0, 0, 0, 568, 571,
		1, 0, 0, 0, 569, 567, 1, 0, 0, 0, 569, 570, 1, 0, 0, 0, 570, 572, 1, 0,
		0, 0, 571, 569, 1, 0, 0, 0, 572, 573, 5, 4, 0, 0, 573, 575, 1, 0, 0, 0,
		574, 563, 1, 0, 0, 0, 574, 575, 1, 0, 0, 0, 575, 590, 1, 0, 0, 0, 576,
		577, 5, 110, 0, 0, 577, 584, 7, 5, 0, 0, 578, 579, 5, 134, 0, 0, 579, 585,
		7, 6, 0, 0, 580, 585, 5, 43, 0, 0, 581, 585, 5, 126, 0, 0, 582, 583, 5,
		104, 0, 0, 583, 585, 5, 28, 0, 0, 584, 578, 1, 0, 0, 0, 584, 580, 1, 0,
		0, 0, 584, 581, 1, 0, 0, 0, 584, 582, 1, 0, 0, 0, 585, 589, 1, 0, 0, 0,
		586, 587, 5, 101, 0, 0, 587, 589, 3, 154, 77, 0, 588, 576, 1, 0, 0, 0,
		588, 586, 1, 0, 0, 0, 589, 592, 1, 0, 0, 0, 590, 588, 1, 0, 0, 0, 590,
		591, 1, 0, 0, 0, 591, 601, 1, 0, 0, 0, 592, 590, 1, 0, 0, 0, 593, 595,
		5, 105, 0, 0, 594, 593, 1, 0, 0, 0, 594, 595, 1, 0, 0, 0, 595, 596, 1,
		0, 0, 0, 596, 599, 5, 59, 0, 0, 597, 598, 5, 88, 0, 0, 598, 600, 7, 7,
		0, 0, 599, 597, 1, 0, 0, 0, 599, 600, 1, 0, 0, 0, 600, 602, 1, 0, 0, 0,
		601, 594, 1, 0, 0, 0, 601, 602, 1, 0, 0, 0, 602, 39, 1, 0, 0, 0, 603, 604,
		5, 110, 0, 0, 604, 605, 5, 50, 0, 0, 605, 606, 7, 8, 0, 0, 606, 41, 1,
		0, 0, 0, 607, 609, 5, 52, 0, 0, 608, 610, 7, 2, 0, 0, 609, 608, 1, 0, 0,
		0, 609, 610, 1, 0, 0, 0, 610, 611, 1, 0, 0, 0, 611, 615, 5, 141, 0, 0,
		612, 613, 5, 82, 0, 0, 613, 614, 5, 105, 0, 0, 614, 616, 5, 72, 0, 0, 615,
		612, 1, 0, 0, 0, 615, 616, 1, 0, 0, 0, 616, 620, 1, 0, 0, 0, 617, 618,
		3, 158, 79, 0, 618, 619, 5, 2, 0, 0, 619, 621, 1, 0, 0, 0, 620, 617, 1,
		0, 0, 0, 620, 621, 1, 0, 0, 0, 621, 622, 1, 0, 0, 0, 622, 627, 3, 172,
		86, 0, 623, 628, 5, 39, 0, 0, 624, 628, 5, 30, 0, 0, 625, 626, 5, 91, 0,
		0, 626, 628, 5, 108, 0, 0, 627, 623, 1, 0, 0, 0, 627, 624, 1, 0, 0, 0,
		627, 625, 1, 0, 0, 0, 627, 628, 1, 0, 0, 0, 628, 643, 1, 0, 0, 0, 629,
		644, 5, 61, 0, 0, 630, 644, 5, 90, 0, 0, 631, 641, 5, 144, 0, 0, 632, 633,
		5, 108, 0, 0, 633, 638, 3, 164, 82, 0, 634, 635, 5, 5, 0, 0, 635, 637,
		3, 164, 82, 0, 636, 634, 1, 0, 0, 0, 637, 640, 1, 0, 0, 0, 638, 636, 1,
		0, 0, 0, 638, 639, 1, 0, 0, 0, 639, 642, 1, 0, 0, 0, 640, 638, 1, 0, 0,
		0, 641, 632, 1, 0, 0, 0, 641, 642, 1, 0, 0, 0, 642, 644, 1, 0, 0, 0, 643,
		629, 1, 0, 0, 0, 643, 630, 1, 0, 0, 0, 643, 631, 1, 0, 0, 0, 644, 645,
		1, 0, 0, 0, 645, 646, 5, 110, 0, 0, 646, 650, 3, 160, 80, 0, 647, 648,
		5, 75, 0, 0, 648, 649, 5, 66, 0, 0, 649, 651, 5, 130, 0, 0, 650, 647, 1,
		0, 0, 0, 650, 651, 1, 0, 0, 0, 651, 654, 1, 0, 0, 0, 652, 653, 5, 150,
		0, 0, 653, 655, 3, 54, 27, 0, 654, 652, 1, 0, 0, 0, 654, 655, 1, 0, 0,
		0, 655, 656, 1, 0, 0, 0, 656, 665, 5, 40, 0, 0, 657, 662, 3, 94, 47, 0,
		658, 662, 3, 64, 32, 0, 659, 662, 3, 48, 24, 0, 660, 662, 3, 76, 38, 0,
		661, 657, 1, 0, 0, 0, 661, 658, 1, 0, 0, 0, 661, 659, 1, 0, 0, 0, 661,
		660, 1, 0, 0, 0, 662, 663, 1, 0, 0, 0, 663, 664, 5, 1, 0, 0, 664, 666,
		1, 0, 0, 0, 665, 661, 1, 0, 0, 0, 666, 667, 1, 0, 0, 0, 667, 665, 1, 0,
		0, 0, 667, 668, 1, 0, 0, 0, 668, 669, 1, 0, 0, 0, 669, 670, 5, 68, 0, 0,
		670, 43, 1, 0, 0, 0, 671, 673, 5, 52, 0, 0, 672, 674, 7, 2, 0, 0, 673,
		672, 1, 0, 0, 0, 673, 674, 1, 0, 0, 0, 674, 675, 1, 0, 0, 0, 675, 679,
		5, 148, 0, 0, 676, 677, 5, 82, 0, 0, 677, 678, 5, 105, 0, 0, 678, 680,
		5, 72, 0, 0, 679, 676, 1, 0, 0, 0, 679, 680, 1, 0, 0, 0, 680, 684, 1, 0,
		0, 0, 681, 682, 3, 158, 79, 0, 682, 683, 5, 2, 0, 0, 683, 685, 1, 0, 0,
		0, 684, 681, 1, 0, 0, 0, 684, 685, 1, 0, 0, 0, 685, 686, 1, 0, 0, 0, 686,
		698, 3, 174, 87, 0, 687, 688, 5, 3, 0, 0, 688, 693, 3, 164, 82, 0, 689,
		690, 5, 5, 0, 0, 690, 692, 3, 164, 82, 0, 691, 689, 1, 0, 0, 0, 692, 695,
		1, 0, 0, 0, 693, 691, 1, 0, 0, 0, 693, 694, 1, 0, 0, 0, 694, 696, 1, 0,
		0, 0, 695, 693, 1, 0, 0, 0, 696, 697, 5, 4, 0, 0, 697, 699, 1, 0, 0, 0,
		698, 687, 1, 0, 0, 0, 698, 699, 1, 0, 0, 0, 699, 700, 1, 0, 0, 0, 700,
		701, 5, 35, 0, 0, 701, 702, 3, 76, 38, 0, 702, 45, 1, 0, 0, 0, 703, 704,
		5, 52, 0, 0, 704, 705, 5, 149, 0, 0, 705, 709, 5, 135, 0, 0, 706, 707,
		5, 82, 0, 0, 707, 708, 5, 105, 0, 0, 708, 710, 5, 72, 0, 0, 709, 706, 1,
		0, 0, 0, 709, 710, 1, 0, 0, 0, 710, 714, 1, 0, 0, 0, 711, 712, 3, 158,
		79, 0, 712, 713, 5, 2, 0, 0, 713, 715, 1, 0, 0, 0, 714, 711, 1, 0, 0, 0,
		714, 715, 1, 0, 0, 0, 715, 716, 1, 0, 0, 0, 716, 717, 3, 160, 80, 0, 717,
		718, 5, 145, 0, 0, 718, 730, 3, 176, 88, 0, 719, 720, 5, 3, 0, 0, 720,
		725, 3, 150, 75, 0, 721, 722, 5, 5, 0, 0, 722, 724, 3, 150, 75, 0, 723,
		721, 1, 0, 0, 0, 724, 727, 1, 0, 0, 0, 725, 723, 1, 0, 0, 0, 725, 726,
		1, 0, 0, 0, 726, 728, 1, 0, 0, 0, 727, 725, 1, 0, 0, 0, 728, 729, 5, 4,
		0, 0, 729, 731, 1, 0, 0, 0, 730, 719, 1, 0, 0, 0, 730, 731, 1, 0, 0, 0,
		731, 47, 1, 0, 0, 0, 732, 734, 3, 112, 56, 0, 733, 732, 1, 0, 0, 0, 733,
		734, 1, 0, 0, 0, 734, 735, 1, 0, 0, 0, 735, 736, 5, 61, 0, 0, 736, 737,
		5, 77, 0, 0, 737, 739, 3, 98, 49, 0, 738, 740, 3, 116, 58, 0, 739, 738,
		1, 0, 0, 0, 739, 740, 1, 0, 0, 0, 740, 742, 1, 0, 0, 0, 741, 743, 3, 66,
		33, 0, 742, 741, 1, 0, 0, 0, 742, 743, 1, 0, 0, 0, 743, 748, 1, 0, 0, 0,
		744, 746, 3, 118, 59, 0, 745, 744, 1, 0, 0, 0, 745, 746, 1, 0, 0, 0, 746,
		747, 1, 0, 0, 0, 747, 749, 3, 124, 62, 0, 748, 745, 1, 0, 0, 0, 748, 749,
		1, 0, 0, 0, 749, 49, 1, 0, 0, 0, 750, 752, 5, 63, 0, 0, 751, 753, 5, 57,
		0, 0, 752, 751, 1, 0, 0, 0, 752, 753, 1, 0, 0, 0, 753, 754, 1, 0, 0, 0,
		754, 755, 3, 158, 79, 0, 755, 51, 1, 0, 0, 0, 756, 757, 5, 65, 0, 0, 757,
		760, 7, 9, 0, 0, 758, 759, 5, 82, 0, 0, 759, 761, 5, 72, 0, 0, 760, 758,
		1, 0, 0, 0, 760, 761, 1, 0, 0, 0, 761, 765, 1, 0, 0, 0, 762, 763, 3, 158,
		79, 0, 763, 764, 5, 2, 0, 0, 764, 766, 1, 0, 0, 0, 765, 762, 1, 0, 0, 0,
		765, 766, 1, 0, 0, 0, 766, 767, 1, 0, 0, 0, 767, 768, 3, 202, 101, 0, 768,
		53, 1, 0, 0, 0, 769, 770, 6, 27, -1, 0, 770, 771, 5, 3, 0, 0, 771, 776,
		3, 54, 27, 0, 772, 773, 5, 5, 0, 0, 773, 775, 3, 54, 27, 0, 774, 772, 1,
		0, 0, 0, 775, 778, 1, 0, 0, 0, 776, 774, 1, 0, 0, 0, 776, 777, 1, 0, 0,
		0, 777, 779, 1, 0, 0, 0, 778, 776, 1, 0, 0, 0, 779, 780, 5, 4, 0, 0, 780,
		890, 1, 0, 0, 0, 781, 890, 3, 58, 29, 0, 782, 890, 5, 190, 0, 0, 783, 890,
		5, 191, 0, 0, 784, 785, 3, 158, 79, 0, 785, 786, 5, 2, 0, 0, 786, 788,
		1, 0, 0, 0, 787, 784, 1, 0, 0, 0, 787, 788, 1, 0, 0, 0, 788, 789, 1, 0,
		0, 0, 789, 790, 3, 160, 80, 0, 790, 791, 5, 2, 0, 0, 791, 793, 1, 0, 0,
		0, 792, 787, 1, 0, 0, 0, 792, 793, 1, 0, 0, 0, 793, 794, 1, 0, 0, 0, 794,
		890, 3, 164, 82, 0, 795, 796, 3, 146, 73, 0, 796, 797, 3, 54, 27, 24, 797,
		890, 1, 0, 0, 0, 798, 799, 3, 194, 97, 0, 799, 809, 5, 3, 0, 0, 800, 805,
		3, 54, 27, 0, 801, 802, 5, 5, 0, 0, 802, 804, 3, 54, 27, 0, 803, 801, 1,
		0, 0, 0, 804, 807, 1, 0, 0, 0, 805, 803, 1, 0, 0, 0, 805, 806, 1, 0, 0,
		0, 806, 810, 1, 0, 0, 0, 807, 805, 1, 0, 0, 0, 808, 810, 5, 7, 0, 0, 809,
		800, 1, 0, 0, 0, 809, 808, 1, 0, 0, 0, 810, 811, 1, 0, 0, 0, 811, 812,
		5, 4, 0, 0, 812, 890, 1, 0, 0, 0, 813, 814, 3, 196, 98, 0, 814, 827, 5,
		3, 0, 0, 815, 817, 5, 64, 0, 0, 816, 815, 1, 0, 0, 0, 816, 817, 1, 0, 0,
		0, 817, 818, 1, 0, 0, 0, 818, 823, 3, 54, 27, 0, 819, 820, 5, 5, 0, 0,
		820, 822, 3, 54, 27, 0, 821, 819, 1, 0, 0, 0, 822, 825, 1, 0, 0, 0, 823,
		821, 1, 0, 0, 0, 823, 824, 1, 0, 0, 0, 824, 828, 1, 0, 0, 0, 825, 823,
		1, 0, 0, 0, 826, 828, 5, 7, 0, 0, 827, 816, 1, 0, 0, 0, 827, 826, 1, 0,
		0, 0, 827, 828, 1, 0, 0, 0, 828, 829, 1, 0, 0, 0, 829, 831, 5, 4, 0, 0,
		830, 832, 3, 102, 51, 0, 831, 830, 1, 0, 0, 0, 831, 832, 1, 0, 0, 0, 832,
		890, 1, 0, 0, 0, 833, 834, 3, 198, 99, 0, 834, 844, 5, 3, 0, 0, 835, 840,
		3, 54, 27, 0, 836, 837, 5, 5, 0, 0, 837, 839, 3, 54, 27, 0, 838, 836, 1,
		0, 0, 0, 839, 842, 1, 0, 0, 0, 840, 838, 1, 0, 0, 0, 840, 841, 1, 0, 0,
		0, 841, 845, 1, 0, 0, 0, 842, 840, 1, 0, 0, 0, 843, 845, 5, 7, 0, 0, 844,
		835, 1, 0, 0, 0, 844, 843, 1, 0, 0, 0, 844, 845, 1, 0, 0, 0, 845, 846,
		1, 0, 0, 0, 846, 848, 5, 4, 0, 0, 847, 849, 3, 102, 51, 0, 848, 847, 1,
		0, 0, 0, 848, 849, 1, 0, 0, 0, 849, 850, 1, 0, 0, 0, 850, 851, 3, 106,
		53, 0, 851, 890, 1, 0, 0, 0, 852, 853, 5, 45, 0, 0, 853, 854, 5, 3, 0,
		0, 854, 855, 3, 54, 27, 0, 855, 856, 5, 35, 0, 0, 856, 857, 3, 30, 15,
		0, 857, 858, 5, 4, 0, 0, 858, 890, 1, 0, 0, 0, 859, 861, 5, 105, 0, 0,
		860, 859, 1, 0, 0, 0, 860, 861, 1, 0, 0, 0, 861, 862, 1, 0, 0, 0, 862,
		864, 5, 72, 0, 0, 863, 860, 1, 0, 0, 0, 863, 864, 1, 0, 0, 0, 864, 865,
		1, 0, 0, 0, 865, 866, 5, 3, 0, 0, 866, 867, 3, 76, 38, 0, 867, 868, 5,
		4, 0, 0, 868, 890, 1, 0, 0, 0, 869, 871, 5, 44, 0, 0, 870, 872, 3, 54,
		27, 0, 871, 870, 1, 0, 0, 0, 871, 872, 1, 0, 0, 0, 872, 878, 1, 0, 0, 0,
		873, 874, 5, 150, 0, 0, 874, 875, 3, 54, 27, 0, 875, 876, 5, 138, 0, 0,
		876, 877, 3, 54, 27, 0, 877, 879, 1, 0, 0, 0, 878, 873, 1, 0, 0, 0, 879,
		880, 1, 0, 0, 0, 880, 878, 1, 0, 0, 0, 880, 881, 1, 0, 0, 0, 881, 884,
		1, 0, 0, 0, 882, 883, 5, 67, 0, 0, 883, 885, 3, 54, 27, 0, 884, 882, 1,
		0, 0, 0, 884, 885, 1, 0, 0, 0, 885, 886, 1, 0, 0, 0, 886, 887, 5, 68, 0,
		0, 887, 890, 1, 0, 0, 0, 888, 890, 3, 56, 28, 0, 889, 769, 1, 0, 0, 0,
		889, 781, 1, 0, 0, 0, 889, 782, 1, 0, 0, 0, 889, 783, 1, 0, 0, 0, 889,
		792, 1, 0, 0, 0, 889, 795, 1, 0, 0, 0, 889, 798, 1, 0, 0, 0, 889, 813,
		1, 0, 0, 0, 889, 833, 1, 0, 0, 0, 889, 852, 1, 0, 0, 0, 889, 863, 1, 0,
		0, 0, 889, 869, 1, 0, 0, 0, 889, 888, 1, 0, 0, 0, 890, 1006, 1, 0, 0, 0,
		891, 892, 10, 23, 0, 0, 892, 893, 5, 10, 0, 0, 893, 1005, 3, 54, 27, 24,
		894, 895, 10, 22, 0, 0, 895, 896, 5, 11, 0, 0, 896, 1005, 3, 54, 27, 23,
		897, 898, 10, 21, 0, 0, 898, 899, 5, 13, 0, 0, 899, 1005, 3, 54, 27, 22,
		900, 901, 10, 20, 0, 0, 901, 902, 5, 15, 0, 0, 902, 1005, 3, 54, 27, 21,
		903, 904, 10, 19, 0, 0, 904, 905, 7, 10, 0, 0, 905, 1005, 3, 54, 27, 20,
		906, 907, 10, 18, 0, 0, 907, 908, 7, 11, 0, 0, 908, 1005, 3, 54, 27, 19,
		909, 910, 10, 17, 0, 0, 910, 911, 7, 12, 0, 0, 911, 1005, 3, 54, 27, 18,
		912, 914, 10, 16, 0, 0, 913, 915, 5, 105, 0, 0, 914, 913, 1, 0, 0, 0, 914,
		915, 1, 0, 0, 0, 915, 916, 1, 0, 0, 0, 916, 917, 7, 13, 0, 0, 917, 1005,
		3, 54, 27, 17, 918, 920, 10, 15, 0, 0, 919, 921, 5, 105, 0, 0, 920, 919,
		1, 0, 0, 0, 920, 921, 1, 0, 0, 0, 921, 922, 1, 0, 0, 0, 922, 923, 5, 101,
		0, 0, 923, 1005, 3, 54, 27, 16, 924, 925, 10, 14, 0, 0, 925, 927, 5, 94,
		0, 0, 926, 928, 5, 105, 0, 0, 927, 926, 1, 0, 0, 0, 927, 928, 1, 0, 0,
		0, 928, 931, 1, 0, 0, 0, 929, 930, 5, 64, 0, 0, 930, 932, 5, 77, 0, 0,
		931, 929, 1, 0, 0, 0, 931, 932, 1, 0, 0, 0, 932, 933, 1, 0, 0, 0, 933,
		1005, 3, 54, 27, 15, 934, 936, 10, 11, 0, 0, 935, 937, 5, 105, 0, 0, 936,
		935, 1, 0, 0, 0, 936, 937, 1, 0, 0, 0, 937, 938, 1, 0, 0, 0, 938, 939,
		5, 41, 0, 0, 939, 940, 3, 54, 27, 0, 940, 941, 5, 34, 0, 0, 941, 942, 3,
		54, 27, 12, 942, 1005, 1, 0, 0, 0, 943, 944, 10, 9, 0, 0, 944, 945, 7,
		14, 0, 0, 945, 1005, 3, 54, 27, 10, 946, 948, 10, 13, 0, 0, 947, 949, 5,
		105, 0, 0, 948, 947, 1, 0, 0, 0, 948, 949, 1, 0, 0, 0, 949, 950, 1, 0,
		0, 0, 950, 951, 5, 99, 0, 0, 951, 954, 3, 54, 27, 0, 952, 953, 5, 69, 0,
		0, 953, 955, 3, 54, 27, 0, 954, 952, 1, 0, 0, 0, 954, 955, 1, 0, 0, 0,
		955, 1005, 1, 0, 0, 0, 956, 958, 10, 12, 0, 0, 957, 959, 5, 105, 0, 0,
		958, 957, 1, 0, 0, 0, 958, 959, 1, 0, 0, 0, 959, 960, 1, 0, 0, 0, 960,
		992, 5, 85, 0, 0, 961, 993, 3, 54, 27, 0, 962, 964, 5, 3, 0, 0, 963, 965,
		3, 76, 38, 0, 964, 963, 1, 0, 0, 0, 964, 965, 1, 0, 0, 0, 965, 966, 1,
		0, 0, 0, 966, 993, 5, 4, 0, 0, 967, 968, 3, 158, 79, 0, 968, 969, 5, 2,
		0, 0, 969, 971, 1, 0, 0, 0, 970, 967, 1, 0, 0, 0, 970, 971, 1, 0, 0, 0,
		971, 972, 1, 0, 0, 0, 972, 993, 3, 160, 80, 0, 973, 974, 3, 158, 79, 0,
		974, 975, 5, 2, 0, 0, 975, 977, 1, 0, 0, 0, 976, 973, 1, 0, 0, 0, 976,
		977, 1, 0, 0, 0, 977, 978, 1, 0, 0, 0, 978, 979, 3, 200, 100, 0, 979, 988,
		5, 3, 0, 0, 980, 985, 3, 54, 27, 0, 981, 982, 5, 5, 0, 0, 982, 984, 3,
		54, 27, 0, 983, 981, 1, 0, 0, 0, 984, 987, 1, 0, 0, 0, 985, 983, 1, 0,
		0, 0, 985, 986, 1, 0, 0, 0, 986, 989, 1, 0, 0, 0, 987, 985, 1, 0, 0, 0,
		988, 980, 1, 0, 0, 0, 988, 989, 1, 0, 0, 0, 989, 990, 1, 0, 0, 0, 990,
		991, 5, 4, 0, 0, 991, 993, 1, 0, 0, 0, 992, 961, 1, 0, 0, 0, 992, 962,
		1, 0, 0, 0, 992, 970, 1, 0, 0, 0, 992, 976, 1, 0, 0, 0, 993, 1005, 1, 0,
		0, 0, 994, 999, 10, 10, 0, 0, 995, 1000, 5, 95, 0, 0, 996, 1000, 5, 106,
		0, 0, 997, 998, 5, 105, 0, 0, 998, 1000, 5, 107, 0, 0, 999, 995, 1, 0,
		0, 0, 999, 996, 1, 0, 0, 0, 999, 997, 1, 0, 0, 0, 1000, 1005, 1, 0, 0,
		0, 1001, 1002, 10, 4, 0, 0, 1002, 1003, 5, 47, 0, 0, 1003, 1005, 3, 166,
		83, 0, 1004, 891, 1, 0, 0, 0, 1004, 894, 1, 0, 0, 0, 1004, 897, 1, 0, 0,
		0, 1004, 900, 1, 0, 0, 0, 1004, 903, 1, 0, 0, 0, 1004, 906, 1, 0, 0, 0,
		1004, 909, 1, 0, 0, 0, 1004, 912, 1, 0, 0, 0, 1004, 918, 1, 0, 0, 0, 1004,
		924, 1, 0, 0, 0, 1004, 934, 1, 0, 0, 0, 1004, 943, 1, 0, 0, 0, 1004, 946,
		1, 0, 0, 0, 1004, 956, 1, 0, 0, 0, 1004, 994, 1, 0, 0, 0, 1004, 1001, 1,
		0, 0, 0, 1005, 1008, 1, 0, 0, 0, 1006, 1004, 1, 0, 0, 0, 1006, 1007, 1,
		0, 0, 0, 1007, 55, 1, 0, 0, 0, 1008, 1006, 1, 0, 0, 0, 1009, 1010, 5, 118,
		0, 0, 1010, 1015, 5, 3, 0, 0, 1011, 1016, 5, 83, 0, 0, 1012, 1013, 7, 15,
		0, 0, 1013, 1014, 5, 5, 0, 0, 1014, 1016, 3, 148, 74, 0, 1015, 1011, 1,
		0, 0, 0, 1015, 1012, 1, 0, 0, 0, 1016, 1017, 1, 0, 0, 0, 1017, 1018, 5,
		4, 0, 0, 1018, 57, 1, 0, 0, 0, 1019, 1020, 7, 16, 0, 0, 1020, 59, 1, 0,
		0, 0, 1021, 1022, 5, 3, 0, 0, 1022, 1027, 3, 54, 27, 0, 1023, 1024, 5,
		5, 0, 0, 1024, 1026, 3, 54, 27, 0, 1025, 1023, 1, 0, 0, 0, 1026, 1029,
		1, 0, 0, 0, 1027, 1025, 1, 0, 0, 0, 1027, 1028, 1, 0, 0, 0, 1028, 1030,
		1, 0, 0, 0, 1029, 1027, 1, 0, 0, 0, 1030, 1031, 5, 4, 0, 0, 1031, 61, 1,
		0, 0, 0, 1032, 1033, 5, 147, 0, 0, 1033, 1038, 3, 60, 30, 0, 1034, 1035,
		5, 5, 0, 0, 1035, 1037, 3, 60, 30, 0, 1036, 1034, 1, 0, 0, 0, 1037, 1040,
		1, 0, 0, 0, 1038, 1036, 1, 0, 0, 0, 1038, 1039, 1, 0, 0, 0, 1039, 63, 1,
		0, 0, 0, 1040, 1038, 1, 0, 0, 0, 1041, 1043, 3, 112, 56, 0, 1042, 1041,
		1, 0, 0, 0, 1042, 1043, 1, 0, 0, 0, 1043, 1049, 1, 0, 0, 0, 1044, 1050,
		5, 90, 0, 0, 1045, 1050, 5, 125, 0, 0, 1046, 1047, 5, 90, 0, 0, 1047, 1048,
		5, 111, 0, 0, 1048, 1050, 7, 8, 0, 0, 1049, 1044, 1, 0, 0, 0, 1049, 1045,
		1, 0, 0, 0, 1049, 1046, 1, 0, 0, 0, 1050, 1051, 1, 0, 0, 0, 1051, 1055,
		5, 93, 0, 0, 1052, 1053, 3, 158, 79, 0, 1053, 1054, 5, 2, 0, 0, 1054, 1056,
		1, 0, 0, 0, 1055, 1052, 1, 0, 0, 0, 1055, 1056, 1, 0, 0, 0, 1056, 1057,
		1, 0, 0, 0, 1057, 1060, 3, 160, 80, 0, 1058, 1059, 5, 35, 0, 0, 1059, 1061,
		3, 182, 91, 0, 1060, 1058, 1, 0, 0, 0, 1060, 1061, 1, 0, 0, 0, 1061, 1073,
		1, 0, 0, 0, 1062, 1063, 5, 3, 0, 0, 1063, 1068, 3, 164, 82, 0, 1064, 1065,
		5, 5, 0, 0, 1065, 1067, 3, 164, 82, 0, 1066, 1064, 1, 0, 0, 0, 1067, 1070,
		1, 0, 0, 0, 1068, 1066, 1, 0, 0, 0, 1068, 1069, 1, 0, 0, 0, 1069, 1071,
		1, 0, 0, 0, 1070, 1068, 1, 0, 0, 0, 1071, 1072, 5, 4, 0, 0, 1072, 1074,
		1, 0, 0, 0, 1073, 1062, 1, 0, 0, 0, 1073, 1074, 1, 0, 0, 0, 1074, 1084,
		1, 0, 0, 0, 1075, 1078, 3, 62, 31, 0, 1076, 1078, 3, 76, 38, 0, 1077, 1075,
		1, 0, 0, 0, 1077, 1076, 1, 0, 0, 0, 1078, 1080, 1, 0, 0, 0, 1079, 1081,
		3, 68, 34, 0, 1080, 1079, 1, 0, 0, 0, 1080, 1081, 1, 0, 0, 0, 1081, 1085,
		1, 0, 0, 0, 1082, 1083, 5, 58, 0, 0, 1083, 1085, 5, 147, 0, 0, 1084, 1077,
		1, 0, 0, 0, 1084, 1082, 1, 0, 0, 0, 1085, 1087, 1, 0, 0, 0, 1086, 1088,
		3, 66, 33, 0, 1087, 1086, 1, 0, 0, 0, 1087, 1088, 1, 0, 0, 0, 1088, 65,
		1, 0, 0, 0, 1089, 1090, 5, 127, 0, 0, 1090, 1095, 3, 80, 40, 0, 1091, 1092,
		5, 5, 0, 0, 1092, 1094, 3, 80, 40, 0, 1093, 1091, 1, 0, 0, 0, 1094, 1097,
		1, 0, 0, 0, 1095, 1093, 1, 0, 0, 0, 1095, 1096, 1, 0, 0, 0, 1096, 67, 1,
		0, 0, 0, 1097, 1095, 1, 0, 0, 0, 1098, 1099, 5, 110, 0, 0, 1099, 1113,
		5, 50, 0, 0, 1100, 1101, 5, 3, 0, 0, 1101, 1106, 3, 24, 12, 0, 1102, 1103,
		5, 5, 0, 0, 1103, 1105, 3, 24, 12, 0, 1104, 1102, 1, 0, 0, 0, 1105, 1108,
		1, 0, 0, 0, 1106, 1104, 1, 0, 0, 0, 1106, 1107, 1, 0, 0, 0, 1107, 1109,
		1, 0, 0, 0, 1108, 1106, 1, 0, 0, 0, 1109, 1111, 5, 4, 0, 0, 1110, 1112,
		3, 116, 58, 0, 1111, 1110, 1, 0, 0, 0, 1111, 1112, 1, 0, 0, 0, 1112, 1114,
		1, 0, 0, 0, 1113, 1100, 1, 0, 0, 0, 1113, 1114, 1, 0, 0, 0, 1114, 1115,
		1, 0, 0, 0, 1115, 1141, 5, 186, 0, 0, 1116, 1142, 5, 187, 0, 0, 1117, 1118,
		5, 144, 0, 0, 1118, 1121, 5, 134, 0, 0, 1119, 1122, 3, 164, 82, 0, 1120,
		1122, 3, 96, 48, 0, 1121, 1119, 1, 0, 0, 0, 1121, 1120, 1, 0, 0, 0, 1122,
		1123, 1, 0, 0, 0, 1123, 1124, 5, 6, 0, 0, 1124, 1135, 3, 54, 27, 0, 1125,
		1128, 5, 5, 0, 0, 1126, 1129, 3, 164, 82, 0, 1127, 1129, 3, 96, 48, 0,
		1128, 1126, 1, 0, 0, 0, 1128, 1127, 1, 0, 0, 0, 1129, 1130, 1, 0, 0, 0,
		1130, 1131, 5, 6, 0, 0, 1131, 1132, 3, 54, 27, 0, 1132, 1134, 1, 0, 0,
		0, 1133, 1125, 1, 0, 0, 0, 1134, 1137, 1, 0, 0, 0, 1135, 1133, 1, 0, 0,
		0, 1135, 1136, 1, 0, 0, 0, 1136, 1139, 1, 0, 0, 0, 1137, 1135, 1, 0, 0,
		0, 1138, 1140, 3, 116, 58, 0, 1139, 1138, 1, 0, 0, 0, 1139, 1140, 1, 0,
		0, 0, 1140, 1142, 1, 0, 0, 0, 1141, 1116, 1, 0, 0, 0, 1141, 1117, 1, 0,
		0, 0, 1142, 69, 1, 0, 0, 0, 1143, 1147, 5, 115, 0, 0, 1144, 1145, 3, 158,
		79, 0, 1145, 1146, 5, 2, 0, 0, 1146, 1148, 1, 0, 0, 0, 1147, 1144, 1, 0,
		0, 0, 1147, 1148, 1, 0, 0, 0, 1148, 1149, 1, 0, 0, 0, 1149, 1156, 3, 178,
		89, 0, 1150, 1151, 5, 6, 0, 0, 1151, 1157, 3, 72, 36, 0, 1152, 1153, 5,
		3, 0, 0, 1153, 1154, 3, 72, 36, 0, 1154, 1155, 5, 4, 0, 0, 1155, 1157,
		1, 0, 0, 0, 1156, 1150, 1, 0, 0, 0, 1156, 1152, 1, 0, 0, 0, 1156, 1157,
		1, 0, 0, 0, 1157, 71, 1, 0, 0, 0, 1158, 1162, 3, 34, 17, 0, 1159, 1162,
		3, 154, 77, 0, 1160, 1162, 5, 192, 0, 0, 1161, 1158, 1, 0, 0, 0, 1161,
		1159, 1, 0, 0, 0, 1161, 1160, 1, 0, 0, 0, 1162, 73, 1, 0, 0, 0, 1163, 1174,
		5, 122, 0, 0, 1164, 1175, 3, 166, 83, 0, 1165, 1166, 3, 158, 79, 0, 1166,
		1167, 5, 2, 0, 0, 1167, 1169, 1, 0, 0, 0, 1168, 1165, 1, 0, 0, 0, 1168,
		1169, 1, 0, 0, 0, 1169, 1172, 1, 0, 0, 0, 1170, 1173, 3, 160, 80, 0, 1171,
		1173, 3, 170, 85, 0, 1172, 1170, 1, 0, 0, 0, 1172, 1171, 1, 0, 0, 0, 1173,
		1175, 1, 0, 0, 0, 1174, 1164, 1, 0, 0, 0, 1174, 1168, 1, 0, 0, 0, 1174,
		1175, 1, 0, 0, 0, 1175, 75, 1, 0, 0, 0, 1176, 1178, 3, 112, 56, 0, 1177,
		1176, 1, 0, 0, 0, 1177, 1178, 1, 0, 0, 0, 1178, 1179, 1, 0, 0, 0, 1179,
		1183, 3, 78, 39, 0, 1180, 1182, 3, 90, 45, 0, 1181, 1180, 1, 0, 0, 0, 1182,
		1185, 1, 0, 0, 0, 1183, 1181, 1, 0, 0, 0, 1183, 1184, 1, 0, 0, 0, 1184,
		1187, 1, 0, 0, 0, 1185, 1183, 1, 0, 0, 0, 1186, 1188, 3, 118, 59, 0, 1187,
		1186, 1, 0, 0, 0, 1187, 1188, 1, 0, 0, 0, 1188, 1190, 1, 0, 0, 0, 1189,
		1191, 3, 124, 62, 0, 1190, 1189, 1, 0, 0, 0, 1190, 1191, 1, 0, 0, 0, 1191,
		77, 1, 0, 0, 0, 1192, 1194, 5, 133, 0, 0, 1193, 1195, 7, 17, 0, 0, 1194,
		1193, 1, 0, 0, 0, 1194, 1195, 1, 0, 0, 0, 1195, 1196, 1, 0, 0, 0, 1196,
		1201, 3, 80, 40, 0, 1197, 1198, 5, 5, 0, 0, 1198, 1200, 3, 80, 40, 0, 1199,
		1197, 1, 0, 0, 0, 1200, 1203, 1, 0, 0, 0, 1201, 1199, 1, 0, 0, 0, 1201,
		1202, 1, 0, 0, 0, 1202, 1206, 1, 0, 0, 0, 1203, 1201, 1, 0, 0, 0, 1204,
		1205, 5, 77, 0, 0, 1205, 1207, 3, 82, 41, 0, 1206, 1204, 1, 0, 0, 0, 1206,
		1207, 1, 0, 0, 0, 1207, 1209, 1, 0, 0, 0, 1208, 1210, 3, 116, 58, 0, 1209,
		1208, 1, 0, 0, 0, 1209, 1210, 1, 0, 0, 0, 1210, 1218, 1, 0, 0, 0, 1211,
		1212, 5, 80, 0, 0, 1212, 1213, 5, 42, 0, 0, 1213, 1216, 3, 120, 60, 0,
		1214, 1215, 5, 81, 0, 0, 1215, 1217, 3, 54, 27, 0, 1216, 1214, 1, 0, 0,
		0, 1216, 1217, 1, 0, 0, 0, 1217, 1219, 1, 0, 0, 0, 1218, 1211, 1, 0, 0,
		0, 1218, 1219, 1, 0, 0, 0, 1219, 1229, 1, 0, 0, 0, 1220, 1221, 5, 177,
		0, 0, 1221, 1226, 3, 122, 61, 0, 1222, 1223, 5, 5, 0, 0, 1223, 1225, 3,
		122, 61, 0, 1224, 1222, 1, 0, 0, 0, 1225, 1228, 1, 0, 0, 0, 1226, 1224,
		1, 0, 0, 0, 1226, 1227, 1, 0, 0, 0, 1227, 1230, 1, 0, 0, 0, 1228, 1226,
		1, 0, 0, 0, 1229, 1220, 1, 0, 0, 0, 1229, 1230, 1, 0, 0, 0, 1230, 1233,
		1, 0, 0, 0, 1231, 1233, 3, 62, 31, 0, 1232, 1192, 1, 0, 0, 0, 1232, 1231,
		1, 0, 0, 0, 1233, 79, 1, 0, 0, 0, 1234, 1247, 5, 7, 0, 0, 1235, 1236, 3,
		160, 80, 0, 1236, 1237, 5, 2, 0, 0, 1237, 1238, 5, 7, 0, 0, 1238, 1247,
		1, 0, 0, 0, 1239, 1244, 3, 54, 27, 0, 1240, 1242, 5, 35, 0, 0, 1241, 1240,
		1, 0, 0, 0, 1241, 1242, 1, 0, 0, 0, 1242, 1243, 1, 0, 0, 0, 1243, 1245,
		3, 188, 94, 0, 1244, 1241, 1, 0, 0, 0, 1244, 1245, 1, 0, 0, 0, 1245, 1247,
		1, 0, 0, 0, 1246, 1234, 1, 0, 0, 0, 1246, 1235, 1, 0, 0, 0, 1246, 1239,
		1, 0, 0, 0, 1247, 81, 1, 0, 0, 0, 1248, 1256, 3, 88, 44, 0, 1249, 1250,
		3, 84, 42, 0, 1250, 1252, 3, 88, 44, 0, 1251, 1253, 3, 86, 43, 0, 1252,
		1251, 1, 0, 0, 0, 1252, 1253, 1, 0, 0, 0, 1253, 1255, 1, 0, 0, 0, 1254,
		1249, 1, 0, 0, 0, 1255, 1258, 1, 0, 0, 0, 1256, 1254, 1, 0, 0, 0, 1256,
		1257, 1, 0, 0, 0, 1257, 83, 1, 0, 0, 0, 1258, 1256, 1, 0, 0, 0, 1259, 1265,
		5, 5, 0, 0, 1260, 1262, 5, 53, 0, 0, 1261, 1260, 1, 0, 0, 0, 1261, 1262,
		1, 0, 0, 0, 1262, 1263, 1, 0, 0, 0, 1263, 1265, 5, 96, 0, 0, 1264, 1259,
		1, 0, 0, 0, 1264, 1261, 1, 0, 0, 0, 1265, 1280, 1, 0, 0, 0, 1266, 1268,
		5, 103, 0, 0, 1267, 1266, 1, 0, 0, 0, 1267, 1268, 1, 0, 0, 0, 1268, 1269,
		1, 0, 0, 0, 1269, 1271, 7, 18, 0, 0, 1270, 1272, 5, 113, 0, 0, 1271, 1270,
		1, 0, 0, 0, 1271, 1272, 1, 0, 0, 0, 1272, 1273, 1, 0, 0, 0, 1273, 1280,
		5, 96, 0, 0, 1274, 1276, 5, 103, 0, 0, 1275, 1274, 1, 0, 0, 0, 1275, 1276,
		1, 0, 0, 0, 1276, 1277, 1, 0, 0, 0, 1277, 1278, 5, 89, 0, 0, 1278, 1280,
		5, 96, 0, 0, 1279, 1264, 1, 0, 0, 0, 1279, 1267, 1, 0, 0, 0, 1279, 1275,
		1, 0, 0, 0, 1280, 85, 1, 0, 0, 0, 1281, 1282, 5, 110, 0, 0, 1282, 1296,
		3, 54, 27, 0, 1283, 1284, 5, 145, 0, 0, 1284, 1285, 5, 3, 0, 0, 1285, 1290,
		3, 164, 82, 0, 1286, 1287, 5, 5, 0, 0, 1287, 1289, 3, 164, 82, 0, 1288,
		1286, 1, 0, 0, 0, 1289, 1292, 1, 0, 0, 0, 1290, 1288, 1, 0, 0, 0, 1290,
		1291, 1, 0, 0, 0, 1291, 1293, 1, 0, 0, 0, 1292, 1290, 1, 0, 0, 0, 1293,
		1294, 5, 4, 0, 0, 1294, 1296, 1, 0, 0, 0, 1295, 1281, 1, 0, 0, 0, 1295,
		1283, 1, 0, 0, 0, 1296, 87, 1, 0, 0, 0, 1297, 1298, 3, 158, 79, 0, 1298,
		1299, 5, 2, 0, 0, 1299, 1301, 1, 0, 0, 0, 1300, 1297, 1, 0, 0, 0, 1300,
		1301, 1, 0, 0, 0, 1301, 1302, 1, 0, 0, 0, 1302, 1307, 3, 160, 80, 0, 1303,
		1305, 5, 35, 0, 0, 1304, 1303, 1, 0, 0, 0, 1304, 1305, 1, 0, 0, 0, 1305,
		1306, 1, 0, 0, 0, 1306, 1308, 3, 182, 91, 0, 1307, 1304, 1, 0, 0, 0, 1307,
		1308, 1, 0, 0, 0, 1308, 1314, 1, 0, 0, 0, 1309, 1310, 5, 87, 0, 0, 1310,
		1311, 5, 42, 0, 0, 1311, 1315, 3, 170, 85, 0, 1312, 1313, 5, 105, 0, 0,
		1313, 1315, 5, 87, 0, 0, 1314, 1309, 1, 0, 0, 0, 1314, 1312, 1, 0, 0, 0,
		1314, 1315, 1, 0, 0, 0, 1315, 1352, 1, 0, 0, 0, 1316, 1317, 3, 158, 79,
		0, 1317, 1318, 5, 2, 0, 0, 1318, 1320, 1, 0, 0, 0, 1319, 1316, 1, 0, 0,
		0, 1319, 1320, 1, 0, 0, 0, 1320, 1321, 1, 0, 0, 0, 1321, 1322, 3, 200,
		100, 0, 1322, 1323, 5, 3, 0, 0, 1323, 1328, 3, 54, 27, 0, 1324, 1325, 5,
		5, 0, 0, 1325, 1327, 3, 54, 27, 0, 1326, 1324, 1, 0, 0, 0, 1327, 1330,
		1, 0, 0, 0, 1328, 1326, 1, 0, 0, 0, 1328, 1329, 1, 0, 0, 0, 1329, 1331,
		1, 0, 0, 0, 1330, 1328, 1, 0, 0, 0, 1331, 1336, 5, 4, 0, 0, 1332, 1334,
		5, 35, 0, 0, 1333, 1332, 1, 0, 0, 0, 1333, 1334, 1, 0, 0, 0, 1334, 1335,
		1, 0, 0, 0, 1335, 1337, 3, 182, 91, 0, 1336, 1333, 1, 0, 0, 0, 1336, 1337,
		1, 0, 0, 0, 1337, 1352, 1, 0, 0, 0, 1338, 1339, 5, 3, 0, 0, 1339, 1340,
		3, 76, 38, 0, 1340, 1345, 5, 4, 0, 0, 1341, 1343, 5, 35, 0, 0, 1342, 1341,
		1, 0, 0, 0, 1342, 1343, 1, 0, 0, 0, 1343, 1344, 1, 0, 0, 0, 1344, 1346,
		3, 182, 91, 0, 1345, 1342, 1, 0, 0, 0, 1345, 1346, 1, 0, 0, 0, 1346, 1352,
		1, 0, 0, 0, 1347, 1348, 5, 3, 0, 0, 1348, 1349, 3, 88, 44, 0, 1349, 1350,
		5, 4, 0, 0, 1350, 1352, 1, 0, 0, 0, 1351, 1300, 1, 0, 0, 0, 1351, 1319,
		1, 0, 0, 0, 1351, 1338, 1, 0, 0, 0, 1351, 1347, 1, 0, 0, 0, 1352, 89, 1,
		0, 0, 0, 1353, 1354, 3, 92, 46, 0, 1354, 1355, 3, 78, 39, 0, 1355, 91,
		1, 0, 0, 0, 1356, 1358, 5, 142, 0, 0, 1357, 1359, 5, 31, 0, 0, 1358, 1357,
		1, 0, 0, 0, 1358, 1359, 1, 0, 0, 0, 1359, 1363, 1, 0, 0, 0, 1360, 1363,
		5, 92, 0, 0, 1361, 1363, 5, 70, 0, 0, 1362, 1356, 1, 0, 0, 0, 1362, 1360,
		1, 0, 0, 0, 1362, 1361, 1, 0, 0, 0, 1363, 93, 1, 0, 0, 0, 1364, 1366, 3,
		112, 56, 0, 1365, 1364, 1, 0, 0, 0, 1365, 1366, 1, 0, 0, 0, 1366, 1367,
		1, 0, 0, 0, 1367, 1370, 5, 144, 0, 0, 1368, 1369, 5, 111, 0, 0, 1369, 1371,
		7, 8, 0, 0, 1370, 1368, 1, 0, 0, 0, 1370, 1371, 1, 0, 0, 0, 1371, 1372,
		1, 0, 0, 0, 1372, 1373, 3, 98, 49, 0, 1373, 1376, 5, 134, 0, 0, 1374, 1377,
		3, 164, 82, 0, 1375, 1377, 3, 96, 48, 0, 1376, 1374, 1, 0, 0, 0, 1376,
		1375, 1, 0, 0, 0, 1377, 1378, 1, 0, 0, 0, 1378, 1379, 5, 6, 0, 0, 1379,
		1390, 3, 54, 27, 0, 1380, 1383, 5, 5, 0, 0, 1381, 1384, 3, 164, 82, 0,
		1382, 1384, 3, 96, 48, 0, 1383, 1381, 1, 0, 0, 0, 1383, 1382, 1, 0, 0,
		0, 1384, 1385, 1, 0, 0, 0, 1385, 1386, 5, 6, 0, 0, 1386, 1387, 3, 54, 27,
		0, 1387, 1389, 1, 0, 0, 0, 1388, 1380, 1, 0, 0, 0, 1389, 1392, 1, 0, 0,
		0, 1390, 1388, 1, 0, 0, 0, 1390, 1391, 1, 0, 0, 0, 1391, 1395, 1, 0, 0,
		0, 1392, 1390, 1, 0, 0, 0, 1393, 1394, 5, 77, 0, 0, 1394, 1396, 3, 82,
		41, 0, 1395, 1393, 1, 0, 0, 0, 1395, 1396, 1, 0, 0, 0, 1396, 1398, 1, 0,
		0, 0, 1397, 1399, 3, 116, 58, 0, 1398, 1397, 1, 0, 0, 0, 1398, 1399, 1,
		0, 0, 0, 1399, 1401, 1, 0, 0, 0, 1400, 1402, 3, 66, 33, 0, 1401, 1400,
		1, 0, 0, 0, 1401, 1402, 1, 0, 0, 0, 1402, 1407, 1, 0, 0, 0, 1403, 1405,
		3, 118, 59, 0, 1404, 1403, 1, 0, 0, 0, 1404, 1405, 1, 0, 0, 0, 1405, 1406,
		1, 0, 0, 0, 1406, 1408, 3, 124, 62, 0, 1407, 1404, 1, 0, 0, 0, 1407, 1408,
		1, 0, 0, 0, 1408, 95, 1, 0, 0, 0, 1409, 1410, 5, 3, 0, 0, 1410, 1415, 3,
		164, 82, 0, 1411, 1412, 5, 5, 0, 0, 1412, 1414, 3, 164, 82, 0, 1413, 1411,
		1, 0, 0, 0, 1414, 1417, 1, 0, 0, 0, 1415, 1413, 1, 0, 0, 0, 1415, 1416,
		1, 0, 0, 0, 1416, 1418, 1, 0, 0, 0, 1417, 1415, 1, 0, 0, 0, 1418, 1419,
		5, 4, 0, 0, 1419, 97, 1, 0, 0, 0, 1420, 1421, 3, 158, 79, 0, 1421, 1422,
		5, 2, 0, 0, 1422, 1424, 1, 0, 0, 0, 1423, 1420, 1, 0, 0, 0, 1423, 1424,
		1, 0, 0, 0, 1424, 1425, 1, 0, 0, 0, 1425, 1428, 3, 160, 80, 0, 1426, 1427,
		5, 35, 0, 0, 1427, 1429, 3, 188, 94, 0, 1428, 1426, 1, 0, 0, 0, 1428, 1429,
		1, 0, 0, 0, 1429, 1435, 1, 0, 0, 0, 1430, 1431, 5, 87, 0, 0, 1431, 1432,
		5, 42, 0, 0, 1432, 1436, 3, 170, 85, 0, 1433, 1434, 5, 105, 0, 0, 1434,
		1436, 5, 87, 0, 0, 1435, 1430, 1, 0, 0, 0, 1435, 1433, 1, 0, 0, 0, 1435,
		1436, 1, 0, 0, 0, 1436, 99, 1, 0, 0, 0, 1437, 1439, 5, 146, 0, 0, 1438,
		1440, 3, 158, 79, 0, 1439, 1438, 1, 0, 0, 0, 1439, 1440, 1, 0, 0, 0, 1440,
		1443, 1, 0, 0, 0, 1441, 1442, 5, 93, 0, 0, 1442, 1444, 3, 190, 95, 0, 1443,
		1441, 1, 0, 0, 0, 1443, 1444, 1, 0, 0, 0, 1444, 101, 1, 0, 0, 0, 1445,
		1446, 5, 181, 0, 0, 1446, 1447, 5, 3, 0, 0, 1447, 1448, 5, 151, 0, 0, 1448,
		1449, 3, 54, 27, 0, 1449, 1450, 5, 4, 0, 0, 1450, 103, 1, 0, 0, 0, 1451,
		1453, 5, 3, 0, 0, 1452, 1454, 3, 192, 96, 0, 1453, 1452, 1, 0, 0, 0, 1453,
		1454, 1, 0, 0, 0, 1454, 1465, 1, 0, 0, 0, 1455, 1456, 5, 156, 0, 0, 1456,
		1457, 5, 42, 0, 0, 1457, 1462, 3, 54, 27, 0, 1458, 1459, 5, 5, 0, 0, 1459,
		1461, 3, 54, 27, 0, 1460, 1458, 1, 0, 0, 0, 1461, 1464, 1, 0, 0, 0, 1462,
		1460, 1, 0, 0, 0, 1462, 1463, 1, 0, 0, 0, 1463, 1466, 1, 0, 0, 0, 1464,
		1462, 1, 0, 0, 0, 1465, 1455, 1, 0, 0, 0, 1465, 1466, 1, 0, 0, 0, 1466,
		1468, 1, 0, 0, 0, 1467, 1469, 3, 118, 59, 0, 1468, 1467, 1, 0, 0, 0, 1468,
		1469, 1, 0, 0, 0, 1469, 1471, 1, 0, 0, 0, 1470, 1472, 3, 108, 54, 0, 1471,
		1470, 1, 0, 0, 0, 1471, 1472, 1, 0, 0, 0, 1472, 1473, 1, 0, 0, 0, 1473,
		1474, 5, 4, 0, 0, 1474, 105, 1, 0, 0, 0, 1475, 1478, 5, 155, 0, 0, 1476,
		1479, 3, 186, 93, 0, 1477, 1479, 3, 104, 52, 0, 1478, 1476, 1, 0, 0, 0,
		1478, 1477, 1, 0, 0, 0, 1479, 107, 1, 0, 0, 0, 1480, 1490, 3, 110, 55,
		0, 1481, 1488, 5, 183, 0, 0, 1482, 1483, 5, 104, 0, 0, 1483, 1489, 5, 185,
		0, 0, 1484, 1485, 5, 160, 0, 0, 1485, 1489, 5, 130, 0, 0, 1486, 1489, 5,
		80, 0, 0, 1487, 1489, 5, 184, 0, 0, 1488, 1482, 1, 0, 0, 0, 1488, 1484,
		1, 0, 0, 0, 1488, 1486, 1, 0, 0, 0, 1488, 1487, 1, 0, 0, 0, 1489, 1491,
		1, 0, 0, 0, 1490, 1481, 1, 0, 0, 0, 1490, 1491, 1, 0, 0, 0, 1491, 109,
		1, 0, 0, 0, 1492, 1499, 7, 19, 0, 0, 1493, 1500, 3, 134, 67, 0, 1494, 1495,
		5, 41, 0, 0, 1495, 1496, 3, 130, 65, 0, 1496, 1497, 5, 34, 0, 0, 1497,
		1498, 3, 132, 66, 0, 1498, 1500, 1, 0, 0, 0, 1499, 1493, 1, 0, 0, 0, 1499,
		1494, 1, 0, 0, 0, 1500, 111, 1, 0, 0, 0, 1501, 1503, 5, 152, 0, 0, 1502,
		1504, 5, 119, 0, 0, 1503, 1502, 1, 0, 0, 0, 1503, 1504, 1, 0, 0, 0, 1504,
		1505, 1, 0, 0, 0, 1505, 1510, 3, 114, 57, 0, 1506, 1507, 5, 5, 0, 0, 1507,
		1509, 3, 114, 57, 0, 1508, 1506, 1, 0, 0, 0, 1509, 1512, 1, 0, 0, 0, 1510,
		1508, 1, 0, 0, 0, 1510, 1511, 1, 0, 0, 0, 1511, 113, 1, 0, 0, 0, 1512,
		1510, 1, 0, 0, 0, 1513, 1525, 3, 160, 80, 0, 1514, 1515, 5, 3, 0, 0, 1515,
		1520, 3, 164, 82, 0, 1516, 1517, 5, 5, 0, 0, 1517, 1519, 3, 164, 82, 0,
		1518, 1516, 1, 0, 0, 0, 1519, 1522, 1, 0, 0, 0, 1520, 1518, 1, 0, 0, 0,
		1520, 1521, 1, 0, 0, 0, 1521, 1523, 1, 0, 0, 0, 1522, 1520, 1, 0, 0, 0,
		1523, 1524, 5, 4, 0, 0, 1524, 1526, 1, 0, 0, 0, 1525, 1514, 1, 0, 0, 0,
		1525, 1526, 1, 0, 0, 0, 1526, 1527, 1, 0, 0, 0, 1527, 1529, 5, 35, 0, 0,
		1528, 1530, 5, 105, 0, 0, 1529, 1528, 1, 0, 0, 0, 1529, 1530, 1, 0, 0,
		0, 1530, 1532, 1, 0, 0, 0, 1531, 1533, 5, 102, 0, 0, 1532, 1531, 1, 0,
		0, 0, 1532, 1533, 1, 0, 0, 0, 1533, 1534, 1, 0, 0, 0, 1534, 1535, 5, 3,
		0, 0, 1535, 1536, 3, 76, 38, 0, 1536, 1537, 5, 4, 0, 0, 1537, 115, 1, 0,
		0, 0, 1538, 1539, 5, 151, 0, 0, 1539, 1540, 3, 54, 27, 0, 1540, 117, 1,
		0, 0, 0, 1541, 1542, 5, 112, 0, 0, 1542, 1543, 5, 42, 0, 0, 1543, 1548,
		3, 126, 63, 0, 1544, 1545, 5, 5, 0, 0, 1545, 1547, 3, 126, 63, 0, 1546,
		1544, 1, 0, 0, 0, 1547, 1550, 1, 0, 0, 0, 1548, 1546, 1, 0, 0, 0, 1548,
		1549, 1, 0, 0, 0, 1549, 119, 1, 0, 0, 0, 1550, 1548, 1, 0, 0, 0, 1551,
		1556, 3, 54, 27, 0, 1552, 1553, 5, 5, 0, 0, 1553, 1555, 3, 54, 27, 0, 1554,
		1552, 1, 0, 0, 0, 1555, 1558, 1, 0, 0, 0, 1556, 1554, 1, 0, 0, 0, 1556,
		1557, 1, 0, 0, 0, 1557, 121, 1, 0, 0, 0, 1558, 1556, 1, 0, 0, 0, 1559,
		1560, 3, 186, 93, 0, 1560, 1561, 5, 35, 0, 0, 1561, 1562, 3, 104, 52, 0,
		1562, 123, 1, 0, 0, 0, 1563, 1564, 5, 100, 0, 0, 1564, 1567, 3, 54, 27,
		0, 1565, 1566, 7, 20, 0, 0, 1566, 1568, 3, 54, 27, 0, 1567, 1565, 1, 0,
		0, 0, 1567, 1568, 1, 0, 0, 0, 1568, 125, 1, 0, 0, 0, 1569, 1572, 3, 54,
		27, 0, 1570, 1571, 5, 47, 0, 0, 1571, 1573, 3, 166, 83, 0, 1572, 1570,
		1, 0, 0, 0, 1572, 1573, 1, 0, 0, 0, 1573, 1575, 1, 0, 0, 0, 1574, 1576,
		3, 128, 64, 0, 1575, 1574, 1, 0, 0, 0, 1575, 1576, 1, 0, 0, 0, 1576, 1579,
		1, 0, 0, 0, 1577, 1578, 5, 178, 0, 0, 1578, 1580, 7, 21, 0, 0, 1579, 1577,
		1, 0, 0, 0, 1579, 1580, 1, 0, 0, 0, 1580, 127, 1, 0, 0, 0, 1581, 1582,
		7, 22, 0, 0, 1582, 129, 1, 0, 0, 0, 1583, 1584, 3, 54, 27, 0, 1584, 1585,
		5, 158, 0, 0, 1585, 1594, 1, 0, 0, 0, 1586, 1587, 3, 54, 27, 0, 1587, 1588,
		5, 161, 0, 0, 1588, 1594, 1, 0, 0, 0, 1589, 1590, 5, 160, 0, 0, 1590, 1594,
		5, 130, 0, 0, 1591, 1592, 5, 159, 0, 0, 1592, 1594, 5, 158, 0, 0, 1593,
		1583, 1, 0, 0, 0, 1593, 1586, 1, 0, 0, 0, 1593, 1589, 1, 0, 0, 0, 1593,
		1591, 1, 0, 0, 0, 1594, 131, 1, 0, 0, 0, 1595, 1596, 3, 54, 27, 0, 1596,
		1597, 5, 158, 0, 0, 1597, 1606, 1, 0, 0, 0, 1598, 1599, 3, 54, 27, 0, 1599,
		1600, 5, 161, 0, 0, 1600, 1606, 1, 0, 0, 0, 1601, 1602, 5, 160, 0, 0, 1602,
		1606, 5, 130, 0, 0, 1603, 1604, 5, 159, 0, 0, 1604, 1606, 5, 161, 0, 0,
		1605, 1595, 1, 0, 0, 0, 1605, 1598, 1, 0, 0, 0, 1605, 1601, 1, 0, 0, 0,
		1605, 1603, 1, 0, 0, 0, 1606, 133, 1, 0, 0, 0, 1607, 1608, 3, 54, 27, 0,
		1608, 1609, 5, 158, 0, 0, 1609, 1615, 1, 0, 0, 0, 1610, 1611, 5, 159, 0,
		0, 1611, 1615, 5, 158, 0, 0, 1612, 1613, 5, 160, 0, 0, 1613, 1615, 5, 130,
		0, 0, 1614, 1607, 1, 0, 0, 0, 1614, 1610, 1, 0, 0, 0, 1614, 1612, 1, 0,
		0, 0, 1615, 135, 1, 0, 0, 0, 1616, 1617, 5, 5, 0, 0, 1617, 1618, 3, 34,
		17, 0, 1618, 137, 1, 0, 0, 0, 1619, 1620, 5, 5, 0, 0, 1620, 1621, 3, 34,
		17, 0, 1621, 139, 1, 0, 0, 0, 1622, 1623, 5, 156, 0, 0, 1623, 1625, 5,
		42, 0, 0, 1624, 1626, 3, 54, 27, 0, 1625, 1624, 1, 0, 0, 0, 1626, 1627,
		1, 0, 0, 0, 1627, 1625, 1, 0, 0, 0, 1627, 1628, 1, 0, 0, 0, 1628, 141,
		1, 0, 0, 0, 1629, 1630, 5, 112, 0, 0, 1630, 1632, 5, 42, 0, 0, 1631, 1633,
		3, 54, 27, 0, 1632, 1631, 1, 0, 0, 0, 1633, 1634, 1, 0, 0, 0, 1634, 1632,
		1, 0, 0, 0, 1634, 1635, 1, 0, 0, 0, 1635, 143, 1, 0, 0, 0, 1636, 1637,
		5, 112, 0, 0, 1637, 1638, 5, 42, 0, 0, 1638, 1640, 3, 54, 27, 0, 1639,
		1641, 3, 128, 64, 0, 1640, 1639, 1, 0, 0, 0, 1640, 1641, 1, 0, 0, 0, 1641,
		1649, 1, 0, 0, 0, 1642, 1643, 5, 5, 0, 0, 1643, 1645, 3, 54, 27, 0, 1644,
		1646, 3, 128, 64, 0, 1645, 1644, 1, 0, 0, 0, 1645, 1646, 1, 0, 0, 0, 1646,
		1648, 1, 0, 0, 0, 1647, 1642, 1, 0, 0, 0, 1648, 1651, 1, 0, 0, 0, 1649,
		1647, 1, 0, 0, 0, 1649, 1650, 1, 0, 0, 0, 1650, 145, 1, 0, 0, 0, 1651,
		1649, 1, 0, 0, 0, 1652, 1653, 7, 23, 0, 0, 1653, 147, 1, 0, 0, 0, 1654,
		1655, 5, 192, 0, 0, 1655, 149, 1, 0, 0, 0, 1656, 1659, 3, 54, 27, 0, 1657,
		1659, 3, 28, 14, 0, 1658, 1656, 1, 0, 0, 0, 1658, 1657, 1, 0, 0, 0, 1659,
		151, 1, 0, 0, 0, 1660, 1661, 7, 24, 0, 0, 1661, 153, 1, 0, 0, 0, 1662,
		1663, 3, 202, 101, 0, 1663, 155, 1, 0, 0, 0, 1664, 1665, 3, 202, 101, 0,
		1665, 157, 1, 0, 0, 0, 1666, 1667, 3, 202, 101, 0, 1667, 159, 1, 0, 0,
		0, 1668, 1669, 3, 202, 101, 0, 1669, 161, 1, 0, 0, 0, 1670, 1671, 3, 202,
		101, 0, 1671, 163, 1, 0, 0, 0, 1672, 1673, 3, 202, 101, 0, 1673, 165, 1,
		0, 0, 0, 1674, 1675, 3, 202, 101, 0, 1675, 167, 1, 0, 0, 0, 1676, 1677,
		3, 202, 101, 0, 1677, 169, 1, 0, 0, 0, 1678, 1679, 3, 202, 101, 0, 1679,
		171, 1, 0, 0, 0, 1680, 1681, 3, 202, 101, 0, 1681, 173, 1, 0, 0, 0, 1682,
		1683, 3, 202, 101, 0, 1683, 175, 1, 0, 0, 0, 1684, 1685, 3, 202, 101, 0,
		1685, 177, 1, 0, 0, 0, 1686, 1687, 3, 202, 101, 0, 1687, 179, 1, 0, 0,
		0, 1688, 1689, 3, 202, 101, 0, 1689, 181, 1, 0, 0, 0, 1690, 1691, 3, 202,
		101, 0, 1691, 183, 1, 0, 0, 0, 1692, 1693, 3, 202, 101, 0, 1693, 185, 1,
		0, 0, 0, 1694, 1695, 3, 202, 101, 0, 1695, 187, 1, 0, 0, 0, 1696, 1697,
		3, 202, 101, 0, 1697, 189, 1, 0, 0, 0, 1698, 1699, 3, 202, 101, 0, 1699,
		191, 1, 0, 0, 0, 1700, 1701, 3, 202, 101, 0, 1701, 193, 1, 0, 0, 0, 1702,
		1703, 3, 202, 101, 0, 1703, 195, 1, 0, 0, 0, 1704, 1705, 3, 202, 101, 0,
		1705, 197, 1, 0, 0, 0, 1706, 1709, 5, 166, 0, 0, 1707, 1709, 3, 202, 101,
		0, 1708, 1706, 1, 0, 0, 0, 1708, 1707, 1, 0, 0, 0, 1709, 199, 1, 0, 0,
		0, 1710, 1711, 3, 202, 101, 0, 1711, 201, 1, 0, 0, 0, 1712, 1718, 5, 188,
		0, 0, 1713, 1714, 5, 3, 0, 0, 1714, 1715, 3, 202, 101, 0, 1715, 1716, 5,
		4, 0, 0, 1716, 1718, 1, 0, 0, 0, 1717, 1712, 1, 0, 0, 0, 1717, 1713, 1,
		0, 0, 0, 1718, 203, 1, 0, 0, 0, 248, 205, 212, 219, 224, 230, 236, 238,
		262, 269, 276, 282, 286, 291, 294, 301, 304, 308, 316, 320, 322, 326, 330,
		334, 337, 344, 350, 356, 361, 372, 377, 381, 385, 388, 392, 398, 403, 412,
		419, 425, 429, 433, 438, 444, 456, 460, 465, 468, 471, 474, 478, 481, 495,
		502, 509, 511, 514, 520, 525, 533, 538, 553, 559, 569, 574, 584, 588, 590,
		594, 599, 601, 609, 615, 620, 627, 638, 641, 643, 650, 654, 661, 667, 673,
		679, 684, 693, 698, 709, 714, 725, 730, 733, 739, 742, 745, 748, 752, 760,
		765, 776, 787, 792, 805, 809, 816, 823, 827, 831, 840, 844, 848, 860, 863,
		871, 880, 884, 889, 914, 920, 927, 931, 936, 948, 954, 958, 964, 970, 976,
		985, 988, 992, 999, 1004, 1006, 1015, 1027, 1038, 1042, 1049, 1055, 1060,
		1068, 1073, 1077, 1080, 1084, 1087, 1095, 1106, 1111, 1113, 1121, 1128,
		1135, 1139, 1141, 1147, 1156, 1161, 1168, 1172, 1174, 1177, 1183, 1187,
		1190, 1194, 1201, 1206, 1209, 1216, 1218, 1226, 1229, 1232, 1241, 1244,
		1246, 1252, 1256, 1261, 1264, 1267, 1271, 1275, 1279, 1290, 1295, 1300,
		1304, 1307, 1314, 1319, 1328, 1333, 1336, 1342, 1345, 1351, 1358, 1362,
		1365, 1370, 1376, 1383, 1390, 1395, 1398, 1401, 1404, 1407, 1415, 1423,
		1428, 1435, 1439, 1443, 1453, 1462, 1465, 1468, 1471, 1478, 1488, 1490,
		1499, 1503, 1510, 1520, 1525, 1529, 1532, 1548, 1556, 1567, 1572, 1575,
		1579, 1593, 1605, 1614, 1627, 1634, 1640, 1645, 1649, 1658, 1708, 1717,
	}
	deserializer := antlr.NewATNDeserializer(nil)
	staticData.atn = deserializer.Deserialize(staticData.serializedATN)
	atn := staticData.atn
	staticData.decisionToDFA = make([]*antlr.DFA, len(atn.DecisionToState))
	decisionToDFA := staticData.decisionToDFA
	for index, state := range atn.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(state, index)
	}
}

// SQLiteParserInit initializes any static state used to implement SQLiteParser. By default the
// static state used to implement the parser is lazily initialized during the first call to
// NewSQLiteParser(). You can call this function if you wish to initialize the static state ahead
// of time.
func SQLiteParserInit() {
	staticData := &SQLiteParserParserStaticData
	staticData.once.Do(sqliteparserParserInit)
}

// NewSQLiteParser produces a new parser instance for the optional input antlr.TokenStream.
func NewSQLiteParser(input antlr.TokenStream) *SQLiteParser {
	SQLiteParserInit()
	this := new(SQLiteParser)
	this.BaseParser = antlr.NewBaseParser(input)
	staticData := &SQLiteParserParserStaticData
	this.Interpreter = antlr.NewParserATNSimulator(this, staticData.atn, staticData.decisionToDFA, staticData.PredictionContextCache)
	this.RuleNames = staticData.RuleNames
	this.LiteralNames = staticData.LiteralNames
	this.SymbolicNames = staticData.SymbolicNames
	this.GrammarFileName = "SQLiteParser.g4"

	return this
}

// SQLiteParser tokens.
const (
	SQLiteParserEOF                     = antlr.TokenEOF
	SQLiteParserSCOL                    = 1
	SQLiteParserDOT                     = 2
	SQLiteParserOPEN_PAR                = 3
	SQLiteParserCLOSE_PAR               = 4
	SQLiteParserCOMMA                   = 5
	SQLiteParserEQ                      = 6
	SQLiteParserSTAR                    = 7
	SQLiteParserPLUS                    = 8
	SQLiteParserMINUS                   = 9
	SQLiteParserPTR                     = 10
	SQLiteParserPTR2                    = 11
	SQLiteParserTILDE                   = 12
	SQLiteParserPIPE2                   = 13
	SQLiteParserDIV                     = 14
	SQLiteParserMOD                     = 15
	SQLiteParserLT2                     = 16
	SQLiteParserGT2                     = 17
	SQLiteParserAMP                     = 18
	SQLiteParserPIPE                    = 19
	SQLiteParserLT                      = 20
	SQLiteParserLTE                     = 21
	SQLiteParserGT                      = 22
	SQLiteParserGTE                     = 23
	SQLiteParserEQ2                     = 24
	SQLiteParserNOT_EQ1                 = 25
	SQLiteParserNOT_EQ2                 = 26
	SQLiteParserABORT_                  = 27
	SQLiteParserACTION_                 = 28
	SQLiteParserADD_                    = 29
	SQLiteParserAFTER_                  = 30
	SQLiteParserALL_                    = 31
	SQLiteParserALTER_                  = 32
	SQLiteParserANALYZE_                = 33
	SQLiteParserAND_                    = 34
	SQLiteParserAS_                     = 35
	SQLiteParserASC_                    = 36
	SQLiteParserATTACH_                 = 37
	SQLiteParserAUTOINCREMENT_          = 38
	SQLiteParserBEFORE_                 = 39
	SQLiteParserBEGIN_                  = 40
	SQLiteParserBETWEEN_                = 41
	SQLiteParserBY_                     = 42
	SQLiteParserCASCADE_                = 43
	SQLiteParserCASE_                   = 44
	SQLiteParserCAST_                   = 45
	SQLiteParserCHECK_                  = 46
	SQLiteParserCOLLATE_                = 47
	SQLiteParserCOLUMN_                 = 48
	SQLiteParserCOMMIT_                 = 49
	SQLiteParserCONFLICT_               = 50
	SQLiteParserCONSTRAINT_             = 51
	SQLiteParserCREATE_                 = 52
	SQLiteParserCROSS_                  = 53
	SQLiteParserCURRENT_DATE_           = 54
	SQLiteParserCURRENT_TIME_           = 55
	SQLiteParserCURRENT_TIMESTAMP_      = 56
	SQLiteParserDATABASE_               = 57
	SQLiteParserDEFAULT_                = 58
	SQLiteParserDEFERRABLE_             = 59
	SQLiteParserDEFERRED_               = 60
	SQLiteParserDELETE_                 = 61
	SQLiteParserDESC_                   = 62
	SQLiteParserDETACH_                 = 63
	SQLiteParserDISTINCT_               = 64
	SQLiteParserDROP_                   = 65
	SQLiteParserEACH_                   = 66
	SQLiteParserELSE_                   = 67
	SQLiteParserEND_                    = 68
	SQLiteParserESCAPE_                 = 69
	SQLiteParserEXCEPT_                 = 70
	SQLiteParserEXCLUSIVE_              = 71
	SQLiteParserEXISTS_                 = 72
	SQLiteParserEXPLAIN_                = 73
	SQLiteParserFAIL_                   = 74
	SQLiteParserFOR_                    = 75
	SQLiteParserFOREIGN_                = 76
	SQLiteParserFROM_                   = 77
	SQLiteParserFULL_                   = 78
	SQLiteParserGLOB_                   = 79
	SQLiteParserGROUP_                  = 80
	SQLiteParserHAVING_                 = 81
	SQLiteParserIF_                     = 82
	SQLiteParserIGNORE_                 = 83
	SQLiteParserIMMEDIATE_              = 84
	SQLiteParserIN_                     = 85
	SQLiteParserINDEX_                  = 86
	SQLiteParserINDEXED_                = 87
	SQLiteParserINITIALLY_              = 88
	SQLiteParserINNER_                  = 89
	SQLiteParserINSERT_                 = 90
	SQLiteParserINSTEAD_                = 91
	SQLiteParserINTERSECT_              = 92
	SQLiteParserINTO_                   = 93
	SQLiteParserIS_                     = 94
	SQLiteParserISNULL_                 = 95
	SQLiteParserJOIN_                   = 96
	SQLiteParserKEY_                    = 97
	SQLiteParserLEFT_                   = 98
	SQLiteParserLIKE_                   = 99
	SQLiteParserLIMIT_                  = 100
	SQLiteParserMATCH_                  = 101
	SQLiteParserMATERIALIZED_           = 102
	SQLiteParserNATURAL_                = 103
	SQLiteParserNO_                     = 104
	SQLiteParserNOT_                    = 105
	SQLiteParserNOTNULL_                = 106
	SQLiteParserNULL_                   = 107
	SQLiteParserOF_                     = 108
	SQLiteParserOFFSET_                 = 109
	SQLiteParserON_                     = 110
	SQLiteParserOR_                     = 111
	SQLiteParserORDER_                  = 112
	SQLiteParserOUTER_                  = 113
	SQLiteParserPLAN_                   = 114
	SQLiteParserPRAGMA_                 = 115
	SQLiteParserPRIMARY_                = 116
	SQLiteParserQUERY_                  = 117
	SQLiteParserRAISE_                  = 118
	SQLiteParserRECURSIVE_              = 119
	SQLiteParserREFERENCES_             = 120
	SQLiteParserREGEXP_                 = 121
	SQLiteParserREINDEX_                = 122
	SQLiteParserRELEASE_                = 123
	SQLiteParserRENAME_                 = 124
	SQLiteParserREPLACE_                = 125
	SQLiteParserRESTRICT_               = 126
	SQLiteParserRETURNING_              = 127
	SQLiteParserRIGHT_                  = 128
	SQLiteParserROLLBACK_               = 129
	SQLiteParserROW_                    = 130
	SQLiteParserROWS_                   = 131
	SQLiteParserSAVEPOINT_              = 132
	SQLiteParserSELECT_                 = 133
	SQLiteParserSET_                    = 134
	SQLiteParserTABLE_                  = 135
	SQLiteParserTEMP_                   = 136
	SQLiteParserTEMPORARY_              = 137
	SQLiteParserTHEN_                   = 138
	SQLiteParserTO_                     = 139
	SQLiteParserTRANSACTION_            = 140
	SQLiteParserTRIGGER_                = 141
	SQLiteParserUNION_                  = 142
	SQLiteParserUNIQUE_                 = 143
	SQLiteParserUPDATE_                 = 144
	SQLiteParserUSING_                  = 145
	SQLiteParserVACUUM_                 = 146
	SQLiteParserVALUES_                 = 147
	SQLiteParserVIEW_                   = 148
	SQLiteParserVIRTUAL_                = 149
	SQLiteParserWHEN_                   = 150
	SQLiteParserWHERE_                  = 151
	SQLiteParserWITH_                   = 152
	SQLiteParserWITHOUT_                = 153
	SQLiteParserFIRST_VALUE_            = 154
	SQLiteParserOVER_                   = 155
	SQLiteParserPARTITION_              = 156
	SQLiteParserRANGE_                  = 157
	SQLiteParserPRECEDING_              = 158
	SQLiteParserUNBOUNDED_              = 159
	SQLiteParserCURRENT_                = 160
	SQLiteParserFOLLOWING_              = 161
	SQLiteParserCUME_DIST_              = 162
	SQLiteParserDENSE_RANK_             = 163
	SQLiteParserLAG_                    = 164
	SQLiteParserLAST_VALUE_             = 165
	SQLiteParserLEAD_                   = 166
	SQLiteParserNTH_VALUE_              = 167
	SQLiteParserNTILE_                  = 168
	SQLiteParserPERCENT_RANK_           = 169
	SQLiteParserRANK_                   = 170
	SQLiteParserROW_NUMBER_             = 171
	SQLiteParserGENERATED_              = 172
	SQLiteParserALWAYS_                 = 173
	SQLiteParserSTORED_                 = 174
	SQLiteParserTRUE_                   = 175
	SQLiteParserFALSE_                  = 176
	SQLiteParserWINDOW_                 = 177
	SQLiteParserNULLS_                  = 178
	SQLiteParserFIRST_                  = 179
	SQLiteParserLAST_                   = 180
	SQLiteParserFILTER_                 = 181
	SQLiteParserGROUPS_                 = 182
	SQLiteParserEXCLUDE_                = 183
	SQLiteParserTIES_                   = 184
	SQLiteParserOTHERS_                 = 185
	SQLiteParserDO_                     = 186
	SQLiteParserNOTHING_                = 187
	SQLiteParserIDENTIFIER              = 188
	SQLiteParserNUMERIC_LITERAL         = 189
	SQLiteParserNUMBERED_BIND_PARAMETER = 190
	SQLiteParserNAMED_BIND_PARAMETER    = 191
	SQLiteParserSTRING_LITERAL          = 192
	SQLiteParserBLOB_LITERAL            = 193
	SQLiteParserSINGLE_LINE_COMMENT     = 194
	SQLiteParserMULTILINE_COMMENT       = 195
	SQLiteParserSPACES                  = 196
	SQLiteParserUNEXPECTED_CHAR         = 197
)

// SQLiteParser rules.
const (
	SQLiteParserRULE_parse                     = 0
	SQLiteParserRULE_sql_stmt_list             = 1
	SQLiteParserRULE_sql_stmt                  = 2
	SQLiteParserRULE_alter_table_stmt          = 3
	SQLiteParserRULE_analyze_stmt              = 4
	SQLiteParserRULE_attach_stmt               = 5
	SQLiteParserRULE_begin_stmt                = 6
	SQLiteParserRULE_commit_stmt               = 7
	SQLiteParserRULE_rollback_stmt             = 8
	SQLiteParserRULE_savepoint_stmt            = 9
	SQLiteParserRULE_release_stmt              = 10
	SQLiteParserRULE_create_index_stmt         = 11
	SQLiteParserRULE_indexed_column            = 12
	SQLiteParserRULE_create_table_stmt         = 13
	SQLiteParserRULE_column_def                = 14
	SQLiteParserRULE_type_name                 = 15
	SQLiteParserRULE_column_constraint         = 16
	SQLiteParserRULE_signed_number             = 17
	SQLiteParserRULE_table_constraint          = 18
	SQLiteParserRULE_foreign_key_clause        = 19
	SQLiteParserRULE_conflict_clause           = 20
	SQLiteParserRULE_create_trigger_stmt       = 21
	SQLiteParserRULE_create_view_stmt          = 22
	SQLiteParserRULE_create_virtual_table_stmt = 23
	SQLiteParserRULE_delete_stmt               = 24
	SQLiteParserRULE_detach_stmt               = 25
	SQLiteParserRULE_drop_stmt                 = 26
	SQLiteParserRULE_expr                      = 27
	SQLiteParserRULE_raise_function            = 28
	SQLiteParserRULE_literal_value             = 29
	SQLiteParserRULE_value_row                 = 30
	SQLiteParserRULE_values_clause             = 31
	SQLiteParserRULE_insert_stmt               = 32
	SQLiteParserRULE_returning_clause          = 33
	SQLiteParserRULE_upsert_clause             = 34
	SQLiteParserRULE_pragma_stmt               = 35
	SQLiteParserRULE_pragma_value              = 36
	SQLiteParserRULE_reindex_stmt              = 37
	SQLiteParserRULE_select_stmt               = 38
	SQLiteParserRULE_select_core               = 39
	SQLiteParserRULE_result_column             = 40
	SQLiteParserRULE_from_item                 = 41
	SQLiteParserRULE_join_operator             = 42
	SQLiteParserRULE_join_constraint           = 43
	SQLiteParserRULE_table_or_subquery         = 44
	SQLiteParserRULE_compound_select           = 45
	SQLiteParserRULE_compound_operator         = 46
	SQLiteParserRULE_update_stmt               = 47
	SQLiteParserRULE_column_name_list          = 48
	SQLiteParserRULE_qualified_table_name      = 49
	SQLiteParserRULE_vacuum_stmt               = 50
	SQLiteParserRULE_filter_clause             = 51
	SQLiteParserRULE_window_defn               = 52
	SQLiteParserRULE_over_clause               = 53
	SQLiteParserRULE_frame_spec                = 54
	SQLiteParserRULE_frame_clause              = 55
	SQLiteParserRULE_with_clause               = 56
	SQLiteParserRULE_common_table_expression   = 57
	SQLiteParserRULE_where_stmt                = 58
	SQLiteParserRULE_order_by_stmt             = 59
	SQLiteParserRULE_group_by_stmt             = 60
	SQLiteParserRULE_window_stmt               = 61
	SQLiteParserRULE_limit_stmt                = 62
	SQLiteParserRULE_ordering_term             = 63
	SQLiteParserRULE_asc_desc                  = 64
	SQLiteParserRULE_frame_left                = 65
	SQLiteParserRULE_frame_right               = 66
	SQLiteParserRULE_frame_single              = 67
	SQLiteParserRULE_offset                    = 68
	SQLiteParserRULE_default_value             = 69
	SQLiteParserRULE_partition_by              = 70
	SQLiteParserRULE_order_by_expr             = 71
	SQLiteParserRULE_order_by_expr_asc_desc    = 72
	SQLiteParserRULE_unary_operator            = 73
	SQLiteParserRULE_error_message             = 74
	SQLiteParserRULE_module_argument           = 75
	SQLiteParserRULE_keyword                   = 76
	SQLiteParserRULE_name                      = 77
	SQLiteParserRULE_function_name             = 78
	SQLiteParserRULE_schema_name               = 79
	SQLiteParserRULE_table_name                = 80
	SQLiteParserRULE_table_or_index_name       = 81
	SQLiteParserRULE_column_name               = 82
	SQLiteParserRULE_collation_name            = 83
	SQLiteParserRULE_foreign_table             = 84
	SQLiteParserRULE_index_name                = 85
	SQLiteParserRULE_trigger_name              = 86
	SQLiteParserRULE_view_name                 = 87
	SQLiteParserRULE_module_name               = 88
	SQLiteParserRULE_pragma_name               = 89
	SQLiteParserRULE_savepoint_name            = 90
	SQLiteParserRULE_table_alias               = 91
	SQLiteParserRULE_transaction_name          = 92
	SQLiteParserRULE_window_name               = 93
	SQLiteParserRULE_alias                     = 94
	SQLiteParserRULE_filename                  = 95
	SQLiteParserRULE_base_window_name          = 96
	SQLiteParserRULE_simple_func               = 97
	SQLiteParserRULE_aggregate_func            = 98
	SQLiteParserRULE_window_func               = 99
	SQLiteParserRULE_table_function_name       = 100
	SQLiteParserRULE_identifier                = 101
)

// IParseContext is an interface to support dynamic dispatch.
type IParseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	EOF() antlr.TerminalNode
	Sql_stmt_list() ISql_stmt_listContext

	// IsParseContext differentiates from other interfaces.
	IsParseContext()
}

type ParseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParseContext() *ParseContext {
	var p = new(ParseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_parse
	return p
}

func InitEmptyParseContext(p *ParseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_parse
}

func (*ParseContext) IsParseContext() {}

func NewParseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ParseContext {
	var p = new(ParseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_parse

	return p
}

func (s *ParseContext) GetParser() antlr.Parser { return s.parser }

func (s *ParseContext) EOF() antlr.TerminalNode {
	return s.GetToken(SQLiteParserEOF, 0)
}

func (s *ParseContext) Sql_stmt_list() ISql_stmt_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISql_stmt_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISql_stmt_listContext)
}

func (s *ParseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ParseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterParse(s)
	}
}

func (s *ParseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitParse(s)
	}
}

func (s *ParseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitParse(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Parse() (localctx IParseContext) {
	localctx = NewParseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 0, SQLiteParserRULE_parse)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(205)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&-6912461228224806910) != 0) || ((int64((_la-65)) & ^0x3f) == 0 && ((int64(1)<<(_la-65))&1586392968774811913) != 0) || ((int64((_la-129)) & ^0x3f) == 0 && ((int64(1)<<(_la-129))&8814617) != 0) {
		{
			p.SetState(204)
			p.Sql_stmt_list()
		}

	}
	{
		p.SetState(207)
		p.Match(SQLiteParserEOF)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISql_stmt_listContext is an interface to support dynamic dispatch.
type ISql_stmt_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllSql_stmt() []ISql_stmtContext
	Sql_stmt(i int) ISql_stmtContext
	AllSCOL() []antlr.TerminalNode
	SCOL(i int) antlr.TerminalNode

	// IsSql_stmt_listContext differentiates from other interfaces.
	IsSql_stmt_listContext()
}

type Sql_stmt_listContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySql_stmt_listContext() *Sql_stmt_listContext {
	var p = new(Sql_stmt_listContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_sql_stmt_list
	return p
}

func InitEmptySql_stmt_listContext(p *Sql_stmt_listContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_sql_stmt_list
}

func (*Sql_stmt_listContext) IsSql_stmt_listContext() {}

func NewSql_stmt_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Sql_stmt_listContext {
	var p = new(Sql_stmt_listContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_sql_stmt_list

	return p
}

func (s *Sql_stmt_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Sql_stmt_listContext) AllSql_stmt() []ISql_stmtContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISql_stmtContext); ok {
			len++
		}
	}

	tst := make([]ISql_stmtContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISql_stmtContext); ok {
			tst[i] = t.(ISql_stmtContext)
			i++
		}
	}

	return tst
}

func (s *Sql_stmt_listContext) Sql_stmt(i int) ISql_stmtContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISql_stmtContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISql_stmtContext)
}

func (s *Sql_stmt_listContext) AllSCOL() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserSCOL)
}

func (s *Sql_stmt_listContext) SCOL(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserSCOL, i)
}

func (s *Sql_stmt_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Sql_stmt_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Sql_stmt_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterSql_stmt_list(s)
	}
}

func (s *Sql_stmt_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitSql_stmt_list(s)
	}
}

func (s *Sql_stmt_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitSql_stmt_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Sql_stmt_list() (localctx ISql_stmt_listContext) {
	localctx = NewSql_stmt_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 2, SQLiteParserRULE_sql_stmt_list)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(212)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == SQLiteParserSCOL {
		{
			p.SetState(209)
			p.Match(SQLiteParserSCOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(214)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(215)
		p.Sql_stmt()
	}
	p.SetState(224)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 3, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(217)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			for ok := true; ok; ok = _la == SQLiteParserSCOL {
				{
					p.SetState(216)
					p.Match(SQLiteParserSCOL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

				p.SetState(219)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(221)
				p.Sql_stmt()
			}

		}
		p.SetState(226)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 3, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(230)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == SQLiteParserSCOL {
		{
			p.SetState(227)
			p.Match(SQLiteParserSCOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(232)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISql_stmtContext is an interface to support dynamic dispatch.
type ISql_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Alter_table_stmt() IAlter_table_stmtContext
	Analyze_stmt() IAnalyze_stmtContext
	Attach_stmt() IAttach_stmtContext
	Begin_stmt() IBegin_stmtContext
	Commit_stmt() ICommit_stmtContext
	Create_index_stmt() ICreate_index_stmtContext
	Create_table_stmt() ICreate_table_stmtContext
	Create_trigger_stmt() ICreate_trigger_stmtContext
	Create_view_stmt() ICreate_view_stmtContext
	Create_virtual_table_stmt() ICreate_virtual_table_stmtContext
	Delete_stmt() IDelete_stmtContext
	Detach_stmt() IDetach_stmtContext
	Drop_stmt() IDrop_stmtContext
	Insert_stmt() IInsert_stmtContext
	Pragma_stmt() IPragma_stmtContext
	Reindex_stmt() IReindex_stmtContext
	Release_stmt() IRelease_stmtContext
	Rollback_stmt() IRollback_stmtContext
	Savepoint_stmt() ISavepoint_stmtContext
	Select_stmt() ISelect_stmtContext
	Update_stmt() IUpdate_stmtContext
	Vacuum_stmt() IVacuum_stmtContext
	EXPLAIN_() antlr.TerminalNode
	QUERY_() antlr.TerminalNode
	PLAN_() antlr.TerminalNode

	// IsSql_stmtContext differentiates from other interfaces.
	IsSql_stmtContext()
}

type Sql_stmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySql_stmtContext() *Sql_stmtContext {
	var p = new(Sql_stmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_sql_stmt
	return p
}

func InitEmptySql_stmtContext(p *Sql_stmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_sql_stmt
}

func (*Sql_stmtContext) IsSql_stmtContext() {}

func NewSql_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Sql_stmtContext {
	var p = new(Sql_stmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_sql_stmt

	return p
}

func (s *Sql_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Sql_stmtContext) Alter_table_stmt() IAlter_table_stmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAlter_table_stmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAlter_table_stmtContext)
}

func (s *Sql_stmtContext) Analyze_stmt() IAnalyze_stmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAnalyze_stmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAnalyze_stmtContext)
}

func (s *Sql_stmtContext) Attach_stmt() IAttach_stmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAttach_stmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAttach_stmtContext)
}

func (s *Sql_stmtContext) Begin_stmt() IBegin_stmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBegin_stmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBegin_stmtContext)
}

func (s *Sql_stmtContext) Commit_stmt() ICommit_stmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICommit_stmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICommit_stmtContext)
}

func (s *Sql_stmtContext) Create_index_stmt() ICreate_index_stmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICreate_index_stmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICreate_index_stmtContext)
}

func (s *Sql_stmtContext) Create_table_stmt() ICreate_table_stmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICreate_table_stmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICreate_table_stmtContext)
}

func (s *Sql_stmtContext) Create_trigger_stmt() ICreate_trigger_stmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICreate_trigger_stmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICreate_trigger_stmtContext)
}

func (s *Sql_stmtContext) Create_view_stmt() ICreate_view_stmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICreate_view_stmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICreate_view_stmtContext)
}

func (s *Sql_stmtContext) Create_virtual_table_stmt() ICreate_virtual_table_stmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICreate_virtual_table_stmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICreate_virtual_table_stmtContext)
}

func (s *Sql_stmtContext) Delete_stmt() IDelete_stmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDelete_stmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDelete_stmtContext)
}

func (s *Sql_stmtContext) Detach_stmt() IDetach_stmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDetach_stmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDetach_stmtContext)
}

func (s *Sql_stmtContext) Drop_stmt() IDrop_stmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDrop_stmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDrop_stmtContext)
}

func (s *Sql_stmtContext) Insert_stmt() IInsert_stmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInsert_stmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInsert_stmtContext)
}

func (s *Sql_stmtContext) Pragma_stmt() IPragma_stmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPragma_stmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPragma_stmtContext)
}

func (s *Sql_stmtContext) Reindex_stmt() IReindex_stmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IReindex_stmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IReindex_stmtContext)
}

func (s *Sql_stmtContext) Release_stmt() IRelease_stmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRelease_stmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRelease_stmtContext)
}

func (s *Sql_stmtContext) Rollback_stmt() IRollback_stmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRollback_stmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRollback_stmtContext)
}

func (s *Sql_stmtContext) Savepoint_stmt() ISavepoint_stmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISavepoint_stmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISavepoint_stmtContext)
}

func (s *Sql_stmtContext) Select_stmt() ISelect_stmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelect_stmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelect_stmtContext)
}

func (s *Sql_stmtContext) Update_stmt() IUpdate_stmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUpdate_stmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUpdate_stmtContext)
}

func (s *Sql_stmtContext) Vacuum_stmt() IVacuum_stmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVacuum_stmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVacuum_stmtContext)
}

func (s *Sql_stmtContext) EXPLAIN_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserEXPLAIN_, 0)
}

func (s *Sql_stmtContext) QUERY_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserQUERY_, 0)
}

func (s *Sql_stmtContext) PLAN_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserPLAN_, 0)
}

func (s *Sql_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Sql_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Sql_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterSql_stmt(s)
	}
}

func (s *Sql_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitSql_stmt(s)
	}
}

func (s *Sql_stmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitSql_stmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Sql_stmt() (localctx ISql_stmtContext) {
	localctx = NewSql_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 4, SQLiteParserRULE_sql_stmt)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(238)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserEXPLAIN_ {
		{
			p.SetState(233)
			p.Match(SQLiteParserEXPLAIN_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(236)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserQUERY_ {
			{
				p.SetState(234)
				p.Match(SQLiteParserQUERY_)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(235)
				p.Match(SQLiteParserPLAN_)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}

	}
	p.SetState(262)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 7, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(240)
			p.Alter_table_stmt()
		}

	case 2:
		{
			p.SetState(241)
			p.Analyze_stmt()
		}

	case 3:
		{
			p.SetState(242)
			p.Attach_stmt()
		}

	case 4:
		{
			p.SetState(243)
			p.Begin_stmt()
		}

	case 5:
		{
			p.SetState(244)
			p.Commit_stmt()
		}

	case 6:
		{
			p.SetState(245)
			p.Create_index_stmt()
		}

	case 7:
		{
			p.SetState(246)
			p.Create_table_stmt()
		}

	case 8:
		{
			p.SetState(247)
			p.Create_trigger_stmt()
		}

	case 9:
		{
			p.SetState(248)
			p.Create_view_stmt()
		}

	case 10:
		{
			p.SetState(249)
			p.Create_virtual_table_stmt()
		}

	case 11:
		{
			p.SetState(250)
			p.Delete_stmt()
		}

	case 12:
		{
			p.SetState(251)
			p.Detach_stmt()
		}

	case 13:
		{
			p.SetState(252)
			p.Drop_stmt()
		}

	case 14:
		{
			p.SetState(253)
			p.Insert_stmt()
		}

	case 15:
		{
			p.SetState(254)
			p.Pragma_stmt()
		}

	case 16:
		{
			p.SetState(255)
			p.Reindex_stmt()
		}

	case 17:
		{
			p.SetState(256)
			p.Release_stmt()
		}

	case 18:
		{
			p.SetState(257)
			p.Rollback_stmt()
		}

	case 19:
		{
			p.SetState(258)
			p.Savepoint_stmt()
		}

	case 20:
		{
			p.SetState(259)
			p.Select_stmt()
		}

	case 21:
		{
			p.SetState(260)
			p.Update_stmt()
		}

	case 22:
		{
			p.SetState(261)
			p.Vacuum_stmt()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAlter_table_stmtContext is an interface to support dynamic dispatch.
type IAlter_table_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetNew_table_name returns the new_table_name rule contexts.
	GetNew_table_name() ITable_nameContext

	// GetOld_column_name returns the old_column_name rule contexts.
	GetOld_column_name() IColumn_nameContext

	// GetNew_column_name returns the new_column_name rule contexts.
	GetNew_column_name() IColumn_nameContext

	// SetNew_table_name sets the new_table_name rule contexts.
	SetNew_table_name(ITable_nameContext)

	// SetOld_column_name sets the old_column_name rule contexts.
	SetOld_column_name(IColumn_nameContext)

	// SetNew_column_name sets the new_column_name rule contexts.
	SetNew_column_name(IColumn_nameContext)

	// Getter signatures
	ALTER_() antlr.TerminalNode
	TABLE_() antlr.TerminalNode
	AllTable_name() []ITable_nameContext
	Table_name(i int) ITable_nameContext
	RENAME_() antlr.TerminalNode
	ADD_() antlr.TerminalNode
	Column_def() IColumn_defContext
	DROP_() antlr.TerminalNode
	AllColumn_name() []IColumn_nameContext
	Column_name(i int) IColumn_nameContext
	Schema_name() ISchema_nameContext
	DOT() antlr.TerminalNode
	TO_() antlr.TerminalNode
	COLUMN_() antlr.TerminalNode

	// IsAlter_table_stmtContext differentiates from other interfaces.
	IsAlter_table_stmtContext()
}

type Alter_table_stmtContext struct {
	antlr.BaseParserRuleContext
	parser          antlr.Parser
	new_table_name  ITable_nameContext
	old_column_name IColumn_nameContext
	new_column_name IColumn_nameContext
}

func NewEmptyAlter_table_stmtContext() *Alter_table_stmtContext {
	var p = new(Alter_table_stmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_alter_table_stmt
	return p
}

func InitEmptyAlter_table_stmtContext(p *Alter_table_stmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_alter_table_stmt
}

func (*Alter_table_stmtContext) IsAlter_table_stmtContext() {}

func NewAlter_table_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_table_stmtContext {
	var p = new(Alter_table_stmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_alter_table_stmt

	return p
}

func (s *Alter_table_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_table_stmtContext) GetNew_table_name() ITable_nameContext { return s.new_table_name }

func (s *Alter_table_stmtContext) GetOld_column_name() IColumn_nameContext { return s.old_column_name }

func (s *Alter_table_stmtContext) GetNew_column_name() IColumn_nameContext { return s.new_column_name }

func (s *Alter_table_stmtContext) SetNew_table_name(v ITable_nameContext) { s.new_table_name = v }

func (s *Alter_table_stmtContext) SetOld_column_name(v IColumn_nameContext) { s.old_column_name = v }

func (s *Alter_table_stmtContext) SetNew_column_name(v IColumn_nameContext) { s.new_column_name = v }

func (s *Alter_table_stmtContext) ALTER_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserALTER_, 0)
}

func (s *Alter_table_stmtContext) TABLE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserTABLE_, 0)
}

func (s *Alter_table_stmtContext) AllTable_name() []ITable_nameContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITable_nameContext); ok {
			len++
		}
	}

	tst := make([]ITable_nameContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITable_nameContext); ok {
			tst[i] = t.(ITable_nameContext)
			i++
		}
	}

	return tst
}

func (s *Alter_table_stmtContext) Table_name(i int) ITable_nameContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_nameContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Alter_table_stmtContext) RENAME_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserRENAME_, 0)
}

func (s *Alter_table_stmtContext) ADD_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserADD_, 0)
}

func (s *Alter_table_stmtContext) Column_def() IColumn_defContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_defContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_defContext)
}

func (s *Alter_table_stmtContext) DROP_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDROP_, 0)
}

func (s *Alter_table_stmtContext) AllColumn_name() []IColumn_nameContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumn_nameContext); ok {
			len++
		}
	}

	tst := make([]IColumn_nameContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumn_nameContext); ok {
			tst[i] = t.(IColumn_nameContext)
			i++
		}
	}

	return tst
}

func (s *Alter_table_stmtContext) Column_name(i int) IColumn_nameContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_nameContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *Alter_table_stmtContext) Schema_name() ISchema_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISchema_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISchema_nameContext)
}

func (s *Alter_table_stmtContext) DOT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDOT, 0)
}

func (s *Alter_table_stmtContext) TO_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserTO_, 0)
}

func (s *Alter_table_stmtContext) COLUMN_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOLUMN_, 0)
}

func (s *Alter_table_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_table_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_table_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterAlter_table_stmt(s)
	}
}

func (s *Alter_table_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitAlter_table_stmt(s)
	}
}

func (s *Alter_table_stmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitAlter_table_stmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Alter_table_stmt() (localctx IAlter_table_stmtContext) {
	localctx = NewAlter_table_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 6, SQLiteParserRULE_alter_table_stmt)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(264)
		p.Match(SQLiteParserALTER_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(265)
		p.Match(SQLiteParserTABLE_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(269)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 8, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(266)
			p.Schema_name()
		}
		{
			p.SetState(267)
			p.Match(SQLiteParserDOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	{
		p.SetState(271)
		p.Table_name()
	}
	p.SetState(294)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case SQLiteParserRENAME_:
		{
			p.SetState(272)
			p.Match(SQLiteParserRENAME_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(282)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetTokenStream().LA(1) {
		case SQLiteParserTO_:
			{
				p.SetState(273)
				p.Match(SQLiteParserTO_)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(274)

				var _x = p.Table_name()

				localctx.(*Alter_table_stmtContext).new_table_name = _x
			}

		case SQLiteParserOPEN_PAR, SQLiteParserCOLUMN_, SQLiteParserIDENTIFIER:
			p.SetState(276)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			if _la == SQLiteParserCOLUMN_ {
				{
					p.SetState(275)
					p.Match(SQLiteParserCOLUMN_)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			{
				p.SetState(278)

				var _x = p.Column_name()

				localctx.(*Alter_table_stmtContext).old_column_name = _x
			}
			{
				p.SetState(279)
				p.Match(SQLiteParserTO_)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(280)

				var _x = p.Column_name()

				localctx.(*Alter_table_stmtContext).new_column_name = _x
			}

		default:
			p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			goto errorExit
		}

	case SQLiteParserADD_:
		{
			p.SetState(284)
			p.Match(SQLiteParserADD_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(286)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserCOLUMN_ {
			{
				p.SetState(285)
				p.Match(SQLiteParserCOLUMN_)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(288)
			p.Column_def()
		}

	case SQLiteParserDROP_:
		{
			p.SetState(289)
			p.Match(SQLiteParserDROP_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(291)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserCOLUMN_ {
			{
				p.SetState(290)
				p.Match(SQLiteParserCOLUMN_)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(293)
			p.Column_name()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAnalyze_stmtContext is an interface to support dynamic dispatch.
type IAnalyze_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ANALYZE_() antlr.TerminalNode
	Schema_name() ISchema_nameContext
	Table_or_index_name() ITable_or_index_nameContext
	DOT() antlr.TerminalNode

	// IsAnalyze_stmtContext differentiates from other interfaces.
	IsAnalyze_stmtContext()
}

type Analyze_stmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAnalyze_stmtContext() *Analyze_stmtContext {
	var p = new(Analyze_stmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_analyze_stmt
	return p
}

func InitEmptyAnalyze_stmtContext(p *Analyze_stmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_analyze_stmt
}

func (*Analyze_stmtContext) IsAnalyze_stmtContext() {}

func NewAnalyze_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Analyze_stmtContext {
	var p = new(Analyze_stmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_analyze_stmt

	return p
}

func (s *Analyze_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Analyze_stmtContext) ANALYZE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserANALYZE_, 0)
}

func (s *Analyze_stmtContext) Schema_name() ISchema_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISchema_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISchema_nameContext)
}

func (s *Analyze_stmtContext) Table_or_index_name() ITable_or_index_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_or_index_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_or_index_nameContext)
}

func (s *Analyze_stmtContext) DOT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDOT, 0)
}

func (s *Analyze_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Analyze_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Analyze_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterAnalyze_stmt(s)
	}
}

func (s *Analyze_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitAnalyze_stmt(s)
	}
}

func (s *Analyze_stmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitAnalyze_stmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Analyze_stmt() (localctx IAnalyze_stmtContext) {
	localctx = NewAnalyze_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 8, SQLiteParserRULE_analyze_stmt)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(296)
		p.Match(SQLiteParserANALYZE_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(304)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 15, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(297)
			p.Schema_name()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	} else if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 15, p.GetParserRuleContext()) == 2 {
		p.SetState(301)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 14, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(298)
				p.Schema_name()
			}
			{
				p.SetState(299)
				p.Match(SQLiteParserDOT)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		{
			p.SetState(303)
			p.Table_or_index_name()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAttach_stmtContext is an interface to support dynamic dispatch.
type IAttach_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ATTACH_() antlr.TerminalNode
	Expr() IExprContext
	AS_() antlr.TerminalNode
	Schema_name() ISchema_nameContext
	DATABASE_() antlr.TerminalNode

	// IsAttach_stmtContext differentiates from other interfaces.
	IsAttach_stmtContext()
}

type Attach_stmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAttach_stmtContext() *Attach_stmtContext {
	var p = new(Attach_stmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_attach_stmt
	return p
}

func InitEmptyAttach_stmtContext(p *Attach_stmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_attach_stmt
}

func (*Attach_stmtContext) IsAttach_stmtContext() {}

func NewAttach_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Attach_stmtContext {
	var p = new(Attach_stmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_attach_stmt

	return p
}

func (s *Attach_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Attach_stmtContext) ATTACH_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserATTACH_, 0)
}

func (s *Attach_stmtContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Attach_stmtContext) AS_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserAS_, 0)
}

func (s *Attach_stmtContext) Schema_name() ISchema_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISchema_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISchema_nameContext)
}

func (s *Attach_stmtContext) DATABASE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDATABASE_, 0)
}

func (s *Attach_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Attach_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Attach_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterAttach_stmt(s)
	}
}

func (s *Attach_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitAttach_stmt(s)
	}
}

func (s *Attach_stmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitAttach_stmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Attach_stmt() (localctx IAttach_stmtContext) {
	localctx = NewAttach_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 10, SQLiteParserRULE_attach_stmt)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(306)
		p.Match(SQLiteParserATTACH_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(308)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserDATABASE_ {
		{
			p.SetState(307)
			p.Match(SQLiteParserDATABASE_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(310)
		p.expr(0)
	}
	{
		p.SetState(311)
		p.Match(SQLiteParserAS_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(312)
		p.Schema_name()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBegin_stmtContext is an interface to support dynamic dispatch.
type IBegin_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	BEGIN_() antlr.TerminalNode
	TRANSACTION_() antlr.TerminalNode
	DEFERRED_() antlr.TerminalNode
	IMMEDIATE_() antlr.TerminalNode
	EXCLUSIVE_() antlr.TerminalNode
	Transaction_name() ITransaction_nameContext

	// IsBegin_stmtContext differentiates from other interfaces.
	IsBegin_stmtContext()
}

type Begin_stmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBegin_stmtContext() *Begin_stmtContext {
	var p = new(Begin_stmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_begin_stmt
	return p
}

func InitEmptyBegin_stmtContext(p *Begin_stmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_begin_stmt
}

func (*Begin_stmtContext) IsBegin_stmtContext() {}

func NewBegin_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Begin_stmtContext {
	var p = new(Begin_stmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_begin_stmt

	return p
}

func (s *Begin_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Begin_stmtContext) BEGIN_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserBEGIN_, 0)
}

func (s *Begin_stmtContext) TRANSACTION_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserTRANSACTION_, 0)
}

func (s *Begin_stmtContext) DEFERRED_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDEFERRED_, 0)
}

func (s *Begin_stmtContext) IMMEDIATE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserIMMEDIATE_, 0)
}

func (s *Begin_stmtContext) EXCLUSIVE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserEXCLUSIVE_, 0)
}

func (s *Begin_stmtContext) Transaction_name() ITransaction_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITransaction_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITransaction_nameContext)
}

func (s *Begin_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Begin_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Begin_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterBegin_stmt(s)
	}
}

func (s *Begin_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitBegin_stmt(s)
	}
}

func (s *Begin_stmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitBegin_stmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Begin_stmt() (localctx IBegin_stmtContext) {
	localctx = NewBegin_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 12, SQLiteParserRULE_begin_stmt)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(314)
		p.Match(SQLiteParserBEGIN_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(316)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if (int64((_la-60)) & ^0x3f) == 0 && ((int64(1)<<(_la-60))&16779265) != 0 {
		{
			p.SetState(315)
			_la = p.GetTokenStream().LA(1)

			if !((int64((_la-60)) & ^0x3f) == 0 && ((int64(1)<<(_la-60))&16779265) != 0) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	p.SetState(322)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserTRANSACTION_ {
		{
			p.SetState(318)
			p.Match(SQLiteParserTRANSACTION_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(320)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserOPEN_PAR || _la == SQLiteParserIDENTIFIER {
			{
				p.SetState(319)
				p.Transaction_name()
			}

		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICommit_stmtContext is an interface to support dynamic dispatch.
type ICommit_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	COMMIT_() antlr.TerminalNode
	END_() antlr.TerminalNode
	TRANSACTION_() antlr.TerminalNode

	// IsCommit_stmtContext differentiates from other interfaces.
	IsCommit_stmtContext()
}

type Commit_stmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCommit_stmtContext() *Commit_stmtContext {
	var p = new(Commit_stmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_commit_stmt
	return p
}

func InitEmptyCommit_stmtContext(p *Commit_stmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_commit_stmt
}

func (*Commit_stmtContext) IsCommit_stmtContext() {}

func NewCommit_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Commit_stmtContext {
	var p = new(Commit_stmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_commit_stmt

	return p
}

func (s *Commit_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Commit_stmtContext) COMMIT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMIT_, 0)
}

func (s *Commit_stmtContext) END_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserEND_, 0)
}

func (s *Commit_stmtContext) TRANSACTION_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserTRANSACTION_, 0)
}

func (s *Commit_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Commit_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Commit_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterCommit_stmt(s)
	}
}

func (s *Commit_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitCommit_stmt(s)
	}
}

func (s *Commit_stmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitCommit_stmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Commit_stmt() (localctx ICommit_stmtContext) {
	localctx = NewCommit_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 14, SQLiteParserRULE_commit_stmt)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(324)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SQLiteParserCOMMIT_ || _la == SQLiteParserEND_) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(326)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserTRANSACTION_ {
		{
			p.SetState(325)
			p.Match(SQLiteParserTRANSACTION_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IRollback_stmtContext is an interface to support dynamic dispatch.
type IRollback_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ROLLBACK_() antlr.TerminalNode
	TRANSACTION_() antlr.TerminalNode
	TO_() antlr.TerminalNode
	Savepoint_name() ISavepoint_nameContext
	SAVEPOINT_() antlr.TerminalNode

	// IsRollback_stmtContext differentiates from other interfaces.
	IsRollback_stmtContext()
}

type Rollback_stmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRollback_stmtContext() *Rollback_stmtContext {
	var p = new(Rollback_stmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_rollback_stmt
	return p
}

func InitEmptyRollback_stmtContext(p *Rollback_stmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_rollback_stmt
}

func (*Rollback_stmtContext) IsRollback_stmtContext() {}

func NewRollback_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Rollback_stmtContext {
	var p = new(Rollback_stmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_rollback_stmt

	return p
}

func (s *Rollback_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Rollback_stmtContext) ROLLBACK_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserROLLBACK_, 0)
}

func (s *Rollback_stmtContext) TRANSACTION_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserTRANSACTION_, 0)
}

func (s *Rollback_stmtContext) TO_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserTO_, 0)
}

func (s *Rollback_stmtContext) Savepoint_name() ISavepoint_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISavepoint_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISavepoint_nameContext)
}

func (s *Rollback_stmtContext) SAVEPOINT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserSAVEPOINT_, 0)
}

func (s *Rollback_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Rollback_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Rollback_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterRollback_stmt(s)
	}
}

func (s *Rollback_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitRollback_stmt(s)
	}
}

func (s *Rollback_stmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitRollback_stmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Rollback_stmt() (localctx IRollback_stmtContext) {
	localctx = NewRollback_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 16, SQLiteParserRULE_rollback_stmt)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(328)
		p.Match(SQLiteParserROLLBACK_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(330)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserTRANSACTION_ {
		{
			p.SetState(329)
			p.Match(SQLiteParserTRANSACTION_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(337)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserTO_ {
		{
			p.SetState(332)
			p.Match(SQLiteParserTO_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(334)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserSAVEPOINT_ {
			{
				p.SetState(333)
				p.Match(SQLiteParserSAVEPOINT_)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(336)
			p.Savepoint_name()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISavepoint_stmtContext is an interface to support dynamic dispatch.
type ISavepoint_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	SAVEPOINT_() antlr.TerminalNode
	Savepoint_name() ISavepoint_nameContext

	// IsSavepoint_stmtContext differentiates from other interfaces.
	IsSavepoint_stmtContext()
}

type Savepoint_stmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySavepoint_stmtContext() *Savepoint_stmtContext {
	var p = new(Savepoint_stmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_savepoint_stmt
	return p
}

func InitEmptySavepoint_stmtContext(p *Savepoint_stmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_savepoint_stmt
}

func (*Savepoint_stmtContext) IsSavepoint_stmtContext() {}

func NewSavepoint_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Savepoint_stmtContext {
	var p = new(Savepoint_stmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_savepoint_stmt

	return p
}

func (s *Savepoint_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Savepoint_stmtContext) SAVEPOINT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserSAVEPOINT_, 0)
}

func (s *Savepoint_stmtContext) Savepoint_name() ISavepoint_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISavepoint_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISavepoint_nameContext)
}

func (s *Savepoint_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Savepoint_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Savepoint_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterSavepoint_stmt(s)
	}
}

func (s *Savepoint_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitSavepoint_stmt(s)
	}
}

func (s *Savepoint_stmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitSavepoint_stmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Savepoint_stmt() (localctx ISavepoint_stmtContext) {
	localctx = NewSavepoint_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 18, SQLiteParserRULE_savepoint_stmt)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(339)
		p.Match(SQLiteParserSAVEPOINT_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(340)
		p.Savepoint_name()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IRelease_stmtContext is an interface to support dynamic dispatch.
type IRelease_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	RELEASE_() antlr.TerminalNode
	Savepoint_name() ISavepoint_nameContext
	SAVEPOINT_() antlr.TerminalNode

	// IsRelease_stmtContext differentiates from other interfaces.
	IsRelease_stmtContext()
}

type Release_stmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRelease_stmtContext() *Release_stmtContext {
	var p = new(Release_stmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_release_stmt
	return p
}

func InitEmptyRelease_stmtContext(p *Release_stmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_release_stmt
}

func (*Release_stmtContext) IsRelease_stmtContext() {}

func NewRelease_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Release_stmtContext {
	var p = new(Release_stmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_release_stmt

	return p
}

func (s *Release_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Release_stmtContext) RELEASE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserRELEASE_, 0)
}

func (s *Release_stmtContext) Savepoint_name() ISavepoint_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISavepoint_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISavepoint_nameContext)
}

func (s *Release_stmtContext) SAVEPOINT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserSAVEPOINT_, 0)
}

func (s *Release_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Release_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Release_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterRelease_stmt(s)
	}
}

func (s *Release_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitRelease_stmt(s)
	}
}

func (s *Release_stmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitRelease_stmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Release_stmt() (localctx IRelease_stmtContext) {
	localctx = NewRelease_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 20, SQLiteParserRULE_release_stmt)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(342)
		p.Match(SQLiteParserRELEASE_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(344)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserSAVEPOINT_ {
		{
			p.SetState(343)
			p.Match(SQLiteParserSAVEPOINT_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(346)
		p.Savepoint_name()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICreate_index_stmtContext is an interface to support dynamic dispatch.
type ICreate_index_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CREATE_() antlr.TerminalNode
	INDEX_() antlr.TerminalNode
	Index_name() IIndex_nameContext
	ON_() antlr.TerminalNode
	Table_name() ITable_nameContext
	OPEN_PAR() antlr.TerminalNode
	AllIndexed_column() []IIndexed_columnContext
	Indexed_column(i int) IIndexed_columnContext
	CLOSE_PAR() antlr.TerminalNode
	UNIQUE_() antlr.TerminalNode
	IF_() antlr.TerminalNode
	NOT_() antlr.TerminalNode
	EXISTS_() antlr.TerminalNode
	Schema_name() ISchema_nameContext
	DOT() antlr.TerminalNode
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode
	Where_stmt() IWhere_stmtContext

	// IsCreate_index_stmtContext differentiates from other interfaces.
	IsCreate_index_stmtContext()
}

type Create_index_stmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_index_stmtContext() *Create_index_stmtContext {
	var p = new(Create_index_stmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_create_index_stmt
	return p
}

func InitEmptyCreate_index_stmtContext(p *Create_index_stmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_create_index_stmt
}

func (*Create_index_stmtContext) IsCreate_index_stmtContext() {}

func NewCreate_index_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_index_stmtContext {
	var p = new(Create_index_stmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_create_index_stmt

	return p
}

func (s *Create_index_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_index_stmtContext) CREATE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCREATE_, 0)
}

func (s *Create_index_stmtContext) INDEX_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserINDEX_, 0)
}

func (s *Create_index_stmtContext) Index_name() IIndex_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIndex_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIndex_nameContext)
}

func (s *Create_index_stmtContext) ON_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserON_, 0)
}

func (s *Create_index_stmtContext) Table_name() ITable_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Create_index_stmtContext) OPEN_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserOPEN_PAR, 0)
}

func (s *Create_index_stmtContext) AllIndexed_column() []IIndexed_columnContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIndexed_columnContext); ok {
			len++
		}
	}

	tst := make([]IIndexed_columnContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIndexed_columnContext); ok {
			tst[i] = t.(IIndexed_columnContext)
			i++
		}
	}

	return tst
}

func (s *Create_index_stmtContext) Indexed_column(i int) IIndexed_columnContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIndexed_columnContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIndexed_columnContext)
}

func (s *Create_index_stmtContext) CLOSE_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCLOSE_PAR, 0)
}

func (s *Create_index_stmtContext) UNIQUE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserUNIQUE_, 0)
}

func (s *Create_index_stmtContext) IF_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserIF_, 0)
}

func (s *Create_index_stmtContext) NOT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserNOT_, 0)
}

func (s *Create_index_stmtContext) EXISTS_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserEXISTS_, 0)
}

func (s *Create_index_stmtContext) Schema_name() ISchema_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISchema_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISchema_nameContext)
}

func (s *Create_index_stmtContext) DOT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDOT, 0)
}

func (s *Create_index_stmtContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserCOMMA)
}

func (s *Create_index_stmtContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, i)
}

func (s *Create_index_stmtContext) Where_stmt() IWhere_stmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWhere_stmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWhere_stmtContext)
}

func (s *Create_index_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_index_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_index_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterCreate_index_stmt(s)
	}
}

func (s *Create_index_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitCreate_index_stmt(s)
	}
}

func (s *Create_index_stmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitCreate_index_stmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Create_index_stmt() (localctx ICreate_index_stmtContext) {
	localctx = NewCreate_index_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 22, SQLiteParserRULE_create_index_stmt)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(348)
		p.Match(SQLiteParserCREATE_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(350)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserUNIQUE_ {
		{
			p.SetState(349)
			p.Match(SQLiteParserUNIQUE_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(352)
		p.Match(SQLiteParserINDEX_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(356)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserIF_ {
		{
			p.SetState(353)
			p.Match(SQLiteParserIF_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(354)
			p.Match(SQLiteParserNOT_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(355)
			p.Match(SQLiteParserEXISTS_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(361)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 27, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(358)
			p.Schema_name()
		}
		{
			p.SetState(359)
			p.Match(SQLiteParserDOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	{
		p.SetState(363)
		p.Index_name()
	}
	{
		p.SetState(364)
		p.Match(SQLiteParserON_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(365)
		p.Table_name()
	}
	{
		p.SetState(366)
		p.Match(SQLiteParserOPEN_PAR)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(367)
		p.Indexed_column()
	}
	p.SetState(372)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == SQLiteParserCOMMA {
		{
			p.SetState(368)
			p.Match(SQLiteParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(369)
			p.Indexed_column()
		}

		p.SetState(374)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(375)
		p.Match(SQLiteParserCLOSE_PAR)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(377)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserWHERE_ {
		{
			p.SetState(376)
			p.Where_stmt()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IIndexed_columnContext is an interface to support dynamic dispatch.
type IIndexed_columnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Column_name() IColumn_nameContext
	Expr() IExprContext
	COLLATE_() antlr.TerminalNode
	Collation_name() ICollation_nameContext
	Asc_desc() IAsc_descContext

	// IsIndexed_columnContext differentiates from other interfaces.
	IsIndexed_columnContext()
}

type Indexed_columnContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIndexed_columnContext() *Indexed_columnContext {
	var p = new(Indexed_columnContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_indexed_column
	return p
}

func InitEmptyIndexed_columnContext(p *Indexed_columnContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_indexed_column
}

func (*Indexed_columnContext) IsIndexed_columnContext() {}

func NewIndexed_columnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Indexed_columnContext {
	var p = new(Indexed_columnContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_indexed_column

	return p
}

func (s *Indexed_columnContext) GetParser() antlr.Parser { return s.parser }

func (s *Indexed_columnContext) Column_name() IColumn_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *Indexed_columnContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Indexed_columnContext) COLLATE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOLLATE_, 0)
}

func (s *Indexed_columnContext) Collation_name() ICollation_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICollation_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICollation_nameContext)
}

func (s *Indexed_columnContext) Asc_desc() IAsc_descContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAsc_descContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAsc_descContext)
}

func (s *Indexed_columnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Indexed_columnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Indexed_columnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterIndexed_column(s)
	}
}

func (s *Indexed_columnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitIndexed_column(s)
	}
}

func (s *Indexed_columnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitIndexed_column(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Indexed_column() (localctx IIndexed_columnContext) {
	localctx = NewIndexed_columnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 24, SQLiteParserRULE_indexed_column)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(381)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 30, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(379)
			p.Column_name()
		}

	case 2:
		{
			p.SetState(380)
			p.expr(0)
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}
	p.SetState(385)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserCOLLATE_ {
		{
			p.SetState(383)
			p.Match(SQLiteParserCOLLATE_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(384)
			p.Collation_name()
		}

	}
	p.SetState(388)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserASC_ || _la == SQLiteParserDESC_ {
		{
			p.SetState(387)
			p.Asc_desc()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICreate_table_stmtContext is an interface to support dynamic dispatch.
type ICreate_table_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetRow_ROW_ID returns the row_ROW_ID token.
	GetRow_ROW_ID() antlr.Token

	// SetRow_ROW_ID sets the row_ROW_ID token.
	SetRow_ROW_ID(antlr.Token)

	// Getter signatures
	CREATE_() antlr.TerminalNode
	TABLE_() antlr.TerminalNode
	Table_name() ITable_nameContext
	OPEN_PAR() antlr.TerminalNode
	AllColumn_def() []IColumn_defContext
	Column_def(i int) IColumn_defContext
	CLOSE_PAR() antlr.TerminalNode
	AS_() antlr.TerminalNode
	Select_stmt() ISelect_stmtContext
	IF_() antlr.TerminalNode
	NOT_() antlr.TerminalNode
	EXISTS_() antlr.TerminalNode
	Schema_name() ISchema_nameContext
	DOT() antlr.TerminalNode
	TEMP_() antlr.TerminalNode
	TEMPORARY_() antlr.TerminalNode
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode
	AllTable_constraint() []ITable_constraintContext
	Table_constraint(i int) ITable_constraintContext
	WITHOUT_() antlr.TerminalNode
	IDENTIFIER() antlr.TerminalNode

	// IsCreate_table_stmtContext differentiates from other interfaces.
	IsCreate_table_stmtContext()
}

type Create_table_stmtContext struct {
	antlr.BaseParserRuleContext
	parser     antlr.Parser
	row_ROW_ID antlr.Token
}

func NewEmptyCreate_table_stmtContext() *Create_table_stmtContext {
	var p = new(Create_table_stmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_create_table_stmt
	return p
}

func InitEmptyCreate_table_stmtContext(p *Create_table_stmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_create_table_stmt
}

func (*Create_table_stmtContext) IsCreate_table_stmtContext() {}

func NewCreate_table_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_table_stmtContext {
	var p = new(Create_table_stmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_create_table_stmt

	return p
}

func (s *Create_table_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_table_stmtContext) GetRow_ROW_ID() antlr.Token { return s.row_ROW_ID }

func (s *Create_table_stmtContext) SetRow_ROW_ID(v antlr.Token) { s.row_ROW_ID = v }

func (s *Create_table_stmtContext) CREATE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCREATE_, 0)
}

func (s *Create_table_stmtContext) TABLE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserTABLE_, 0)
}

func (s *Create_table_stmtContext) Table_name() ITable_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Create_table_stmtContext) OPEN_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserOPEN_PAR, 0)
}

func (s *Create_table_stmtContext) AllColumn_def() []IColumn_defContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumn_defContext); ok {
			len++
		}
	}

	tst := make([]IColumn_defContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumn_defContext); ok {
			tst[i] = t.(IColumn_defContext)
			i++
		}
	}

	return tst
}

func (s *Create_table_stmtContext) Column_def(i int) IColumn_defContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_defContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_defContext)
}

func (s *Create_table_stmtContext) CLOSE_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCLOSE_PAR, 0)
}

func (s *Create_table_stmtContext) AS_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserAS_, 0)
}

func (s *Create_table_stmtContext) Select_stmt() ISelect_stmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelect_stmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelect_stmtContext)
}

func (s *Create_table_stmtContext) IF_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserIF_, 0)
}

func (s *Create_table_stmtContext) NOT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserNOT_, 0)
}

func (s *Create_table_stmtContext) EXISTS_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserEXISTS_, 0)
}

func (s *Create_table_stmtContext) Schema_name() ISchema_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISchema_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISchema_nameContext)
}

func (s *Create_table_stmtContext) DOT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDOT, 0)
}

func (s *Create_table_stmtContext) TEMP_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserTEMP_, 0)
}

func (s *Create_table_stmtContext) TEMPORARY_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserTEMPORARY_, 0)
}

func (s *Create_table_stmtContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserCOMMA)
}

func (s *Create_table_stmtContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, i)
}

func (s *Create_table_stmtContext) AllTable_constraint() []ITable_constraintContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITable_constraintContext); ok {
			len++
		}
	}

	tst := make([]ITable_constraintContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITable_constraintContext); ok {
			tst[i] = t.(ITable_constraintContext)
			i++
		}
	}

	return tst
}

func (s *Create_table_stmtContext) Table_constraint(i int) ITable_constraintContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_constraintContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_constraintContext)
}

func (s *Create_table_stmtContext) WITHOUT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserWITHOUT_, 0)
}

func (s *Create_table_stmtContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(SQLiteParserIDENTIFIER, 0)
}

func (s *Create_table_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_table_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_table_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterCreate_table_stmt(s)
	}
}

func (s *Create_table_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitCreate_table_stmt(s)
	}
}

func (s *Create_table_stmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitCreate_table_stmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Create_table_stmt() (localctx ICreate_table_stmtContext) {
	localctx = NewCreate_table_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 26, SQLiteParserRULE_create_table_stmt)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(390)
		p.Match(SQLiteParserCREATE_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(392)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserTEMP_ || _la == SQLiteParserTEMPORARY_ {
		{
			p.SetState(391)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLiteParserTEMP_ || _la == SQLiteParserTEMPORARY_) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	{
		p.SetState(394)
		p.Match(SQLiteParserTABLE_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(398)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserIF_ {
		{
			p.SetState(395)
			p.Match(SQLiteParserIF_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(396)
			p.Match(SQLiteParserNOT_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(397)
			p.Match(SQLiteParserEXISTS_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(403)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 35, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(400)
			p.Schema_name()
		}
		{
			p.SetState(401)
			p.Match(SQLiteParserDOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	{
		p.SetState(405)
		p.Table_name()
	}
	p.SetState(429)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case SQLiteParserOPEN_PAR:
		{
			p.SetState(406)
			p.Match(SQLiteParserOPEN_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(407)
			p.Column_def()
		}
		p.SetState(412)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 36, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 1 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1+1 {
				{
					p.SetState(408)
					p.Match(SQLiteParserCOMMA)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(409)
					p.Column_def()
				}

			}
			p.SetState(414)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 36, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}
		p.SetState(419)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == SQLiteParserCOMMA {
			{
				p.SetState(415)
				p.Match(SQLiteParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(416)
				p.Table_constraint()
			}

			p.SetState(421)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(422)
			p.Match(SQLiteParserCLOSE_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(425)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserWITHOUT_ {
			{
				p.SetState(423)
				p.Match(SQLiteParserWITHOUT_)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(424)

				var _m = p.Match(SQLiteParserIDENTIFIER)

				localctx.(*Create_table_stmtContext).row_ROW_ID = _m
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}

	case SQLiteParserAS_:
		{
			p.SetState(427)
			p.Match(SQLiteParserAS_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(428)
			p.Select_stmt()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IColumn_defContext is an interface to support dynamic dispatch.
type IColumn_defContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Column_name() IColumn_nameContext
	Type_name() IType_nameContext
	AllColumn_constraint() []IColumn_constraintContext
	Column_constraint(i int) IColumn_constraintContext

	// IsColumn_defContext differentiates from other interfaces.
	IsColumn_defContext()
}

type Column_defContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumn_defContext() *Column_defContext {
	var p = new(Column_defContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_column_def
	return p
}

func InitEmptyColumn_defContext(p *Column_defContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_column_def
}

func (*Column_defContext) IsColumn_defContext() {}

func NewColumn_defContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Column_defContext {
	var p = new(Column_defContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_column_def

	return p
}

func (s *Column_defContext) GetParser() antlr.Parser { return s.parser }

func (s *Column_defContext) Column_name() IColumn_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *Column_defContext) Type_name() IType_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IType_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IType_nameContext)
}

func (s *Column_defContext) AllColumn_constraint() []IColumn_constraintContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumn_constraintContext); ok {
			len++
		}
	}

	tst := make([]IColumn_constraintContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumn_constraintContext); ok {
			tst[i] = t.(IColumn_constraintContext)
			i++
		}
	}

	return tst
}

func (s *Column_defContext) Column_constraint(i int) IColumn_constraintContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_constraintContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_constraintContext)
}

func (s *Column_defContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Column_defContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Column_defContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterColumn_def(s)
	}
}

func (s *Column_defContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitColumn_def(s)
	}
}

func (s *Column_defContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitColumn_def(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Column_def() (localctx IColumn_defContext) {
	localctx = NewColumn_defContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 28, SQLiteParserRULE_column_def)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(431)
		p.Column_name()
	}
	p.SetState(433)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserOPEN_PAR || _la == SQLiteParserIDENTIFIER {
		{
			p.SetState(432)
			p.Type_name()
		}

	}
	p.SetState(438)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&290693316557668352) != 0) || ((int64((_la-105)) & ^0x3f) == 0 && ((int64(1)<<(_la-105))&274877941765) != 0) || _la == SQLiteParserGENERATED_ {
		{
			p.SetState(435)
			p.Column_constraint()
		}

		p.SetState(440)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IType_nameContext is an interface to support dynamic dispatch.
type IType_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllName() []INameContext
	Name(i int) INameContext
	OPEN_PAR() antlr.TerminalNode
	AllSigned_number() []ISigned_numberContext
	Signed_number(i int) ISigned_numberContext
	CLOSE_PAR() antlr.TerminalNode
	COMMA() antlr.TerminalNode

	// IsType_nameContext differentiates from other interfaces.
	IsType_nameContext()
}

type Type_nameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyType_nameContext() *Type_nameContext {
	var p = new(Type_nameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_type_name
	return p
}

func InitEmptyType_nameContext(p *Type_nameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_type_name
}

func (*Type_nameContext) IsType_nameContext() {}

func NewType_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Type_nameContext {
	var p = new(Type_nameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_type_name

	return p
}

func (s *Type_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Type_nameContext) AllName() []INameContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(INameContext); ok {
			len++
		}
	}

	tst := make([]INameContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(INameContext); ok {
			tst[i] = t.(INameContext)
			i++
		}
	}

	return tst
}

func (s *Type_nameContext) Name(i int) INameContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INameContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *Type_nameContext) OPEN_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserOPEN_PAR, 0)
}

func (s *Type_nameContext) AllSigned_number() []ISigned_numberContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISigned_numberContext); ok {
			len++
		}
	}

	tst := make([]ISigned_numberContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISigned_numberContext); ok {
			tst[i] = t.(ISigned_numberContext)
			i++
		}
	}

	return tst
}

func (s *Type_nameContext) Signed_number(i int) ISigned_numberContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISigned_numberContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISigned_numberContext)
}

func (s *Type_nameContext) CLOSE_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCLOSE_PAR, 0)
}

func (s *Type_nameContext) COMMA() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, 0)
}

func (s *Type_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Type_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Type_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterType_name(s)
	}
}

func (s *Type_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitType_name(s)
	}
}

func (s *Type_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitType_name(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Type_name() (localctx IType_nameContext) {
	localctx = NewType_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 30, SQLiteParserRULE_type_name)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(442)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = 1 + 1
	for ok := true; ok; ok = _alt != 1 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1 + 1:
			{
				p.SetState(441)
				p.Name()
			}

		default:
			p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			goto errorExit
		}

		p.SetState(444)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 42, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(456)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 43, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(446)
			p.Match(SQLiteParserOPEN_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(447)
			p.Signed_number()
		}
		{
			p.SetState(448)
			p.Match(SQLiteParserCLOSE_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	} else if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 43, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(450)
			p.Match(SQLiteParserOPEN_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(451)
			p.Signed_number()
		}
		{
			p.SetState(452)
			p.Match(SQLiteParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(453)
			p.Signed_number()
		}
		{
			p.SetState(454)
			p.Match(SQLiteParserCLOSE_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IColumn_constraintContext is an interface to support dynamic dispatch.
type IColumn_constraintContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CHECK_() antlr.TerminalNode
	OPEN_PAR() antlr.TerminalNode
	Expr() IExprContext
	CLOSE_PAR() antlr.TerminalNode
	DEFAULT_() antlr.TerminalNode
	COLLATE_() antlr.TerminalNode
	Collation_name() ICollation_nameContext
	Foreign_key_clause() IForeign_key_clauseContext
	AS_() antlr.TerminalNode
	CONSTRAINT_() antlr.TerminalNode
	Name() INameContext
	PRIMARY_() antlr.TerminalNode
	KEY_() antlr.TerminalNode
	NULL_() antlr.TerminalNode
	UNIQUE_() antlr.TerminalNode
	Signed_number() ISigned_numberContext
	Literal_value() ILiteral_valueContext
	Conflict_clause() IConflict_clauseContext
	GENERATED_() antlr.TerminalNode
	ALWAYS_() antlr.TerminalNode
	STORED_() antlr.TerminalNode
	VIRTUAL_() antlr.TerminalNode
	Asc_desc() IAsc_descContext
	AUTOINCREMENT_() antlr.TerminalNode
	NOT_() antlr.TerminalNode

	// IsColumn_constraintContext differentiates from other interfaces.
	IsColumn_constraintContext()
}

type Column_constraintContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumn_constraintContext() *Column_constraintContext {
	var p = new(Column_constraintContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_column_constraint
	return p
}

func InitEmptyColumn_constraintContext(p *Column_constraintContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_column_constraint
}

func (*Column_constraintContext) IsColumn_constraintContext() {}

func NewColumn_constraintContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Column_constraintContext {
	var p = new(Column_constraintContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_column_constraint

	return p
}

func (s *Column_constraintContext) GetParser() antlr.Parser { return s.parser }

func (s *Column_constraintContext) CHECK_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCHECK_, 0)
}

func (s *Column_constraintContext) OPEN_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserOPEN_PAR, 0)
}

func (s *Column_constraintContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Column_constraintContext) CLOSE_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCLOSE_PAR, 0)
}

func (s *Column_constraintContext) DEFAULT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDEFAULT_, 0)
}

func (s *Column_constraintContext) COLLATE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOLLATE_, 0)
}

func (s *Column_constraintContext) Collation_name() ICollation_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICollation_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICollation_nameContext)
}

func (s *Column_constraintContext) Foreign_key_clause() IForeign_key_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IForeign_key_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IForeign_key_clauseContext)
}

func (s *Column_constraintContext) AS_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserAS_, 0)
}

func (s *Column_constraintContext) CONSTRAINT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCONSTRAINT_, 0)
}

func (s *Column_constraintContext) Name() INameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *Column_constraintContext) PRIMARY_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserPRIMARY_, 0)
}

func (s *Column_constraintContext) KEY_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserKEY_, 0)
}

func (s *Column_constraintContext) NULL_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserNULL_, 0)
}

func (s *Column_constraintContext) UNIQUE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserUNIQUE_, 0)
}

func (s *Column_constraintContext) Signed_number() ISigned_numberContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISigned_numberContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISigned_numberContext)
}

func (s *Column_constraintContext) Literal_value() ILiteral_valueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILiteral_valueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILiteral_valueContext)
}

func (s *Column_constraintContext) Conflict_clause() IConflict_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IConflict_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IConflict_clauseContext)
}

func (s *Column_constraintContext) GENERATED_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserGENERATED_, 0)
}

func (s *Column_constraintContext) ALWAYS_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserALWAYS_, 0)
}

func (s *Column_constraintContext) STORED_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserSTORED_, 0)
}

func (s *Column_constraintContext) VIRTUAL_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserVIRTUAL_, 0)
}

func (s *Column_constraintContext) Asc_desc() IAsc_descContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAsc_descContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAsc_descContext)
}

func (s *Column_constraintContext) AUTOINCREMENT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserAUTOINCREMENT_, 0)
}

func (s *Column_constraintContext) NOT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserNOT_, 0)
}

func (s *Column_constraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Column_constraintContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Column_constraintContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterColumn_constraint(s)
	}
}

func (s *Column_constraintContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitColumn_constraint(s)
	}
}

func (s *Column_constraintContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitColumn_constraint(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Column_constraint() (localctx IColumn_constraintContext) {
	localctx = NewColumn_constraintContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 32, SQLiteParserRULE_column_constraint)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(460)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserCONSTRAINT_ {
		{
			p.SetState(458)
			p.Match(SQLiteParserCONSTRAINT_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(459)
			p.Name()
		}

	}
	p.SetState(511)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case SQLiteParserPRIMARY_:
		{
			p.SetState(462)
			p.Match(SQLiteParserPRIMARY_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(463)
			p.Match(SQLiteParserKEY_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(465)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserASC_ || _la == SQLiteParserDESC_ {
			{
				p.SetState(464)
				p.Asc_desc()
			}

		}
		p.SetState(468)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserON_ {
			{
				p.SetState(467)
				p.Conflict_clause()
			}

		}
		p.SetState(471)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserAUTOINCREMENT_ {
			{
				p.SetState(470)
				p.Match(SQLiteParserAUTOINCREMENT_)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}

	case SQLiteParserNOT_, SQLiteParserNULL_, SQLiteParserUNIQUE_:
		p.SetState(478)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetTokenStream().LA(1) {
		case SQLiteParserNOT_, SQLiteParserNULL_:
			p.SetState(474)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			if _la == SQLiteParserNOT_ {
				{
					p.SetState(473)
					p.Match(SQLiteParserNOT_)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			{
				p.SetState(476)
				p.Match(SQLiteParserNULL_)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		case SQLiteParserUNIQUE_:
			{
				p.SetState(477)
				p.Match(SQLiteParserUNIQUE_)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		default:
			p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			goto errorExit
		}
		p.SetState(481)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserON_ {
			{
				p.SetState(480)
				p.Conflict_clause()
			}

		}

	case SQLiteParserCHECK_:
		{
			p.SetState(483)
			p.Match(SQLiteParserCHECK_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(484)
			p.Match(SQLiteParserOPEN_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(485)
			p.expr(0)
		}
		{
			p.SetState(486)
			p.Match(SQLiteParserCLOSE_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case SQLiteParserDEFAULT_:
		{
			p.SetState(488)
			p.Match(SQLiteParserDEFAULT_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(495)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 51, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(489)
				p.Signed_number()
			}

		case 2:
			{
				p.SetState(490)
				p.Literal_value()
			}

		case 3:
			{
				p.SetState(491)
				p.Match(SQLiteParserOPEN_PAR)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(492)
				p.expr(0)
			}
			{
				p.SetState(493)
				p.Match(SQLiteParserCLOSE_PAR)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		case antlr.ATNInvalidAltNumber:
			goto errorExit
		}

	case SQLiteParserCOLLATE_:
		{
			p.SetState(497)
			p.Match(SQLiteParserCOLLATE_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(498)
			p.Collation_name()
		}

	case SQLiteParserREFERENCES_:
		{
			p.SetState(499)
			p.Foreign_key_clause()
		}

	case SQLiteParserAS_, SQLiteParserGENERATED_:
		p.SetState(502)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserGENERATED_ {
			{
				p.SetState(500)
				p.Match(SQLiteParserGENERATED_)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(501)
				p.Match(SQLiteParserALWAYS_)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(504)
			p.Match(SQLiteParserAS_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(505)
			p.Match(SQLiteParserOPEN_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(506)
			p.expr(0)
		}
		{
			p.SetState(507)
			p.Match(SQLiteParserCLOSE_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(509)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserVIRTUAL_ || _la == SQLiteParserSTORED_ {
			{
				p.SetState(508)
				_la = p.GetTokenStream().LA(1)

				if !(_la == SQLiteParserVIRTUAL_ || _la == SQLiteParserSTORED_) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISigned_numberContext is an interface to support dynamic dispatch.
type ISigned_numberContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	NUMERIC_LITERAL() antlr.TerminalNode
	PLUS() antlr.TerminalNode
	MINUS() antlr.TerminalNode

	// IsSigned_numberContext differentiates from other interfaces.
	IsSigned_numberContext()
}

type Signed_numberContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySigned_numberContext() *Signed_numberContext {
	var p = new(Signed_numberContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_signed_number
	return p
}

func InitEmptySigned_numberContext(p *Signed_numberContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_signed_number
}

func (*Signed_numberContext) IsSigned_numberContext() {}

func NewSigned_numberContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Signed_numberContext {
	var p = new(Signed_numberContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_signed_number

	return p
}

func (s *Signed_numberContext) GetParser() antlr.Parser { return s.parser }

func (s *Signed_numberContext) NUMERIC_LITERAL() antlr.TerminalNode {
	return s.GetToken(SQLiteParserNUMERIC_LITERAL, 0)
}

func (s *Signed_numberContext) PLUS() antlr.TerminalNode {
	return s.GetToken(SQLiteParserPLUS, 0)
}

func (s *Signed_numberContext) MINUS() antlr.TerminalNode {
	return s.GetToken(SQLiteParserMINUS, 0)
}

func (s *Signed_numberContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Signed_numberContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Signed_numberContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterSigned_number(s)
	}
}

func (s *Signed_numberContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitSigned_number(s)
	}
}

func (s *Signed_numberContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitSigned_number(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Signed_number() (localctx ISigned_numberContext) {
	localctx = NewSigned_numberContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 34, SQLiteParserRULE_signed_number)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(514)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserPLUS || _la == SQLiteParserMINUS {
		{
			p.SetState(513)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLiteParserPLUS || _la == SQLiteParserMINUS) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	{
		p.SetState(516)
		p.Match(SQLiteParserNUMERIC_LITERAL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITable_constraintContext is an interface to support dynamic dispatch.
type ITable_constraintContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	OPEN_PAR() antlr.TerminalNode
	AllIndexed_column() []IIndexed_columnContext
	Indexed_column(i int) IIndexed_columnContext
	CLOSE_PAR() antlr.TerminalNode
	CHECK_() antlr.TerminalNode
	Expr() IExprContext
	FOREIGN_() antlr.TerminalNode
	KEY_() antlr.TerminalNode
	AllColumn_name() []IColumn_nameContext
	Column_name(i int) IColumn_nameContext
	Foreign_key_clause() IForeign_key_clauseContext
	CONSTRAINT_() antlr.TerminalNode
	Name() INameContext
	PRIMARY_() antlr.TerminalNode
	UNIQUE_() antlr.TerminalNode
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode
	Conflict_clause() IConflict_clauseContext

	// IsTable_constraintContext differentiates from other interfaces.
	IsTable_constraintContext()
}

type Table_constraintContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_constraintContext() *Table_constraintContext {
	var p = new(Table_constraintContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_table_constraint
	return p
}

func InitEmptyTable_constraintContext(p *Table_constraintContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_table_constraint
}

func (*Table_constraintContext) IsTable_constraintContext() {}

func NewTable_constraintContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_constraintContext {
	var p = new(Table_constraintContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_table_constraint

	return p
}

func (s *Table_constraintContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_constraintContext) OPEN_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserOPEN_PAR, 0)
}

func (s *Table_constraintContext) AllIndexed_column() []IIndexed_columnContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIndexed_columnContext); ok {
			len++
		}
	}

	tst := make([]IIndexed_columnContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIndexed_columnContext); ok {
			tst[i] = t.(IIndexed_columnContext)
			i++
		}
	}

	return tst
}

func (s *Table_constraintContext) Indexed_column(i int) IIndexed_columnContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIndexed_columnContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIndexed_columnContext)
}

func (s *Table_constraintContext) CLOSE_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCLOSE_PAR, 0)
}

func (s *Table_constraintContext) CHECK_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCHECK_, 0)
}

func (s *Table_constraintContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Table_constraintContext) FOREIGN_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserFOREIGN_, 0)
}

func (s *Table_constraintContext) KEY_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserKEY_, 0)
}

func (s *Table_constraintContext) AllColumn_name() []IColumn_nameContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumn_nameContext); ok {
			len++
		}
	}

	tst := make([]IColumn_nameContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumn_nameContext); ok {
			tst[i] = t.(IColumn_nameContext)
			i++
		}
	}

	return tst
}

func (s *Table_constraintContext) Column_name(i int) IColumn_nameContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_nameContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *Table_constraintContext) Foreign_key_clause() IForeign_key_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IForeign_key_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IForeign_key_clauseContext)
}

func (s *Table_constraintContext) CONSTRAINT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCONSTRAINT_, 0)
}

func (s *Table_constraintContext) Name() INameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *Table_constraintContext) PRIMARY_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserPRIMARY_, 0)
}

func (s *Table_constraintContext) UNIQUE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserUNIQUE_, 0)
}

func (s *Table_constraintContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserCOMMA)
}

func (s *Table_constraintContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, i)
}

func (s *Table_constraintContext) Conflict_clause() IConflict_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IConflict_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IConflict_clauseContext)
}

func (s *Table_constraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_constraintContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Table_constraintContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterTable_constraint(s)
	}
}

func (s *Table_constraintContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitTable_constraint(s)
	}
}

func (s *Table_constraintContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitTable_constraint(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Table_constraint() (localctx ITable_constraintContext) {
	localctx = NewTable_constraintContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 36, SQLiteParserRULE_table_constraint)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(520)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserCONSTRAINT_ {
		{
			p.SetState(518)
			p.Match(SQLiteParserCONSTRAINT_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(519)
			p.Name()
		}

	}
	p.SetState(559)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case SQLiteParserPRIMARY_, SQLiteParserUNIQUE_:
		p.SetState(525)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetTokenStream().LA(1) {
		case SQLiteParserPRIMARY_:
			{
				p.SetState(522)
				p.Match(SQLiteParserPRIMARY_)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(523)
				p.Match(SQLiteParserKEY_)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		case SQLiteParserUNIQUE_:
			{
				p.SetState(524)
				p.Match(SQLiteParserUNIQUE_)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		default:
			p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			goto errorExit
		}
		{
			p.SetState(527)
			p.Match(SQLiteParserOPEN_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(528)
			p.Indexed_column()
		}
		p.SetState(533)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == SQLiteParserCOMMA {
			{
				p.SetState(529)
				p.Match(SQLiteParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(530)
				p.Indexed_column()
			}

			p.SetState(535)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(536)
			p.Match(SQLiteParserCLOSE_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(538)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserON_ {
			{
				p.SetState(537)
				p.Conflict_clause()
			}

		}

	case SQLiteParserCHECK_:
		{
			p.SetState(540)
			p.Match(SQLiteParserCHECK_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(541)
			p.Match(SQLiteParserOPEN_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(542)
			p.expr(0)
		}
		{
			p.SetState(543)
			p.Match(SQLiteParserCLOSE_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case SQLiteParserFOREIGN_:
		{
			p.SetState(545)
			p.Match(SQLiteParserFOREIGN_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(546)
			p.Match(SQLiteParserKEY_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(547)
			p.Match(SQLiteParserOPEN_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(548)
			p.Column_name()
		}
		p.SetState(553)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == SQLiteParserCOMMA {
			{
				p.SetState(549)
				p.Match(SQLiteParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(550)
				p.Column_name()
			}

			p.SetState(555)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(556)
			p.Match(SQLiteParserCLOSE_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(557)
			p.Foreign_key_clause()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IForeign_key_clauseContext is an interface to support dynamic dispatch.
type IForeign_key_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	REFERENCES_() antlr.TerminalNode
	Foreign_table() IForeign_tableContext
	OPEN_PAR() antlr.TerminalNode
	AllColumn_name() []IColumn_nameContext
	Column_name(i int) IColumn_nameContext
	CLOSE_PAR() antlr.TerminalNode
	AllON_() []antlr.TerminalNode
	ON_(i int) antlr.TerminalNode
	AllMATCH_() []antlr.TerminalNode
	MATCH_(i int) antlr.TerminalNode
	AllName() []INameContext
	Name(i int) INameContext
	DEFERRABLE_() antlr.TerminalNode
	AllDELETE_() []antlr.TerminalNode
	DELETE_(i int) antlr.TerminalNode
	AllUPDATE_() []antlr.TerminalNode
	UPDATE_(i int) antlr.TerminalNode
	AllSET_() []antlr.TerminalNode
	SET_(i int) antlr.TerminalNode
	AllCASCADE_() []antlr.TerminalNode
	CASCADE_(i int) antlr.TerminalNode
	AllRESTRICT_() []antlr.TerminalNode
	RESTRICT_(i int) antlr.TerminalNode
	AllNO_() []antlr.TerminalNode
	NO_(i int) antlr.TerminalNode
	AllACTION_() []antlr.TerminalNode
	ACTION_(i int) antlr.TerminalNode
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode
	AllNULL_() []antlr.TerminalNode
	NULL_(i int) antlr.TerminalNode
	AllDEFAULT_() []antlr.TerminalNode
	DEFAULT_(i int) antlr.TerminalNode
	NOT_() antlr.TerminalNode
	INITIALLY_() antlr.TerminalNode
	DEFERRED_() antlr.TerminalNode
	IMMEDIATE_() antlr.TerminalNode

	// IsForeign_key_clauseContext differentiates from other interfaces.
	IsForeign_key_clauseContext()
}

type Foreign_key_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyForeign_key_clauseContext() *Foreign_key_clauseContext {
	var p = new(Foreign_key_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_foreign_key_clause
	return p
}

func InitEmptyForeign_key_clauseContext(p *Foreign_key_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_foreign_key_clause
}

func (*Foreign_key_clauseContext) IsForeign_key_clauseContext() {}

func NewForeign_key_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Foreign_key_clauseContext {
	var p = new(Foreign_key_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_foreign_key_clause

	return p
}

func (s *Foreign_key_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Foreign_key_clauseContext) REFERENCES_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserREFERENCES_, 0)
}

func (s *Foreign_key_clauseContext) Foreign_table() IForeign_tableContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IForeign_tableContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IForeign_tableContext)
}

func (s *Foreign_key_clauseContext) OPEN_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserOPEN_PAR, 0)
}

func (s *Foreign_key_clauseContext) AllColumn_name() []IColumn_nameContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumn_nameContext); ok {
			len++
		}
	}

	tst := make([]IColumn_nameContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumn_nameContext); ok {
			tst[i] = t.(IColumn_nameContext)
			i++
		}
	}

	return tst
}

func (s *Foreign_key_clauseContext) Column_name(i int) IColumn_nameContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_nameContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *Foreign_key_clauseContext) CLOSE_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCLOSE_PAR, 0)
}

func (s *Foreign_key_clauseContext) AllON_() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserON_)
}

func (s *Foreign_key_clauseContext) ON_(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserON_, i)
}

func (s *Foreign_key_clauseContext) AllMATCH_() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserMATCH_)
}

func (s *Foreign_key_clauseContext) MATCH_(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserMATCH_, i)
}

func (s *Foreign_key_clauseContext) AllName() []INameContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(INameContext); ok {
			len++
		}
	}

	tst := make([]INameContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(INameContext); ok {
			tst[i] = t.(INameContext)
			i++
		}
	}

	return tst
}

func (s *Foreign_key_clauseContext) Name(i int) INameContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INameContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *Foreign_key_clauseContext) DEFERRABLE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDEFERRABLE_, 0)
}

func (s *Foreign_key_clauseContext) AllDELETE_() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserDELETE_)
}

func (s *Foreign_key_clauseContext) DELETE_(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserDELETE_, i)
}

func (s *Foreign_key_clauseContext) AllUPDATE_() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserUPDATE_)
}

func (s *Foreign_key_clauseContext) UPDATE_(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserUPDATE_, i)
}

func (s *Foreign_key_clauseContext) AllSET_() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserSET_)
}

func (s *Foreign_key_clauseContext) SET_(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserSET_, i)
}

func (s *Foreign_key_clauseContext) AllCASCADE_() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserCASCADE_)
}

func (s *Foreign_key_clauseContext) CASCADE_(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserCASCADE_, i)
}

func (s *Foreign_key_clauseContext) AllRESTRICT_() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserRESTRICT_)
}

func (s *Foreign_key_clauseContext) RESTRICT_(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserRESTRICT_, i)
}

func (s *Foreign_key_clauseContext) AllNO_() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserNO_)
}

func (s *Foreign_key_clauseContext) NO_(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserNO_, i)
}

func (s *Foreign_key_clauseContext) AllACTION_() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserACTION_)
}

func (s *Foreign_key_clauseContext) ACTION_(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserACTION_, i)
}

func (s *Foreign_key_clauseContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserCOMMA)
}

func (s *Foreign_key_clauseContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, i)
}

func (s *Foreign_key_clauseContext) AllNULL_() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserNULL_)
}

func (s *Foreign_key_clauseContext) NULL_(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserNULL_, i)
}

func (s *Foreign_key_clauseContext) AllDEFAULT_() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserDEFAULT_)
}

func (s *Foreign_key_clauseContext) DEFAULT_(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserDEFAULT_, i)
}

func (s *Foreign_key_clauseContext) NOT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserNOT_, 0)
}

func (s *Foreign_key_clauseContext) INITIALLY_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserINITIALLY_, 0)
}

func (s *Foreign_key_clauseContext) DEFERRED_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDEFERRED_, 0)
}

func (s *Foreign_key_clauseContext) IMMEDIATE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserIMMEDIATE_, 0)
}

func (s *Foreign_key_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Foreign_key_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Foreign_key_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterForeign_key_clause(s)
	}
}

func (s *Foreign_key_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitForeign_key_clause(s)
	}
}

func (s *Foreign_key_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitForeign_key_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Foreign_key_clause() (localctx IForeign_key_clauseContext) {
	localctx = NewForeign_key_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 38, SQLiteParserRULE_foreign_key_clause)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(561)
		p.Match(SQLiteParserREFERENCES_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(562)
		p.Foreign_table()
	}
	p.SetState(574)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserOPEN_PAR {
		{
			p.SetState(563)
			p.Match(SQLiteParserOPEN_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(564)
			p.Column_name()
		}
		p.SetState(569)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == SQLiteParserCOMMA {
			{
				p.SetState(565)
				p.Match(SQLiteParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(566)
				p.Column_name()
			}

			p.SetState(571)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(572)
			p.Match(SQLiteParserCLOSE_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(590)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == SQLiteParserMATCH_ || _la == SQLiteParserON_ {
		p.SetState(588)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetTokenStream().LA(1) {
		case SQLiteParserON_:
			{
				p.SetState(576)
				p.Match(SQLiteParserON_)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(577)
				_la = p.GetTokenStream().LA(1)

				if !(_la == SQLiteParserDELETE_ || _la == SQLiteParserUPDATE_) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}
			p.SetState(584)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}

			switch p.GetTokenStream().LA(1) {
			case SQLiteParserSET_:
				{
					p.SetState(578)
					p.Match(SQLiteParserSET_)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(579)
					_la = p.GetTokenStream().LA(1)

					if !(_la == SQLiteParserDEFAULT_ || _la == SQLiteParserNULL_) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}

			case SQLiteParserCASCADE_:
				{
					p.SetState(580)
					p.Match(SQLiteParserCASCADE_)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			case SQLiteParserRESTRICT_:
				{
					p.SetState(581)
					p.Match(SQLiteParserRESTRICT_)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			case SQLiteParserNO_:
				{
					p.SetState(582)
					p.Match(SQLiteParserNO_)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(583)
					p.Match(SQLiteParserACTION_)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			default:
				p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
				goto errorExit
			}

		case SQLiteParserMATCH_:
			{
				p.SetState(586)
				p.Match(SQLiteParserMATCH_)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(587)
				p.Name()
			}

		default:
			p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			goto errorExit
		}

		p.SetState(592)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(601)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 69, p.GetParserRuleContext()) == 1 {
		p.SetState(594)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserNOT_ {
			{
				p.SetState(593)
				p.Match(SQLiteParserNOT_)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(596)
			p.Match(SQLiteParserDEFERRABLE_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(599)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserINITIALLY_ {
			{
				p.SetState(597)
				p.Match(SQLiteParserINITIALLY_)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(598)
				_la = p.GetTokenStream().LA(1)

				if !(_la == SQLiteParserDEFERRED_ || _la == SQLiteParserIMMEDIATE_) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IConflict_clauseContext is an interface to support dynamic dispatch.
type IConflict_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ON_() antlr.TerminalNode
	CONFLICT_() antlr.TerminalNode
	ROLLBACK_() antlr.TerminalNode
	ABORT_() antlr.TerminalNode
	FAIL_() antlr.TerminalNode
	IGNORE_() antlr.TerminalNode
	REPLACE_() antlr.TerminalNode

	// IsConflict_clauseContext differentiates from other interfaces.
	IsConflict_clauseContext()
}

type Conflict_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConflict_clauseContext() *Conflict_clauseContext {
	var p = new(Conflict_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_conflict_clause
	return p
}

func InitEmptyConflict_clauseContext(p *Conflict_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_conflict_clause
}

func (*Conflict_clauseContext) IsConflict_clauseContext() {}

func NewConflict_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Conflict_clauseContext {
	var p = new(Conflict_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_conflict_clause

	return p
}

func (s *Conflict_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Conflict_clauseContext) ON_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserON_, 0)
}

func (s *Conflict_clauseContext) CONFLICT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCONFLICT_, 0)
}

func (s *Conflict_clauseContext) ROLLBACK_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserROLLBACK_, 0)
}

func (s *Conflict_clauseContext) ABORT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserABORT_, 0)
}

func (s *Conflict_clauseContext) FAIL_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserFAIL_, 0)
}

func (s *Conflict_clauseContext) IGNORE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserIGNORE_, 0)
}

func (s *Conflict_clauseContext) REPLACE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserREPLACE_, 0)
}

func (s *Conflict_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Conflict_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Conflict_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterConflict_clause(s)
	}
}

func (s *Conflict_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitConflict_clause(s)
	}
}

func (s *Conflict_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitConflict_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Conflict_clause() (localctx IConflict_clauseContext) {
	localctx = NewConflict_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 40, SQLiteParserRULE_conflict_clause)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(603)
		p.Match(SQLiteParserON_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(604)
		p.Match(SQLiteParserCONFLICT_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(605)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SQLiteParserABORT_ || ((int64((_la-74)) & ^0x3f) == 0 && ((int64(1)<<(_la-74))&38280596832649729) != 0)) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICreate_trigger_stmtContext is an interface to support dynamic dispatch.
type ICreate_trigger_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CREATE_() antlr.TerminalNode
	TRIGGER_() antlr.TerminalNode
	Trigger_name() ITrigger_nameContext
	ON_() antlr.TerminalNode
	Table_name() ITable_nameContext
	BEGIN_() antlr.TerminalNode
	END_() antlr.TerminalNode
	DELETE_() antlr.TerminalNode
	INSERT_() antlr.TerminalNode
	UPDATE_() antlr.TerminalNode
	IF_() antlr.TerminalNode
	NOT_() antlr.TerminalNode
	EXISTS_() antlr.TerminalNode
	Schema_name() ISchema_nameContext
	DOT() antlr.TerminalNode
	BEFORE_() antlr.TerminalNode
	AFTER_() antlr.TerminalNode
	INSTEAD_() antlr.TerminalNode
	AllOF_() []antlr.TerminalNode
	OF_(i int) antlr.TerminalNode
	FOR_() antlr.TerminalNode
	EACH_() antlr.TerminalNode
	ROW_() antlr.TerminalNode
	WHEN_() antlr.TerminalNode
	Expr() IExprContext
	AllSCOL() []antlr.TerminalNode
	SCOL(i int) antlr.TerminalNode
	TEMP_() antlr.TerminalNode
	TEMPORARY_() antlr.TerminalNode
	AllColumn_name() []IColumn_nameContext
	Column_name(i int) IColumn_nameContext
	AllUpdate_stmt() []IUpdate_stmtContext
	Update_stmt(i int) IUpdate_stmtContext
	AllInsert_stmt() []IInsert_stmtContext
	Insert_stmt(i int) IInsert_stmtContext
	AllDelete_stmt() []IDelete_stmtContext
	Delete_stmt(i int) IDelete_stmtContext
	AllSelect_stmt() []ISelect_stmtContext
	Select_stmt(i int) ISelect_stmtContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsCreate_trigger_stmtContext differentiates from other interfaces.
	IsCreate_trigger_stmtContext()
}

type Create_trigger_stmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_trigger_stmtContext() *Create_trigger_stmtContext {
	var p = new(Create_trigger_stmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_create_trigger_stmt
	return p
}

func InitEmptyCreate_trigger_stmtContext(p *Create_trigger_stmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_create_trigger_stmt
}

func (*Create_trigger_stmtContext) IsCreate_trigger_stmtContext() {}

func NewCreate_trigger_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_trigger_stmtContext {
	var p = new(Create_trigger_stmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_create_trigger_stmt

	return p
}

func (s *Create_trigger_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_trigger_stmtContext) CREATE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCREATE_, 0)
}

func (s *Create_trigger_stmtContext) TRIGGER_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserTRIGGER_, 0)
}

func (s *Create_trigger_stmtContext) Trigger_name() ITrigger_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITrigger_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITrigger_nameContext)
}

func (s *Create_trigger_stmtContext) ON_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserON_, 0)
}

func (s *Create_trigger_stmtContext) Table_name() ITable_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Create_trigger_stmtContext) BEGIN_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserBEGIN_, 0)
}

func (s *Create_trigger_stmtContext) END_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserEND_, 0)
}

func (s *Create_trigger_stmtContext) DELETE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDELETE_, 0)
}

func (s *Create_trigger_stmtContext) INSERT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserINSERT_, 0)
}

func (s *Create_trigger_stmtContext) UPDATE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserUPDATE_, 0)
}

func (s *Create_trigger_stmtContext) IF_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserIF_, 0)
}

func (s *Create_trigger_stmtContext) NOT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserNOT_, 0)
}

func (s *Create_trigger_stmtContext) EXISTS_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserEXISTS_, 0)
}

func (s *Create_trigger_stmtContext) Schema_name() ISchema_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISchema_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISchema_nameContext)
}

func (s *Create_trigger_stmtContext) DOT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDOT, 0)
}

func (s *Create_trigger_stmtContext) BEFORE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserBEFORE_, 0)
}

func (s *Create_trigger_stmtContext) AFTER_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserAFTER_, 0)
}

func (s *Create_trigger_stmtContext) INSTEAD_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserINSTEAD_, 0)
}

func (s *Create_trigger_stmtContext) AllOF_() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserOF_)
}

func (s *Create_trigger_stmtContext) OF_(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserOF_, i)
}

func (s *Create_trigger_stmtContext) FOR_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserFOR_, 0)
}

func (s *Create_trigger_stmtContext) EACH_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserEACH_, 0)
}

func (s *Create_trigger_stmtContext) ROW_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserROW_, 0)
}

func (s *Create_trigger_stmtContext) WHEN_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserWHEN_, 0)
}

func (s *Create_trigger_stmtContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Create_trigger_stmtContext) AllSCOL() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserSCOL)
}

func (s *Create_trigger_stmtContext) SCOL(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserSCOL, i)
}

func (s *Create_trigger_stmtContext) TEMP_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserTEMP_, 0)
}

func (s *Create_trigger_stmtContext) TEMPORARY_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserTEMPORARY_, 0)
}

func (s *Create_trigger_stmtContext) AllColumn_name() []IColumn_nameContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumn_nameContext); ok {
			len++
		}
	}

	tst := make([]IColumn_nameContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumn_nameContext); ok {
			tst[i] = t.(IColumn_nameContext)
			i++
		}
	}

	return tst
}

func (s *Create_trigger_stmtContext) Column_name(i int) IColumn_nameContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_nameContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *Create_trigger_stmtContext) AllUpdate_stmt() []IUpdate_stmtContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IUpdate_stmtContext); ok {
			len++
		}
	}

	tst := make([]IUpdate_stmtContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IUpdate_stmtContext); ok {
			tst[i] = t.(IUpdate_stmtContext)
			i++
		}
	}

	return tst
}

func (s *Create_trigger_stmtContext) Update_stmt(i int) IUpdate_stmtContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUpdate_stmtContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUpdate_stmtContext)
}

func (s *Create_trigger_stmtContext) AllInsert_stmt() []IInsert_stmtContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IInsert_stmtContext); ok {
			len++
		}
	}

	tst := make([]IInsert_stmtContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IInsert_stmtContext); ok {
			tst[i] = t.(IInsert_stmtContext)
			i++
		}
	}

	return tst
}

func (s *Create_trigger_stmtContext) Insert_stmt(i int) IInsert_stmtContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInsert_stmtContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInsert_stmtContext)
}

func (s *Create_trigger_stmtContext) AllDelete_stmt() []IDelete_stmtContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IDelete_stmtContext); ok {
			len++
		}
	}

	tst := make([]IDelete_stmtContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IDelete_stmtContext); ok {
			tst[i] = t.(IDelete_stmtContext)
			i++
		}
	}

	return tst
}

func (s *Create_trigger_stmtContext) Delete_stmt(i int) IDelete_stmtContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDelete_stmtContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDelete_stmtContext)
}

func (s *Create_trigger_stmtContext) AllSelect_stmt() []ISelect_stmtContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISelect_stmtContext); ok {
			len++
		}
	}

	tst := make([]ISelect_stmtContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISelect_stmtContext); ok {
			tst[i] = t.(ISelect_stmtContext)
			i++
		}
	}

	return tst
}

func (s *Create_trigger_stmtContext) Select_stmt(i int) ISelect_stmtContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelect_stmtContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelect_stmtContext)
}

func (s *Create_trigger_stmtContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserCOMMA)
}

func (s *Create_trigger_stmtContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, i)
}

func (s *Create_trigger_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_trigger_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_trigger_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterCreate_trigger_stmt(s)
	}
}

func (s *Create_trigger_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitCreate_trigger_stmt(s)
	}
}

func (s *Create_trigger_stmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitCreate_trigger_stmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Create_trigger_stmt() (localctx ICreate_trigger_stmtContext) {
	localctx = NewCreate_trigger_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 42, SQLiteParserRULE_create_trigger_stmt)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(607)
		p.Match(SQLiteParserCREATE_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(609)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserTEMP_ || _la == SQLiteParserTEMPORARY_ {
		{
			p.SetState(608)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLiteParserTEMP_ || _la == SQLiteParserTEMPORARY_) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	{
		p.SetState(611)
		p.Match(SQLiteParserTRIGGER_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(615)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserIF_ {
		{
			p.SetState(612)
			p.Match(SQLiteParserIF_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(613)
			p.Match(SQLiteParserNOT_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(614)
			p.Match(SQLiteParserEXISTS_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(620)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 72, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(617)
			p.Schema_name()
		}
		{
			p.SetState(618)
			p.Match(SQLiteParserDOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	{
		p.SetState(622)
		p.Trigger_name()
	}
	p.SetState(627)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	switch p.GetTokenStream().LA(1) {
	case SQLiteParserBEFORE_:
		{
			p.SetState(623)
			p.Match(SQLiteParserBEFORE_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case SQLiteParserAFTER_:
		{
			p.SetState(624)
			p.Match(SQLiteParserAFTER_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case SQLiteParserINSTEAD_:
		{
			p.SetState(625)
			p.Match(SQLiteParserINSTEAD_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(626)
			p.Match(SQLiteParserOF_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case SQLiteParserDELETE_, SQLiteParserINSERT_, SQLiteParserUPDATE_:

	default:
	}
	p.SetState(643)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case SQLiteParserDELETE_:
		{
			p.SetState(629)
			p.Match(SQLiteParserDELETE_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case SQLiteParserINSERT_:
		{
			p.SetState(630)
			p.Match(SQLiteParserINSERT_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case SQLiteParserUPDATE_:
		{
			p.SetState(631)
			p.Match(SQLiteParserUPDATE_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(641)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserOF_ {
			{
				p.SetState(632)
				p.Match(SQLiteParserOF_)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(633)
				p.Column_name()
			}
			p.SetState(638)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			for _la == SQLiteParserCOMMA {
				{
					p.SetState(634)
					p.Match(SQLiteParserCOMMA)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(635)
					p.Column_name()
				}

				p.SetState(640)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)
			}

		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}
	{
		p.SetState(645)
		p.Match(SQLiteParserON_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(646)
		p.Table_name()
	}
	p.SetState(650)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserFOR_ {
		{
			p.SetState(647)
			p.Match(SQLiteParserFOR_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(648)
			p.Match(SQLiteParserEACH_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(649)
			p.Match(SQLiteParserROW_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(654)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserWHEN_ {
		{
			p.SetState(652)
			p.Match(SQLiteParserWHEN_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(653)
			p.expr(0)
		}

	}
	{
		p.SetState(656)
		p.Match(SQLiteParserBEGIN_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(665)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == SQLiteParserDELETE_ || ((int64((_la-90)) & ^0x3f) == 0 && ((int64(1)<<(_la-90))&4773824435465486337) != 0) {
		p.SetState(661)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 79, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(657)
				p.Update_stmt()
			}

		case 2:
			{
				p.SetState(658)
				p.Insert_stmt()
			}

		case 3:
			{
				p.SetState(659)
				p.Delete_stmt()
			}

		case 4:
			{
				p.SetState(660)
				p.Select_stmt()
			}

		case antlr.ATNInvalidAltNumber:
			goto errorExit
		}
		{
			p.SetState(663)
			p.Match(SQLiteParserSCOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(667)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(669)
		p.Match(SQLiteParserEND_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICreate_view_stmtContext is an interface to support dynamic dispatch.
type ICreate_view_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CREATE_() antlr.TerminalNode
	VIEW_() antlr.TerminalNode
	View_name() IView_nameContext
	AS_() antlr.TerminalNode
	Select_stmt() ISelect_stmtContext
	IF_() antlr.TerminalNode
	NOT_() antlr.TerminalNode
	EXISTS_() antlr.TerminalNode
	Schema_name() ISchema_nameContext
	DOT() antlr.TerminalNode
	OPEN_PAR() antlr.TerminalNode
	AllColumn_name() []IColumn_nameContext
	Column_name(i int) IColumn_nameContext
	CLOSE_PAR() antlr.TerminalNode
	TEMP_() antlr.TerminalNode
	TEMPORARY_() antlr.TerminalNode
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsCreate_view_stmtContext differentiates from other interfaces.
	IsCreate_view_stmtContext()
}

type Create_view_stmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_view_stmtContext() *Create_view_stmtContext {
	var p = new(Create_view_stmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_create_view_stmt
	return p
}

func InitEmptyCreate_view_stmtContext(p *Create_view_stmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_create_view_stmt
}

func (*Create_view_stmtContext) IsCreate_view_stmtContext() {}

func NewCreate_view_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_view_stmtContext {
	var p = new(Create_view_stmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_create_view_stmt

	return p
}

func (s *Create_view_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_view_stmtContext) CREATE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCREATE_, 0)
}

func (s *Create_view_stmtContext) VIEW_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserVIEW_, 0)
}

func (s *Create_view_stmtContext) View_name() IView_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IView_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IView_nameContext)
}

func (s *Create_view_stmtContext) AS_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserAS_, 0)
}

func (s *Create_view_stmtContext) Select_stmt() ISelect_stmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelect_stmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelect_stmtContext)
}

func (s *Create_view_stmtContext) IF_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserIF_, 0)
}

func (s *Create_view_stmtContext) NOT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserNOT_, 0)
}

func (s *Create_view_stmtContext) EXISTS_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserEXISTS_, 0)
}

func (s *Create_view_stmtContext) Schema_name() ISchema_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISchema_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISchema_nameContext)
}

func (s *Create_view_stmtContext) DOT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDOT, 0)
}

func (s *Create_view_stmtContext) OPEN_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserOPEN_PAR, 0)
}

func (s *Create_view_stmtContext) AllColumn_name() []IColumn_nameContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumn_nameContext); ok {
			len++
		}
	}

	tst := make([]IColumn_nameContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumn_nameContext); ok {
			tst[i] = t.(IColumn_nameContext)
			i++
		}
	}

	return tst
}

func (s *Create_view_stmtContext) Column_name(i int) IColumn_nameContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_nameContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *Create_view_stmtContext) CLOSE_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCLOSE_PAR, 0)
}

func (s *Create_view_stmtContext) TEMP_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserTEMP_, 0)
}

func (s *Create_view_stmtContext) TEMPORARY_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserTEMPORARY_, 0)
}

func (s *Create_view_stmtContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserCOMMA)
}

func (s *Create_view_stmtContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, i)
}

func (s *Create_view_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_view_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_view_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterCreate_view_stmt(s)
	}
}

func (s *Create_view_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitCreate_view_stmt(s)
	}
}

func (s *Create_view_stmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitCreate_view_stmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Create_view_stmt() (localctx ICreate_view_stmtContext) {
	localctx = NewCreate_view_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 44, SQLiteParserRULE_create_view_stmt)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(671)
		p.Match(SQLiteParserCREATE_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(673)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserTEMP_ || _la == SQLiteParserTEMPORARY_ {
		{
			p.SetState(672)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLiteParserTEMP_ || _la == SQLiteParserTEMPORARY_) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	{
		p.SetState(675)
		p.Match(SQLiteParserVIEW_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(679)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserIF_ {
		{
			p.SetState(676)
			p.Match(SQLiteParserIF_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(677)
			p.Match(SQLiteParserNOT_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(678)
			p.Match(SQLiteParserEXISTS_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(684)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 83, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(681)
			p.Schema_name()
		}
		{
			p.SetState(682)
			p.Match(SQLiteParserDOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	{
		p.SetState(686)
		p.View_name()
	}
	p.SetState(698)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserOPEN_PAR {
		{
			p.SetState(687)
			p.Match(SQLiteParserOPEN_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(688)
			p.Column_name()
		}
		p.SetState(693)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == SQLiteParserCOMMA {
			{
				p.SetState(689)
				p.Match(SQLiteParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(690)
				p.Column_name()
			}

			p.SetState(695)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(696)
			p.Match(SQLiteParserCLOSE_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(700)
		p.Match(SQLiteParserAS_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(701)
		p.Select_stmt()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICreate_virtual_table_stmtContext is an interface to support dynamic dispatch.
type ICreate_virtual_table_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CREATE_() antlr.TerminalNode
	VIRTUAL_() antlr.TerminalNode
	TABLE_() antlr.TerminalNode
	Table_name() ITable_nameContext
	USING_() antlr.TerminalNode
	Module_name() IModule_nameContext
	IF_() antlr.TerminalNode
	NOT_() antlr.TerminalNode
	EXISTS_() antlr.TerminalNode
	Schema_name() ISchema_nameContext
	DOT() antlr.TerminalNode
	OPEN_PAR() antlr.TerminalNode
	AllModule_argument() []IModule_argumentContext
	Module_argument(i int) IModule_argumentContext
	CLOSE_PAR() antlr.TerminalNode
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsCreate_virtual_table_stmtContext differentiates from other interfaces.
	IsCreate_virtual_table_stmtContext()
}

type Create_virtual_table_stmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_virtual_table_stmtContext() *Create_virtual_table_stmtContext {
	var p = new(Create_virtual_table_stmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_create_virtual_table_stmt
	return p
}

func InitEmptyCreate_virtual_table_stmtContext(p *Create_virtual_table_stmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_create_virtual_table_stmt
}

func (*Create_virtual_table_stmtContext) IsCreate_virtual_table_stmtContext() {}

func NewCreate_virtual_table_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_virtual_table_stmtContext {
	var p = new(Create_virtual_table_stmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_create_virtual_table_stmt

	return p
}

func (s *Create_virtual_table_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_virtual_table_stmtContext) CREATE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCREATE_, 0)
}

func (s *Create_virtual_table_stmtContext) VIRTUAL_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserVIRTUAL_, 0)
}

func (s *Create_virtual_table_stmtContext) TABLE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserTABLE_, 0)
}

func (s *Create_virtual_table_stmtContext) Table_name() ITable_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Create_virtual_table_stmtContext) USING_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserUSING_, 0)
}

func (s *Create_virtual_table_stmtContext) Module_name() IModule_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IModule_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IModule_nameContext)
}

func (s *Create_virtual_table_stmtContext) IF_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserIF_, 0)
}

func (s *Create_virtual_table_stmtContext) NOT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserNOT_, 0)
}

func (s *Create_virtual_table_stmtContext) EXISTS_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserEXISTS_, 0)
}

func (s *Create_virtual_table_stmtContext) Schema_name() ISchema_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISchema_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISchema_nameContext)
}

func (s *Create_virtual_table_stmtContext) DOT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDOT, 0)
}

func (s *Create_virtual_table_stmtContext) OPEN_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserOPEN_PAR, 0)
}

func (s *Create_virtual_table_stmtContext) AllModule_argument() []IModule_argumentContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IModule_argumentContext); ok {
			len++
		}
	}

	tst := make([]IModule_argumentContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IModule_argumentContext); ok {
			tst[i] = t.(IModule_argumentContext)
			i++
		}
	}

	return tst
}

func (s *Create_virtual_table_stmtContext) Module_argument(i int) IModule_argumentContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IModule_argumentContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IModule_argumentContext)
}

func (s *Create_virtual_table_stmtContext) CLOSE_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCLOSE_PAR, 0)
}

func (s *Create_virtual_table_stmtContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserCOMMA)
}

func (s *Create_virtual_table_stmtContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, i)
}

func (s *Create_virtual_table_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_virtual_table_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_virtual_table_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterCreate_virtual_table_stmt(s)
	}
}

func (s *Create_virtual_table_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitCreate_virtual_table_stmt(s)
	}
}

func (s *Create_virtual_table_stmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitCreate_virtual_table_stmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Create_virtual_table_stmt() (localctx ICreate_virtual_table_stmtContext) {
	localctx = NewCreate_virtual_table_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 46, SQLiteParserRULE_create_virtual_table_stmt)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(703)
		p.Match(SQLiteParserCREATE_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(704)
		p.Match(SQLiteParserVIRTUAL_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(705)
		p.Match(SQLiteParserTABLE_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(709)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserIF_ {
		{
			p.SetState(706)
			p.Match(SQLiteParserIF_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(707)
			p.Match(SQLiteParserNOT_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(708)
			p.Match(SQLiteParserEXISTS_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(714)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 87, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(711)
			p.Schema_name()
		}
		{
			p.SetState(712)
			p.Match(SQLiteParserDOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	{
		p.SetState(716)
		p.Table_name()
	}
	{
		p.SetState(717)
		p.Match(SQLiteParserUSING_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(718)
		p.Module_name()
	}
	p.SetState(730)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserOPEN_PAR {
		{
			p.SetState(719)
			p.Match(SQLiteParserOPEN_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(720)
			p.Module_argument()
		}
		p.SetState(725)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == SQLiteParserCOMMA {
			{
				p.SetState(721)
				p.Match(SQLiteParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(722)
				p.Module_argument()
			}

			p.SetState(727)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(728)
			p.Match(SQLiteParserCLOSE_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDelete_stmtContext is an interface to support dynamic dispatch.
type IDelete_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	DELETE_() antlr.TerminalNode
	FROM_() antlr.TerminalNode
	Qualified_table_name() IQualified_table_nameContext
	With_clause() IWith_clauseContext
	Where_stmt() IWhere_stmtContext
	Returning_clause() IReturning_clauseContext
	Limit_stmt() ILimit_stmtContext
	Order_by_stmt() IOrder_by_stmtContext

	// IsDelete_stmtContext differentiates from other interfaces.
	IsDelete_stmtContext()
}

type Delete_stmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDelete_stmtContext() *Delete_stmtContext {
	var p = new(Delete_stmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_delete_stmt
	return p
}

func InitEmptyDelete_stmtContext(p *Delete_stmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_delete_stmt
}

func (*Delete_stmtContext) IsDelete_stmtContext() {}

func NewDelete_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Delete_stmtContext {
	var p = new(Delete_stmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_delete_stmt

	return p
}

func (s *Delete_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Delete_stmtContext) DELETE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDELETE_, 0)
}

func (s *Delete_stmtContext) FROM_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserFROM_, 0)
}

func (s *Delete_stmtContext) Qualified_table_name() IQualified_table_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQualified_table_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQualified_table_nameContext)
}

func (s *Delete_stmtContext) With_clause() IWith_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWith_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWith_clauseContext)
}

func (s *Delete_stmtContext) Where_stmt() IWhere_stmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWhere_stmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWhere_stmtContext)
}

func (s *Delete_stmtContext) Returning_clause() IReturning_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IReturning_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IReturning_clauseContext)
}

func (s *Delete_stmtContext) Limit_stmt() ILimit_stmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILimit_stmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILimit_stmtContext)
}

func (s *Delete_stmtContext) Order_by_stmt() IOrder_by_stmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOrder_by_stmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOrder_by_stmtContext)
}

func (s *Delete_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Delete_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Delete_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterDelete_stmt(s)
	}
}

func (s *Delete_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitDelete_stmt(s)
	}
}

func (s *Delete_stmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitDelete_stmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Delete_stmt() (localctx IDelete_stmtContext) {
	localctx = NewDelete_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 48, SQLiteParserRULE_delete_stmt)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(733)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserWITH_ {
		{
			p.SetState(732)
			p.With_clause()
		}

	}
	{
		p.SetState(735)
		p.Match(SQLiteParserDELETE_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(736)
		p.Match(SQLiteParserFROM_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(737)
		p.Qualified_table_name()
	}
	p.SetState(739)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserWHERE_ {
		{
			p.SetState(738)
			p.Where_stmt()
		}

	}
	p.SetState(742)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserRETURNING_ {
		{
			p.SetState(741)
			p.Returning_clause()
		}

	}
	p.SetState(748)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserLIMIT_ || _la == SQLiteParserORDER_ {
		p.SetState(745)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserORDER_ {
			{
				p.SetState(744)
				p.Order_by_stmt()
			}

		}
		{
			p.SetState(747)
			p.Limit_stmt()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDetach_stmtContext is an interface to support dynamic dispatch.
type IDetach_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	DETACH_() antlr.TerminalNode
	Schema_name() ISchema_nameContext
	DATABASE_() antlr.TerminalNode

	// IsDetach_stmtContext differentiates from other interfaces.
	IsDetach_stmtContext()
}

type Detach_stmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDetach_stmtContext() *Detach_stmtContext {
	var p = new(Detach_stmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_detach_stmt
	return p
}

func InitEmptyDetach_stmtContext(p *Detach_stmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_detach_stmt
}

func (*Detach_stmtContext) IsDetach_stmtContext() {}

func NewDetach_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Detach_stmtContext {
	var p = new(Detach_stmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_detach_stmt

	return p
}

func (s *Detach_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Detach_stmtContext) DETACH_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDETACH_, 0)
}

func (s *Detach_stmtContext) Schema_name() ISchema_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISchema_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISchema_nameContext)
}

func (s *Detach_stmtContext) DATABASE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDATABASE_, 0)
}

func (s *Detach_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Detach_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Detach_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterDetach_stmt(s)
	}
}

func (s *Detach_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitDetach_stmt(s)
	}
}

func (s *Detach_stmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitDetach_stmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Detach_stmt() (localctx IDetach_stmtContext) {
	localctx = NewDetach_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 50, SQLiteParserRULE_detach_stmt)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(750)
		p.Match(SQLiteParserDETACH_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(752)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserDATABASE_ {
		{
			p.SetState(751)
			p.Match(SQLiteParserDATABASE_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(754)
		p.Schema_name()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDrop_stmtContext is an interface to support dynamic dispatch.
type IDrop_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetObject returns the object token.
	GetObject() antlr.Token

	// SetObject sets the object token.
	SetObject(antlr.Token)

	// Getter signatures
	DROP_() antlr.TerminalNode
	Identifier() IIdentifierContext
	INDEX_() antlr.TerminalNode
	TABLE_() antlr.TerminalNode
	TRIGGER_() antlr.TerminalNode
	VIEW_() antlr.TerminalNode
	IF_() antlr.TerminalNode
	EXISTS_() antlr.TerminalNode
	Schema_name() ISchema_nameContext
	DOT() antlr.TerminalNode

	// IsDrop_stmtContext differentiates from other interfaces.
	IsDrop_stmtContext()
}

type Drop_stmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	object antlr.Token
}

func NewEmptyDrop_stmtContext() *Drop_stmtContext {
	var p = new(Drop_stmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_drop_stmt
	return p
}

func InitEmptyDrop_stmtContext(p *Drop_stmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_drop_stmt
}

func (*Drop_stmtContext) IsDrop_stmtContext() {}

func NewDrop_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_stmtContext {
	var p = new(Drop_stmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_drop_stmt

	return p
}

func (s *Drop_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_stmtContext) GetObject() antlr.Token { return s.object }

func (s *Drop_stmtContext) SetObject(v antlr.Token) { s.object = v }

func (s *Drop_stmtContext) DROP_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDROP_, 0)
}

func (s *Drop_stmtContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Drop_stmtContext) INDEX_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserINDEX_, 0)
}

func (s *Drop_stmtContext) TABLE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserTABLE_, 0)
}

func (s *Drop_stmtContext) TRIGGER_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserTRIGGER_, 0)
}

func (s *Drop_stmtContext) VIEW_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserVIEW_, 0)
}

func (s *Drop_stmtContext) IF_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserIF_, 0)
}

func (s *Drop_stmtContext) EXISTS_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserEXISTS_, 0)
}

func (s *Drop_stmtContext) Schema_name() ISchema_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISchema_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISchema_nameContext)
}

func (s *Drop_stmtContext) DOT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDOT, 0)
}

func (s *Drop_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterDrop_stmt(s)
	}
}

func (s *Drop_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitDrop_stmt(s)
	}
}

func (s *Drop_stmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitDrop_stmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Drop_stmt() (localctx IDrop_stmtContext) {
	localctx = NewDrop_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 52, SQLiteParserRULE_drop_stmt)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(756)
		p.Match(SQLiteParserDROP_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(757)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*Drop_stmtContext).object = _lt

		_la = p.GetTokenStream().LA(1)

		if !((int64((_la-86)) & ^0x3f) == 0 && ((int64(1)<<(_la-86))&4648277765399773185) != 0) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*Drop_stmtContext).object = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(760)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserIF_ {
		{
			p.SetState(758)
			p.Match(SQLiteParserIF_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(759)
			p.Match(SQLiteParserEXISTS_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(765)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 97, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(762)
			p.Schema_name()
		}
		{
			p.SetState(763)
			p.Match(SQLiteParserDOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	{
		p.SetState(767)
		p.Identifier()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IExprContext is an interface to support dynamic dispatch.
type IExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsExprContext differentiates from other interfaces.
	IsExprContext()
}

type ExprContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExprContext() *ExprContext {
	var p = new(ExprContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_expr
	return p
}

func InitEmptyExprContext(p *ExprContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_expr
}

func (*ExprContext) IsExprContext() {}

func NewExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExprContext {
	var p = new(ExprContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_expr

	return p
}

func (s *ExprContext) GetParser() antlr.Parser { return s.parser }

func (s *ExprContext) CopyAll(ctx *ExprContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *ExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type Expr_caseContext struct {
	ExprContext
	_expr     IExprContext
	condition []IExprContext
	val       []IExprContext
}

func NewExpr_caseContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Expr_caseContext {
	var p = new(Expr_caseContext)

	InitEmptyExprContext(&p.ExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprContext))

	return p
}

func (s *Expr_caseContext) Get_expr() IExprContext { return s._expr }

func (s *Expr_caseContext) Set_expr(v IExprContext) { s._expr = v }

func (s *Expr_caseContext) GetCondition() []IExprContext { return s.condition }

func (s *Expr_caseContext) GetVal() []IExprContext { return s.val }

func (s *Expr_caseContext) SetCondition(v []IExprContext) { s.condition = v }

func (s *Expr_caseContext) SetVal(v []IExprContext) { s.val = v }

func (s *Expr_caseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expr_caseContext) CASE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCASE_, 0)
}

func (s *Expr_caseContext) END_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserEND_, 0)
}

func (s *Expr_caseContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *Expr_caseContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Expr_caseContext) AllWHEN_() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserWHEN_)
}

func (s *Expr_caseContext) WHEN_(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserWHEN_, i)
}

func (s *Expr_caseContext) AllTHEN_() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserTHEN_)
}

func (s *Expr_caseContext) THEN_(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserTHEN_, i)
}

func (s *Expr_caseContext) ELSE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserELSE_, 0)
}

func (s *Expr_caseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterExpr_case(s)
	}
}

func (s *Expr_caseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitExpr_case(s)
	}
}

func (s *Expr_caseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitExpr_case(s)

	default:
		return t.VisitChildren(s)
	}
}

type Expr_arithmeticContext struct {
	ExprContext
	lhs      IExprContext
	operator antlr.Token
	rhs      IExprContext
}

func NewExpr_arithmeticContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Expr_arithmeticContext {
	var p = new(Expr_arithmeticContext)

	InitEmptyExprContext(&p.ExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprContext))

	return p
}

func (s *Expr_arithmeticContext) GetOperator() antlr.Token { return s.operator }

func (s *Expr_arithmeticContext) SetOperator(v antlr.Token) { s.operator = v }

func (s *Expr_arithmeticContext) GetLhs() IExprContext { return s.lhs }

func (s *Expr_arithmeticContext) GetRhs() IExprContext { return s.rhs }

func (s *Expr_arithmeticContext) SetLhs(v IExprContext) { s.lhs = v }

func (s *Expr_arithmeticContext) SetRhs(v IExprContext) { s.rhs = v }

func (s *Expr_arithmeticContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expr_arithmeticContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *Expr_arithmeticContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Expr_arithmeticContext) STAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserSTAR, 0)
}

func (s *Expr_arithmeticContext) DIV() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDIV, 0)
}

func (s *Expr_arithmeticContext) PLUS() antlr.TerminalNode {
	return s.GetToken(SQLiteParserPLUS, 0)
}

func (s *Expr_arithmeticContext) MINUS() antlr.TerminalNode {
	return s.GetToken(SQLiteParserMINUS, 0)
}

func (s *Expr_arithmeticContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterExpr_arithmetic(s)
	}
}

func (s *Expr_arithmeticContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitExpr_arithmetic(s)
	}
}

func (s *Expr_arithmeticContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitExpr_arithmetic(s)

	default:
		return t.VisitChildren(s)
	}
}

type Expr_aggregate_funcContext struct {
	ExprContext
}

func NewExpr_aggregate_funcContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Expr_aggregate_funcContext {
	var p = new(Expr_aggregate_funcContext)

	InitEmptyExprContext(&p.ExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprContext))

	return p
}

func (s *Expr_aggregate_funcContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expr_aggregate_funcContext) Aggregate_func() IAggregate_funcContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAggregate_funcContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAggregate_funcContext)
}

func (s *Expr_aggregate_funcContext) OPEN_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserOPEN_PAR, 0)
}

func (s *Expr_aggregate_funcContext) CLOSE_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCLOSE_PAR, 0)
}

func (s *Expr_aggregate_funcContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *Expr_aggregate_funcContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Expr_aggregate_funcContext) STAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserSTAR, 0)
}

func (s *Expr_aggregate_funcContext) Filter_clause() IFilter_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFilter_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFilter_clauseContext)
}

func (s *Expr_aggregate_funcContext) DISTINCT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDISTINCT_, 0)
}

func (s *Expr_aggregate_funcContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserCOMMA)
}

func (s *Expr_aggregate_funcContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, i)
}

func (s *Expr_aggregate_funcContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterExpr_aggregate_func(s)
	}
}

func (s *Expr_aggregate_funcContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitExpr_aggregate_func(s)
	}
}

func (s *Expr_aggregate_funcContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitExpr_aggregate_func(s)

	default:
		return t.VisitChildren(s)
	}
}

type Expr_json_extract_stringContext struct {
	ExprContext
	lhs IExprContext
	rhs IExprContext
}

func NewExpr_json_extract_stringContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Expr_json_extract_stringContext {
	var p = new(Expr_json_extract_stringContext)

	InitEmptyExprContext(&p.ExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprContext))

	return p
}

func (s *Expr_json_extract_stringContext) GetLhs() IExprContext { return s.lhs }

func (s *Expr_json_extract_stringContext) GetRhs() IExprContext { return s.rhs }

func (s *Expr_json_extract_stringContext) SetLhs(v IExprContext) { s.lhs = v }

func (s *Expr_json_extract_stringContext) SetRhs(v IExprContext) { s.rhs = v }

func (s *Expr_json_extract_stringContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expr_json_extract_stringContext) PTR2() antlr.TerminalNode {
	return s.GetToken(SQLiteParserPTR2, 0)
}

func (s *Expr_json_extract_stringContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *Expr_json_extract_stringContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Expr_json_extract_stringContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterExpr_json_extract_string(s)
	}
}

func (s *Expr_json_extract_stringContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitExpr_json_extract_string(s)
	}
}

func (s *Expr_json_extract_stringContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitExpr_json_extract_string(s)

	default:
		return t.VisitChildren(s)
	}
}

type Expr_raiseContext struct {
	ExprContext
}

func NewExpr_raiseContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Expr_raiseContext {
	var p = new(Expr_raiseContext)

	InitEmptyExprContext(&p.ExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprContext))

	return p
}

func (s *Expr_raiseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expr_raiseContext) Raise_function() IRaise_functionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRaise_functionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRaise_functionContext)
}

func (s *Expr_raiseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterExpr_raise(s)
	}
}

func (s *Expr_raiseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitExpr_raise(s)
	}
}

func (s *Expr_raiseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitExpr_raise(s)

	default:
		return t.VisitChildren(s)
	}
}

type Expr_boolContext struct {
	ExprContext
	lhs      IExprContext
	operator antlr.Token
	rhs      IExprContext
}

func NewExpr_boolContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Expr_boolContext {
	var p = new(Expr_boolContext)

	InitEmptyExprContext(&p.ExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprContext))

	return p
}

func (s *Expr_boolContext) GetOperator() antlr.Token { return s.operator }

func (s *Expr_boolContext) SetOperator(v antlr.Token) { s.operator = v }

func (s *Expr_boolContext) GetLhs() IExprContext { return s.lhs }

func (s *Expr_boolContext) GetRhs() IExprContext { return s.rhs }

func (s *Expr_boolContext) SetLhs(v IExprContext) { s.lhs = v }

func (s *Expr_boolContext) SetRhs(v IExprContext) { s.rhs = v }

func (s *Expr_boolContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expr_boolContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *Expr_boolContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Expr_boolContext) AND_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserAND_, 0)
}

func (s *Expr_boolContext) OR_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserOR_, 0)
}

func (s *Expr_boolContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterExpr_bool(s)
	}
}

func (s *Expr_boolContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitExpr_bool(s)
	}
}

func (s *Expr_boolContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitExpr_bool(s)

	default:
		return t.VisitChildren(s)
	}
}

type Expr_isContext struct {
	ExprContext
	lhs IExprContext
	rhs IExprContext
}

func NewExpr_isContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Expr_isContext {
	var p = new(Expr_isContext)

	InitEmptyExprContext(&p.ExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprContext))

	return p
}

func (s *Expr_isContext) GetLhs() IExprContext { return s.lhs }

func (s *Expr_isContext) GetRhs() IExprContext { return s.rhs }

func (s *Expr_isContext) SetLhs(v IExprContext) { s.lhs = v }

func (s *Expr_isContext) SetRhs(v IExprContext) { s.rhs = v }

func (s *Expr_isContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expr_isContext) IS_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserIS_, 0)
}

func (s *Expr_isContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *Expr_isContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Expr_isContext) NOT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserNOT_, 0)
}

func (s *Expr_isContext) DISTINCT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDISTINCT_, 0)
}

func (s *Expr_isContext) FROM_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserFROM_, 0)
}

func (s *Expr_isContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterExpr_is(s)
	}
}

func (s *Expr_isContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitExpr_is(s)
	}
}

func (s *Expr_isContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitExpr_is(s)

	default:
		return t.VisitChildren(s)
	}
}

type Expr_concatContext struct {
	ExprContext
	lhs IExprContext
	rhs IExprContext
}

func NewExpr_concatContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Expr_concatContext {
	var p = new(Expr_concatContext)

	InitEmptyExprContext(&p.ExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprContext))

	return p
}

func (s *Expr_concatContext) GetLhs() IExprContext { return s.lhs }

func (s *Expr_concatContext) GetRhs() IExprContext { return s.rhs }

func (s *Expr_concatContext) SetLhs(v IExprContext) { s.lhs = v }

func (s *Expr_concatContext) SetRhs(v IExprContext) { s.rhs = v }

func (s *Expr_concatContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expr_concatContext) PIPE2() antlr.TerminalNode {
	return s.GetToken(SQLiteParserPIPE2, 0)
}

func (s *Expr_concatContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *Expr_concatContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Expr_concatContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterExpr_concat(s)
	}
}

func (s *Expr_concatContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitExpr_concat(s)
	}
}

func (s *Expr_concatContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitExpr_concat(s)

	default:
		return t.VisitChildren(s)
	}
}

type Expr_listContext struct {
	ExprContext
}

func NewExpr_listContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Expr_listContext {
	var p = new(Expr_listContext)

	InitEmptyExprContext(&p.ExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprContext))

	return p
}

func (s *Expr_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expr_listContext) OPEN_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserOPEN_PAR, 0)
}

func (s *Expr_listContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *Expr_listContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Expr_listContext) CLOSE_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCLOSE_PAR, 0)
}

func (s *Expr_listContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserCOMMA)
}

func (s *Expr_listContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, i)
}

func (s *Expr_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterExpr_list(s)
	}
}

func (s *Expr_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitExpr_list(s)
	}
}

func (s *Expr_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitExpr_list(s)

	default:
		return t.VisitChildren(s)
	}
}

type Expr_inContext struct {
	ExprContext
	lhs     IExprContext
	rhsExpr IExprContext
}

func NewExpr_inContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Expr_inContext {
	var p = new(Expr_inContext)

	InitEmptyExprContext(&p.ExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprContext))

	return p
}

func (s *Expr_inContext) GetLhs() IExprContext { return s.lhs }

func (s *Expr_inContext) GetRhsExpr() IExprContext { return s.rhsExpr }

func (s *Expr_inContext) SetLhs(v IExprContext) { s.lhs = v }

func (s *Expr_inContext) SetRhsExpr(v IExprContext) { s.rhsExpr = v }

func (s *Expr_inContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expr_inContext) IN_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserIN_, 0)
}

func (s *Expr_inContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *Expr_inContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Expr_inContext) OPEN_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserOPEN_PAR, 0)
}

func (s *Expr_inContext) CLOSE_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCLOSE_PAR, 0)
}

func (s *Expr_inContext) Table_name() ITable_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Expr_inContext) Table_function_name() ITable_function_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_function_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_function_nameContext)
}

func (s *Expr_inContext) NOT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserNOT_, 0)
}

func (s *Expr_inContext) Select_stmt() ISelect_stmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelect_stmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelect_stmtContext)
}

func (s *Expr_inContext) Schema_name() ISchema_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISchema_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISchema_nameContext)
}

func (s *Expr_inContext) DOT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDOT, 0)
}

func (s *Expr_inContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserCOMMA)
}

func (s *Expr_inContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, i)
}

func (s *Expr_inContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterExpr_in(s)
	}
}

func (s *Expr_inContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitExpr_in(s)
	}
}

func (s *Expr_inContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitExpr_in(s)

	default:
		return t.VisitChildren(s)
	}
}

type Expr_collateContext struct {
	ExprContext
}

func NewExpr_collateContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Expr_collateContext {
	var p = new(Expr_collateContext)

	InitEmptyExprContext(&p.ExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprContext))

	return p
}

func (s *Expr_collateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expr_collateContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Expr_collateContext) COLLATE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOLLATE_, 0)
}

func (s *Expr_collateContext) Collation_name() ICollation_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICollation_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICollation_nameContext)
}

func (s *Expr_collateContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterExpr_collate(s)
	}
}

func (s *Expr_collateContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitExpr_collate(s)
	}
}

func (s *Expr_collateContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitExpr_collate(s)

	default:
		return t.VisitChildren(s)
	}
}

type Expr_moduloContext struct {
	ExprContext
	lhs IExprContext
	rhs IExprContext
}

func NewExpr_moduloContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Expr_moduloContext {
	var p = new(Expr_moduloContext)

	InitEmptyExprContext(&p.ExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprContext))

	return p
}

func (s *Expr_moduloContext) GetLhs() IExprContext { return s.lhs }

func (s *Expr_moduloContext) GetRhs() IExprContext { return s.rhs }

func (s *Expr_moduloContext) SetLhs(v IExprContext) { s.lhs = v }

func (s *Expr_moduloContext) SetRhs(v IExprContext) { s.rhs = v }

func (s *Expr_moduloContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expr_moduloContext) MOD() antlr.TerminalNode {
	return s.GetToken(SQLiteParserMOD, 0)
}

func (s *Expr_moduloContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *Expr_moduloContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Expr_moduloContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterExpr_modulo(s)
	}
}

func (s *Expr_moduloContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitExpr_modulo(s)
	}
}

func (s *Expr_moduloContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitExpr_modulo(s)

	default:
		return t.VisitChildren(s)
	}
}

type Expr_qualified_column_nameContext struct {
	ExprContext
}

func NewExpr_qualified_column_nameContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Expr_qualified_column_nameContext {
	var p = new(Expr_qualified_column_nameContext)

	InitEmptyExprContext(&p.ExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprContext))

	return p
}

func (s *Expr_qualified_column_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expr_qualified_column_nameContext) Column_name() IColumn_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *Expr_qualified_column_nameContext) Table_name() ITable_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Expr_qualified_column_nameContext) AllDOT() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserDOT)
}

func (s *Expr_qualified_column_nameContext) DOT(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserDOT, i)
}

func (s *Expr_qualified_column_nameContext) Schema_name() ISchema_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISchema_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISchema_nameContext)
}

func (s *Expr_qualified_column_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterExpr_qualified_column_name(s)
	}
}

func (s *Expr_qualified_column_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitExpr_qualified_column_name(s)
	}
}

func (s *Expr_qualified_column_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitExpr_qualified_column_name(s)

	default:
		return t.VisitChildren(s)
	}
}

type Expr_matchContext struct {
	ExprContext
	lhs IExprContext
	rhs IExprContext
}

func NewExpr_matchContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Expr_matchContext {
	var p = new(Expr_matchContext)

	InitEmptyExprContext(&p.ExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprContext))

	return p
}

func (s *Expr_matchContext) GetLhs() IExprContext { return s.lhs }

func (s *Expr_matchContext) GetRhs() IExprContext { return s.rhs }

func (s *Expr_matchContext) SetLhs(v IExprContext) { s.lhs = v }

func (s *Expr_matchContext) SetRhs(v IExprContext) { s.rhs = v }

func (s *Expr_matchContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expr_matchContext) MATCH_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserMATCH_, 0)
}

func (s *Expr_matchContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *Expr_matchContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Expr_matchContext) NOT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserNOT_, 0)
}

func (s *Expr_matchContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterExpr_match(s)
	}
}

func (s *Expr_matchContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitExpr_match(s)
	}
}

func (s *Expr_matchContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitExpr_match(s)

	default:
		return t.VisitChildren(s)
	}
}

type Expr_likeContext struct {
	ExprContext
	lhs    IExprContext
	rhs    IExprContext
	excape IExprContext
}

func NewExpr_likeContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Expr_likeContext {
	var p = new(Expr_likeContext)

	InitEmptyExprContext(&p.ExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprContext))

	return p
}

func (s *Expr_likeContext) GetLhs() IExprContext { return s.lhs }

func (s *Expr_likeContext) GetRhs() IExprContext { return s.rhs }

func (s *Expr_likeContext) GetExcape() IExprContext { return s.excape }

func (s *Expr_likeContext) SetLhs(v IExprContext) { s.lhs = v }

func (s *Expr_likeContext) SetRhs(v IExprContext) { s.rhs = v }

func (s *Expr_likeContext) SetExcape(v IExprContext) { s.excape = v }

func (s *Expr_likeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expr_likeContext) LIKE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserLIKE_, 0)
}

func (s *Expr_likeContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *Expr_likeContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Expr_likeContext) NOT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserNOT_, 0)
}

func (s *Expr_likeContext) ESCAPE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserESCAPE_, 0)
}

func (s *Expr_likeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterExpr_like(s)
	}
}

func (s *Expr_likeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitExpr_like(s)
	}
}

func (s *Expr_likeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitExpr_like(s)

	default:
		return t.VisitChildren(s)
	}
}

type Expr_null_compContext struct {
	ExprContext
}

func NewExpr_null_compContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Expr_null_compContext {
	var p = new(Expr_null_compContext)

	InitEmptyExprContext(&p.ExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprContext))

	return p
}

func (s *Expr_null_compContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expr_null_compContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Expr_null_compContext) ISNULL_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserISNULL_, 0)
}

func (s *Expr_null_compContext) NOTNULL_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserNOTNULL_, 0)
}

func (s *Expr_null_compContext) NOT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserNOT_, 0)
}

func (s *Expr_null_compContext) NULL_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserNULL_, 0)
}

func (s *Expr_null_compContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterExpr_null_comp(s)
	}
}

func (s *Expr_null_compContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitExpr_null_comp(s)
	}
}

func (s *Expr_null_compContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitExpr_null_comp(s)

	default:
		return t.VisitChildren(s)
	}
}

type Expr_json_extract_jsonContext struct {
	ExprContext
	lhs IExprContext
	rhs IExprContext
}

func NewExpr_json_extract_jsonContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Expr_json_extract_jsonContext {
	var p = new(Expr_json_extract_jsonContext)

	InitEmptyExprContext(&p.ExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprContext))

	return p
}

func (s *Expr_json_extract_jsonContext) GetLhs() IExprContext { return s.lhs }

func (s *Expr_json_extract_jsonContext) GetRhs() IExprContext { return s.rhs }

func (s *Expr_json_extract_jsonContext) SetLhs(v IExprContext) { s.lhs = v }

func (s *Expr_json_extract_jsonContext) SetRhs(v IExprContext) { s.rhs = v }

func (s *Expr_json_extract_jsonContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expr_json_extract_jsonContext) PTR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserPTR, 0)
}

func (s *Expr_json_extract_jsonContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *Expr_json_extract_jsonContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Expr_json_extract_jsonContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterExpr_json_extract_json(s)
	}
}

func (s *Expr_json_extract_jsonContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitExpr_json_extract_json(s)
	}
}

func (s *Expr_json_extract_jsonContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitExpr_json_extract_json(s)

	default:
		return t.VisitChildren(s)
	}
}

type Expr_window_funcContext struct {
	ExprContext
}

func NewExpr_window_funcContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Expr_window_funcContext {
	var p = new(Expr_window_funcContext)

	InitEmptyExprContext(&p.ExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprContext))

	return p
}

func (s *Expr_window_funcContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expr_window_funcContext) Window_func() IWindow_funcContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWindow_funcContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWindow_funcContext)
}

func (s *Expr_window_funcContext) OPEN_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserOPEN_PAR, 0)
}

func (s *Expr_window_funcContext) CLOSE_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCLOSE_PAR, 0)
}

func (s *Expr_window_funcContext) Over_clause() IOver_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOver_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOver_clauseContext)
}

func (s *Expr_window_funcContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *Expr_window_funcContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Expr_window_funcContext) STAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserSTAR, 0)
}

func (s *Expr_window_funcContext) Filter_clause() IFilter_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFilter_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFilter_clauseContext)
}

func (s *Expr_window_funcContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserCOMMA)
}

func (s *Expr_window_funcContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, i)
}

func (s *Expr_window_funcContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterExpr_window_func(s)
	}
}

func (s *Expr_window_funcContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitExpr_window_func(s)
	}
}

func (s *Expr_window_funcContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitExpr_window_func(s)

	default:
		return t.VisitChildren(s)
	}
}

type Expr_exists_selectContext struct {
	ExprContext
}

func NewExpr_exists_selectContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Expr_exists_selectContext {
	var p = new(Expr_exists_selectContext)

	InitEmptyExprContext(&p.ExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprContext))

	return p
}

func (s *Expr_exists_selectContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expr_exists_selectContext) OPEN_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserOPEN_PAR, 0)
}

func (s *Expr_exists_selectContext) Select_stmt() ISelect_stmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelect_stmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelect_stmtContext)
}

func (s *Expr_exists_selectContext) CLOSE_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCLOSE_PAR, 0)
}

func (s *Expr_exists_selectContext) EXISTS_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserEXISTS_, 0)
}

func (s *Expr_exists_selectContext) NOT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserNOT_, 0)
}

func (s *Expr_exists_selectContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterExpr_exists_select(s)
	}
}

func (s *Expr_exists_selectContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitExpr_exists_select(s)
	}
}

func (s *Expr_exists_selectContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitExpr_exists_select(s)

	default:
		return t.VisitChildren(s)
	}
}

type Expr_comparisonContext struct {
	ExprContext
	lhs      IExprContext
	operator antlr.Token
	rhs      IExprContext
}

func NewExpr_comparisonContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Expr_comparisonContext {
	var p = new(Expr_comparisonContext)

	InitEmptyExprContext(&p.ExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprContext))

	return p
}

func (s *Expr_comparisonContext) GetOperator() antlr.Token { return s.operator }

func (s *Expr_comparisonContext) SetOperator(v antlr.Token) { s.operator = v }

func (s *Expr_comparisonContext) GetLhs() IExprContext { return s.lhs }

func (s *Expr_comparisonContext) GetRhs() IExprContext { return s.rhs }

func (s *Expr_comparisonContext) SetLhs(v IExprContext) { s.lhs = v }

func (s *Expr_comparisonContext) SetRhs(v IExprContext) { s.rhs = v }

func (s *Expr_comparisonContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expr_comparisonContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *Expr_comparisonContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Expr_comparisonContext) EQ() antlr.TerminalNode {
	return s.GetToken(SQLiteParserEQ, 0)
}

func (s *Expr_comparisonContext) EQ2() antlr.TerminalNode {
	return s.GetToken(SQLiteParserEQ2, 0)
}

func (s *Expr_comparisonContext) NOT_EQ1() antlr.TerminalNode {
	return s.GetToken(SQLiteParserNOT_EQ1, 0)
}

func (s *Expr_comparisonContext) NOT_EQ2() antlr.TerminalNode {
	return s.GetToken(SQLiteParserNOT_EQ2, 0)
}

func (s *Expr_comparisonContext) LT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserLT, 0)
}

func (s *Expr_comparisonContext) LTE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserLTE, 0)
}

func (s *Expr_comparisonContext) GT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserGT, 0)
}

func (s *Expr_comparisonContext) GTE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserGTE, 0)
}

func (s *Expr_comparisonContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterExpr_comparison(s)
	}
}

func (s *Expr_comparisonContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitExpr_comparison(s)
	}
}

func (s *Expr_comparisonContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitExpr_comparison(s)

	default:
		return t.VisitChildren(s)
	}
}

type Expr_literalContext struct {
	ExprContext
}

func NewExpr_literalContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Expr_literalContext {
	var p = new(Expr_literalContext)

	InitEmptyExprContext(&p.ExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprContext))

	return p
}

func (s *Expr_literalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expr_literalContext) Literal_value() ILiteral_valueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILiteral_valueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILiteral_valueContext)
}

func (s *Expr_literalContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterExpr_literal(s)
	}
}

func (s *Expr_literalContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitExpr_literal(s)
	}
}

func (s *Expr_literalContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitExpr_literal(s)

	default:
		return t.VisitChildren(s)
	}
}

type Expr_castContext struct {
	ExprContext
}

func NewExpr_castContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Expr_castContext {
	var p = new(Expr_castContext)

	InitEmptyExprContext(&p.ExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprContext))

	return p
}

func (s *Expr_castContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expr_castContext) CAST_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCAST_, 0)
}

func (s *Expr_castContext) OPEN_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserOPEN_PAR, 0)
}

func (s *Expr_castContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Expr_castContext) AS_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserAS_, 0)
}

func (s *Expr_castContext) Type_name() IType_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IType_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IType_nameContext)
}

func (s *Expr_castContext) CLOSE_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCLOSE_PAR, 0)
}

func (s *Expr_castContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterExpr_cast(s)
	}
}

func (s *Expr_castContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitExpr_cast(s)
	}
}

func (s *Expr_castContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitExpr_cast(s)

	default:
		return t.VisitChildren(s)
	}
}

type Expr_string_opContext struct {
	ExprContext
	lhs      IExprContext
	operator antlr.Token
	rhs      IExprContext
}

func NewExpr_string_opContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Expr_string_opContext {
	var p = new(Expr_string_opContext)

	InitEmptyExprContext(&p.ExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprContext))

	return p
}

func (s *Expr_string_opContext) GetOperator() antlr.Token { return s.operator }

func (s *Expr_string_opContext) SetOperator(v antlr.Token) { s.operator = v }

func (s *Expr_string_opContext) GetLhs() IExprContext { return s.lhs }

func (s *Expr_string_opContext) GetRhs() IExprContext { return s.rhs }

func (s *Expr_string_opContext) SetLhs(v IExprContext) { s.lhs = v }

func (s *Expr_string_opContext) SetRhs(v IExprContext) { s.rhs = v }

func (s *Expr_string_opContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expr_string_opContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *Expr_string_opContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Expr_string_opContext) GLOB_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserGLOB_, 0)
}

func (s *Expr_string_opContext) REGEXP_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserREGEXP_, 0)
}

func (s *Expr_string_opContext) NOT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserNOT_, 0)
}

func (s *Expr_string_opContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterExpr_string_op(s)
	}
}

func (s *Expr_string_opContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitExpr_string_op(s)
	}
}

func (s *Expr_string_opContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitExpr_string_op(s)

	default:
		return t.VisitChildren(s)
	}
}

type Expr_betweenContext struct {
	ExprContext
	lhs  IExprContext
	from IExprContext
	to   IExprContext
}

func NewExpr_betweenContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Expr_betweenContext {
	var p = new(Expr_betweenContext)

	InitEmptyExprContext(&p.ExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprContext))

	return p
}

func (s *Expr_betweenContext) GetLhs() IExprContext { return s.lhs }

func (s *Expr_betweenContext) GetFrom() IExprContext { return s.from }

func (s *Expr_betweenContext) GetTo() IExprContext { return s.to }

func (s *Expr_betweenContext) SetLhs(v IExprContext) { s.lhs = v }

func (s *Expr_betweenContext) SetFrom(v IExprContext) { s.from = v }

func (s *Expr_betweenContext) SetTo(v IExprContext) { s.to = v }

func (s *Expr_betweenContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expr_betweenContext) BETWEEN_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserBETWEEN_, 0)
}

func (s *Expr_betweenContext) AND_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserAND_, 0)
}

func (s *Expr_betweenContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *Expr_betweenContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Expr_betweenContext) NOT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserNOT_, 0)
}

func (s *Expr_betweenContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterExpr_between(s)
	}
}

func (s *Expr_betweenContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitExpr_between(s)
	}
}

func (s *Expr_betweenContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitExpr_between(s)

	default:
		return t.VisitChildren(s)
	}
}

type Expr_bitwiseContext struct {
	ExprContext
	lhs      IExprContext
	operator antlr.Token
	rhs      IExprContext
}

func NewExpr_bitwiseContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Expr_bitwiseContext {
	var p = new(Expr_bitwiseContext)

	InitEmptyExprContext(&p.ExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprContext))

	return p
}

func (s *Expr_bitwiseContext) GetOperator() antlr.Token { return s.operator }

func (s *Expr_bitwiseContext) SetOperator(v antlr.Token) { s.operator = v }

func (s *Expr_bitwiseContext) GetLhs() IExprContext { return s.lhs }

func (s *Expr_bitwiseContext) GetRhs() IExprContext { return s.rhs }

func (s *Expr_bitwiseContext) SetLhs(v IExprContext) { s.lhs = v }

func (s *Expr_bitwiseContext) SetRhs(v IExprContext) { s.rhs = v }

func (s *Expr_bitwiseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expr_bitwiseContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *Expr_bitwiseContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Expr_bitwiseContext) LT2() antlr.TerminalNode {
	return s.GetToken(SQLiteParserLT2, 0)
}

func (s *Expr_bitwiseContext) GT2() antlr.TerminalNode {
	return s.GetToken(SQLiteParserGT2, 0)
}

func (s *Expr_bitwiseContext) AMP() antlr.TerminalNode {
	return s.GetToken(SQLiteParserAMP, 0)
}

func (s *Expr_bitwiseContext) PIPE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserPIPE, 0)
}

func (s *Expr_bitwiseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterExpr_bitwise(s)
	}
}

func (s *Expr_bitwiseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitExpr_bitwise(s)
	}
}

func (s *Expr_bitwiseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitExpr_bitwise(s)

	default:
		return t.VisitChildren(s)
	}
}

type Expr_simple_funcContext struct {
	ExprContext
}

func NewExpr_simple_funcContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Expr_simple_funcContext {
	var p = new(Expr_simple_funcContext)

	InitEmptyExprContext(&p.ExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprContext))

	return p
}

func (s *Expr_simple_funcContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expr_simple_funcContext) Simple_func() ISimple_funcContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISimple_funcContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISimple_funcContext)
}

func (s *Expr_simple_funcContext) OPEN_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserOPEN_PAR, 0)
}

func (s *Expr_simple_funcContext) CLOSE_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCLOSE_PAR, 0)
}

func (s *Expr_simple_funcContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *Expr_simple_funcContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Expr_simple_funcContext) STAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserSTAR, 0)
}

func (s *Expr_simple_funcContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserCOMMA)
}

func (s *Expr_simple_funcContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, i)
}

func (s *Expr_simple_funcContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterExpr_simple_func(s)
	}
}

func (s *Expr_simple_funcContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitExpr_simple_func(s)
	}
}

func (s *Expr_simple_funcContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitExpr_simple_func(s)

	default:
		return t.VisitChildren(s)
	}
}

type Expr_unaryContext struct {
	ExprContext
}

func NewExpr_unaryContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Expr_unaryContext {
	var p = new(Expr_unaryContext)

	InitEmptyExprContext(&p.ExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprContext))

	return p
}

func (s *Expr_unaryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expr_unaryContext) Unary_operator() IUnary_operatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnary_operatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnary_operatorContext)
}

func (s *Expr_unaryContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Expr_unaryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterExpr_unary(s)
	}
}

func (s *Expr_unaryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitExpr_unary(s)
	}
}

func (s *Expr_unaryContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitExpr_unary(s)

	default:
		return t.VisitChildren(s)
	}
}

type Expr_bindContext struct {
	ExprContext
}

func NewExpr_bindContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *Expr_bindContext {
	var p = new(Expr_bindContext)

	InitEmptyExprContext(&p.ExprContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExprContext))

	return p
}

func (s *Expr_bindContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expr_bindContext) NUMBERED_BIND_PARAMETER() antlr.TerminalNode {
	return s.GetToken(SQLiteParserNUMBERED_BIND_PARAMETER, 0)
}

func (s *Expr_bindContext) NAMED_BIND_PARAMETER() antlr.TerminalNode {
	return s.GetToken(SQLiteParserNAMED_BIND_PARAMETER, 0)
}

func (s *Expr_bindContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterExpr_bind(s)
	}
}

func (s *Expr_bindContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitExpr_bind(s)
	}
}

func (s *Expr_bindContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitExpr_bind(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Expr() (localctx IExprContext) {
	return p.expr(0)
}

func (p *SQLiteParser) expr(_p int) (localctx IExprContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewExprContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IExprContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 54
	p.EnterRecursionRule(localctx, 54, SQLiteParserRULE_expr, _p)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(889)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 115, p.GetParserRuleContext()) {
	case 1:
		localctx = NewExpr_listContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx

		{
			p.SetState(770)
			p.Match(SQLiteParserOPEN_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(771)
			p.expr(0)
		}
		p.SetState(776)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == SQLiteParserCOMMA {
			{
				p.SetState(772)
				p.Match(SQLiteParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(773)
				p.expr(0)
			}

			p.SetState(778)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(779)
			p.Match(SQLiteParserCLOSE_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		localctx = NewExpr_literalContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(781)
			p.Literal_value()
		}

	case 3:
		localctx = NewExpr_bindContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(782)
			p.Match(SQLiteParserNUMBERED_BIND_PARAMETER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 4:
		localctx = NewExpr_bindContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(783)
			p.Match(SQLiteParserNAMED_BIND_PARAMETER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 5:
		localctx = NewExpr_qualified_column_nameContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		p.SetState(792)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 100, p.GetParserRuleContext()) == 1 {
			p.SetState(787)
			p.GetErrorHandler().Sync(p)

			if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 99, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(784)
					p.Schema_name()
				}
				{
					p.SetState(785)
					p.Match(SQLiteParserDOT)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			} else if p.HasError() { // JIM
				goto errorExit
			}
			{
				p.SetState(789)
				p.Table_name()
			}
			{
				p.SetState(790)
				p.Match(SQLiteParserDOT)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		{
			p.SetState(794)
			p.Column_name()
		}

	case 6:
		localctx = NewExpr_unaryContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(795)
			p.Unary_operator()
		}
		{
			p.SetState(796)
			p.expr(24)
		}

	case 7:
		localctx = NewExpr_simple_funcContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(798)
			p.Simple_func()
		}
		{
			p.SetState(799)
			p.Match(SQLiteParserOPEN_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(809)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetTokenStream().LA(1) {
		case SQLiteParserOPEN_PAR, SQLiteParserPLUS, SQLiteParserMINUS, SQLiteParserTILDE, SQLiteParserCASE_, SQLiteParserCAST_, SQLiteParserCURRENT_DATE_, SQLiteParserCURRENT_TIME_, SQLiteParserCURRENT_TIMESTAMP_, SQLiteParserEXISTS_, SQLiteParserNOT_, SQLiteParserNULL_, SQLiteParserRAISE_, SQLiteParserLEAD_, SQLiteParserTRUE_, SQLiteParserFALSE_, SQLiteParserIDENTIFIER, SQLiteParserNUMERIC_LITERAL, SQLiteParserNUMBERED_BIND_PARAMETER, SQLiteParserNAMED_BIND_PARAMETER, SQLiteParserSTRING_LITERAL, SQLiteParserBLOB_LITERAL:
			{
				p.SetState(800)
				p.expr(0)
			}
			p.SetState(805)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			for _la == SQLiteParserCOMMA {
				{
					p.SetState(801)
					p.Match(SQLiteParserCOMMA)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(802)
					p.expr(0)
				}

				p.SetState(807)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)
			}

		case SQLiteParserSTAR:
			{
				p.SetState(808)
				p.Match(SQLiteParserSTAR)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		default:
			p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			goto errorExit
		}
		{
			p.SetState(811)
			p.Match(SQLiteParserCLOSE_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 8:
		localctx = NewExpr_aggregate_funcContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(813)
			p.Aggregate_func()
		}
		{
			p.SetState(814)
			p.Match(SQLiteParserOPEN_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(827)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		switch p.GetTokenStream().LA(1) {
		case SQLiteParserOPEN_PAR, SQLiteParserPLUS, SQLiteParserMINUS, SQLiteParserTILDE, SQLiteParserCASE_, SQLiteParserCAST_, SQLiteParserCURRENT_DATE_, SQLiteParserCURRENT_TIME_, SQLiteParserCURRENT_TIMESTAMP_, SQLiteParserDISTINCT_, SQLiteParserEXISTS_, SQLiteParserNOT_, SQLiteParserNULL_, SQLiteParserRAISE_, SQLiteParserLEAD_, SQLiteParserTRUE_, SQLiteParserFALSE_, SQLiteParserIDENTIFIER, SQLiteParserNUMERIC_LITERAL, SQLiteParserNUMBERED_BIND_PARAMETER, SQLiteParserNAMED_BIND_PARAMETER, SQLiteParserSTRING_LITERAL, SQLiteParserBLOB_LITERAL:
			p.SetState(816)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			if _la == SQLiteParserDISTINCT_ {
				{
					p.SetState(815)
					p.Match(SQLiteParserDISTINCT_)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			{
				p.SetState(818)
				p.expr(0)
			}
			p.SetState(823)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			for _la == SQLiteParserCOMMA {
				{
					p.SetState(819)
					p.Match(SQLiteParserCOMMA)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(820)
					p.expr(0)
				}

				p.SetState(825)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)
			}

		case SQLiteParserSTAR:
			{
				p.SetState(826)
				p.Match(SQLiteParserSTAR)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		case SQLiteParserCLOSE_PAR:

		default:
		}
		{
			p.SetState(829)
			p.Match(SQLiteParserCLOSE_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(831)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 106, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(830)
				p.Filter_clause()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case 9:
		localctx = NewExpr_window_funcContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(833)
			p.Window_func()
		}
		{
			p.SetState(834)
			p.Match(SQLiteParserOPEN_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(844)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		switch p.GetTokenStream().LA(1) {
		case SQLiteParserOPEN_PAR, SQLiteParserPLUS, SQLiteParserMINUS, SQLiteParserTILDE, SQLiteParserCASE_, SQLiteParserCAST_, SQLiteParserCURRENT_DATE_, SQLiteParserCURRENT_TIME_, SQLiteParserCURRENT_TIMESTAMP_, SQLiteParserEXISTS_, SQLiteParserNOT_, SQLiteParserNULL_, SQLiteParserRAISE_, SQLiteParserLEAD_, SQLiteParserTRUE_, SQLiteParserFALSE_, SQLiteParserIDENTIFIER, SQLiteParserNUMERIC_LITERAL, SQLiteParserNUMBERED_BIND_PARAMETER, SQLiteParserNAMED_BIND_PARAMETER, SQLiteParserSTRING_LITERAL, SQLiteParserBLOB_LITERAL:
			{
				p.SetState(835)
				p.expr(0)
			}
			p.SetState(840)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			for _la == SQLiteParserCOMMA {
				{
					p.SetState(836)
					p.Match(SQLiteParserCOMMA)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(837)
					p.expr(0)
				}

				p.SetState(842)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)
			}

		case SQLiteParserSTAR:
			{
				p.SetState(843)
				p.Match(SQLiteParserSTAR)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		case SQLiteParserCLOSE_PAR:

		default:
		}
		{
			p.SetState(846)
			p.Match(SQLiteParserCLOSE_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(848)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserFILTER_ {
			{
				p.SetState(847)
				p.Filter_clause()
			}

		}
		{
			p.SetState(850)
			p.Over_clause()
		}

	case 10:
		localctx = NewExpr_castContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(852)
			p.Match(SQLiteParserCAST_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(853)
			p.Match(SQLiteParserOPEN_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(854)
			p.expr(0)
		}
		{
			p.SetState(855)
			p.Match(SQLiteParserAS_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(856)
			p.Type_name()
		}
		{
			p.SetState(857)
			p.Match(SQLiteParserCLOSE_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 11:
		localctx = NewExpr_exists_selectContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		p.SetState(863)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserEXISTS_ || _la == SQLiteParserNOT_ {
			p.SetState(860)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			if _la == SQLiteParserNOT_ {
				{
					p.SetState(859)
					p.Match(SQLiteParserNOT_)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			{
				p.SetState(862)
				p.Match(SQLiteParserEXISTS_)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(865)
			p.Match(SQLiteParserOPEN_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(866)
			p.Select_stmt()
		}
		{
			p.SetState(867)
			p.Match(SQLiteParserCLOSE_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 12:
		localctx = NewExpr_caseContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(869)
			p.Match(SQLiteParserCASE_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(871)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&126153566124512008) != 0) || ((int64((_la-72)) & ^0x3f) == 0 && ((int64(1)<<(_la-72))&70411693850625) != 0) || ((int64((_la-166)) & ^0x3f) == 0 && ((int64(1)<<(_la-166))&264242689) != 0) {
			{
				p.SetState(870)
				p.expr(0)
			}

		}
		p.SetState(878)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == SQLiteParserWHEN_ {
			{
				p.SetState(873)
				p.Match(SQLiteParserWHEN_)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(874)

				var _x = p.expr(0)

				localctx.(*Expr_caseContext)._expr = _x
			}
			localctx.(*Expr_caseContext).condition = append(localctx.(*Expr_caseContext).condition, localctx.(*Expr_caseContext)._expr)
			{
				p.SetState(875)
				p.Match(SQLiteParserTHEN_)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(876)

				var _x = p.expr(0)

				localctx.(*Expr_caseContext)._expr = _x
			}
			localctx.(*Expr_caseContext).val = append(localctx.(*Expr_caseContext).val, localctx.(*Expr_caseContext)._expr)

			p.SetState(880)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(884)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserELSE_ {
			{
				p.SetState(882)
				p.Match(SQLiteParserELSE_)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(883)

				var _x = p.expr(0)

				localctx.(*Expr_caseContext)._expr = _x
			}
			localctx.(*Expr_caseContext).val = append(localctx.(*Expr_caseContext).val, localctx.(*Expr_caseContext)._expr)

		}
		{
			p.SetState(886)
			p.Match(SQLiteParserEND_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 13:
		localctx = NewExpr_raiseContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(888)
			p.Raise_function()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(1006)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 132, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(1004)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}

			switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 131, p.GetParserRuleContext()) {
			case 1:
				localctx = NewExpr_json_extract_jsonContext(p, NewExprContext(p, _parentctx, _parentState))
				localctx.(*Expr_json_extract_jsonContext).lhs = _prevctx

				p.PushNewRecursionContext(localctx, _startState, SQLiteParserRULE_expr)
				p.SetState(891)

				if !(p.Precpred(p.GetParserRuleContext(), 23)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 23)", ""))
					goto errorExit
				}
				{
					p.SetState(892)
					p.Match(SQLiteParserPTR)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(893)

					var _x = p.expr(24)

					localctx.(*Expr_json_extract_jsonContext).rhs = _x
				}

			case 2:
				localctx = NewExpr_json_extract_stringContext(p, NewExprContext(p, _parentctx, _parentState))
				localctx.(*Expr_json_extract_stringContext).lhs = _prevctx

				p.PushNewRecursionContext(localctx, _startState, SQLiteParserRULE_expr)
				p.SetState(894)

				if !(p.Precpred(p.GetParserRuleContext(), 22)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 22)", ""))
					goto errorExit
				}
				{
					p.SetState(895)
					p.Match(SQLiteParserPTR2)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(896)

					var _x = p.expr(23)

					localctx.(*Expr_json_extract_stringContext).rhs = _x
				}

			case 3:
				localctx = NewExpr_concatContext(p, NewExprContext(p, _parentctx, _parentState))
				localctx.(*Expr_concatContext).lhs = _prevctx

				p.PushNewRecursionContext(localctx, _startState, SQLiteParserRULE_expr)
				p.SetState(897)

				if !(p.Precpred(p.GetParserRuleContext(), 21)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 21)", ""))
					goto errorExit
				}
				{
					p.SetState(898)
					p.Match(SQLiteParserPIPE2)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(899)

					var _x = p.expr(22)

					localctx.(*Expr_concatContext).rhs = _x
				}

			case 4:
				localctx = NewExpr_moduloContext(p, NewExprContext(p, _parentctx, _parentState))
				localctx.(*Expr_moduloContext).lhs = _prevctx

				p.PushNewRecursionContext(localctx, _startState, SQLiteParserRULE_expr)
				p.SetState(900)

				if !(p.Precpred(p.GetParserRuleContext(), 20)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 20)", ""))
					goto errorExit
				}
				{
					p.SetState(901)
					p.Match(SQLiteParserMOD)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(902)

					var _x = p.expr(21)

					localctx.(*Expr_moduloContext).rhs = _x
				}

			case 5:
				localctx = NewExpr_arithmeticContext(p, NewExprContext(p, _parentctx, _parentState))
				localctx.(*Expr_arithmeticContext).lhs = _prevctx

				p.PushNewRecursionContext(localctx, _startState, SQLiteParserRULE_expr)
				p.SetState(903)

				if !(p.Precpred(p.GetParserRuleContext(), 19)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 19)", ""))
					goto errorExit
				}
				{
					p.SetState(904)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*Expr_arithmeticContext).operator = _lt

					_la = p.GetTokenStream().LA(1)

					if !((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&17280) != 0) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*Expr_arithmeticContext).operator = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(905)

					var _x = p.expr(20)

					localctx.(*Expr_arithmeticContext).rhs = _x
				}

			case 6:
				localctx = NewExpr_bitwiseContext(p, NewExprContext(p, _parentctx, _parentState))
				localctx.(*Expr_bitwiseContext).lhs = _prevctx

				p.PushNewRecursionContext(localctx, _startState, SQLiteParserRULE_expr)
				p.SetState(906)

				if !(p.Precpred(p.GetParserRuleContext(), 18)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 18)", ""))
					goto errorExit
				}
				{
					p.SetState(907)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*Expr_bitwiseContext).operator = _lt

					_la = p.GetTokenStream().LA(1)

					if !((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&983040) != 0) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*Expr_bitwiseContext).operator = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(908)

					var _x = p.expr(19)

					localctx.(*Expr_bitwiseContext).rhs = _x
				}

			case 7:
				localctx = NewExpr_comparisonContext(p, NewExprContext(p, _parentctx, _parentState))
				localctx.(*Expr_comparisonContext).lhs = _prevctx

				p.PushNewRecursionContext(localctx, _startState, SQLiteParserRULE_expr)
				p.SetState(909)

				if !(p.Precpred(p.GetParserRuleContext(), 17)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 17)", ""))
					goto errorExit
				}
				{
					p.SetState(910)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*Expr_comparisonContext).operator = _lt

					_la = p.GetTokenStream().LA(1)

					if !((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&133169216) != 0) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*Expr_comparisonContext).operator = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(911)

					var _x = p.expr(18)

					localctx.(*Expr_comparisonContext).rhs = _x
				}

			case 8:
				localctx = NewExpr_string_opContext(p, NewExprContext(p, _parentctx, _parentState))
				localctx.(*Expr_string_opContext).lhs = _prevctx

				p.PushNewRecursionContext(localctx, _startState, SQLiteParserRULE_expr)
				p.SetState(912)

				if !(p.Precpred(p.GetParserRuleContext(), 16)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 16)", ""))
					goto errorExit
				}
				p.SetState(914)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)

				if _la == SQLiteParserNOT_ {
					{
						p.SetState(913)
						p.Match(SQLiteParserNOT_)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				}
				{
					p.SetState(916)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*Expr_string_opContext).operator = _lt

					_la = p.GetTokenStream().LA(1)

					if !(_la == SQLiteParserGLOB_ || _la == SQLiteParserREGEXP_) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*Expr_string_opContext).operator = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(917)

					var _x = p.expr(17)

					localctx.(*Expr_string_opContext).rhs = _x
				}

			case 9:
				localctx = NewExpr_matchContext(p, NewExprContext(p, _parentctx, _parentState))
				localctx.(*Expr_matchContext).lhs = _prevctx

				p.PushNewRecursionContext(localctx, _startState, SQLiteParserRULE_expr)
				p.SetState(918)

				if !(p.Precpred(p.GetParserRuleContext(), 15)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 15)", ""))
					goto errorExit
				}
				p.SetState(920)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)

				if _la == SQLiteParserNOT_ {
					{
						p.SetState(919)
						p.Match(SQLiteParserNOT_)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				}
				{
					p.SetState(922)
					p.Match(SQLiteParserMATCH_)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(923)

					var _x = p.expr(16)

					localctx.(*Expr_matchContext).rhs = _x
				}

			case 10:
				localctx = NewExpr_isContext(p, NewExprContext(p, _parentctx, _parentState))
				localctx.(*Expr_isContext).lhs = _prevctx

				p.PushNewRecursionContext(localctx, _startState, SQLiteParserRULE_expr)
				p.SetState(924)

				if !(p.Precpred(p.GetParserRuleContext(), 14)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 14)", ""))
					goto errorExit
				}
				{
					p.SetState(925)
					p.Match(SQLiteParserIS_)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				p.SetState(927)
				p.GetErrorHandler().Sync(p)

				if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 118, p.GetParserRuleContext()) == 1 {
					{
						p.SetState(926)
						p.Match(SQLiteParserNOT_)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				} else if p.HasError() { // JIM
					goto errorExit
				}
				p.SetState(931)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)

				if _la == SQLiteParserDISTINCT_ {
					{
						p.SetState(929)
						p.Match(SQLiteParserDISTINCT_)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}
					{
						p.SetState(930)
						p.Match(SQLiteParserFROM_)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				}
				{
					p.SetState(933)

					var _x = p.expr(15)

					localctx.(*Expr_isContext).rhs = _x
				}

			case 11:
				localctx = NewExpr_betweenContext(p, NewExprContext(p, _parentctx, _parentState))
				localctx.(*Expr_betweenContext).lhs = _prevctx

				p.PushNewRecursionContext(localctx, _startState, SQLiteParserRULE_expr)
				p.SetState(934)

				if !(p.Precpred(p.GetParserRuleContext(), 11)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 11)", ""))
					goto errorExit
				}
				p.SetState(936)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)

				if _la == SQLiteParserNOT_ {
					{
						p.SetState(935)
						p.Match(SQLiteParserNOT_)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				}
				{
					p.SetState(938)
					p.Match(SQLiteParserBETWEEN_)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(939)

					var _x = p.expr(0)

					localctx.(*Expr_betweenContext).from = _x
				}
				{
					p.SetState(940)
					p.Match(SQLiteParserAND_)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(941)

					var _x = p.expr(12)

					localctx.(*Expr_betweenContext).to = _x
				}

			case 12:
				localctx = NewExpr_boolContext(p, NewExprContext(p, _parentctx, _parentState))
				localctx.(*Expr_boolContext).lhs = _prevctx

				p.PushNewRecursionContext(localctx, _startState, SQLiteParserRULE_expr)
				p.SetState(943)

				if !(p.Precpred(p.GetParserRuleContext(), 9)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 9)", ""))
					goto errorExit
				}
				{
					p.SetState(944)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*Expr_boolContext).operator = _lt

					_la = p.GetTokenStream().LA(1)

					if !(_la == SQLiteParserAND_ || _la == SQLiteParserOR_) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*Expr_boolContext).operator = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(945)

					var _x = p.expr(10)

					localctx.(*Expr_boolContext).rhs = _x
				}

			case 13:
				localctx = NewExpr_likeContext(p, NewExprContext(p, _parentctx, _parentState))
				localctx.(*Expr_likeContext).lhs = _prevctx

				p.PushNewRecursionContext(localctx, _startState, SQLiteParserRULE_expr)
				p.SetState(946)

				if !(p.Precpred(p.GetParserRuleContext(), 13)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 13)", ""))
					goto errorExit
				}
				p.SetState(948)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)

				if _la == SQLiteParserNOT_ {
					{
						p.SetState(947)
						p.Match(SQLiteParserNOT_)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				}
				{
					p.SetState(950)
					p.Match(SQLiteParserLIKE_)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(951)

					var _x = p.expr(0)

					localctx.(*Expr_likeContext).rhs = _x
				}
				p.SetState(954)
				p.GetErrorHandler().Sync(p)

				if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 122, p.GetParserRuleContext()) == 1 {
					{
						p.SetState(952)
						p.Match(SQLiteParserESCAPE_)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}
					{
						p.SetState(953)

						var _x = p.expr(0)

						localctx.(*Expr_likeContext).excape = _x
					}

				} else if p.HasError() { // JIM
					goto errorExit
				}

			case 14:
				localctx = NewExpr_inContext(p, NewExprContext(p, _parentctx, _parentState))
				localctx.(*Expr_inContext).lhs = _prevctx

				p.PushNewRecursionContext(localctx, _startState, SQLiteParserRULE_expr)
				p.SetState(956)

				if !(p.Precpred(p.GetParserRuleContext(), 12)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 12)", ""))
					goto errorExit
				}
				p.SetState(958)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)

				if _la == SQLiteParserNOT_ {
					{
						p.SetState(957)
						p.Match(SQLiteParserNOT_)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				}
				{
					p.SetState(960)
					p.Match(SQLiteParserIN_)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				p.SetState(992)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}

				switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 129, p.GetParserRuleContext()) {
				case 1:
					{
						p.SetState(961)

						var _x = p.expr(0)

						localctx.(*Expr_inContext).rhsExpr = _x
					}

				case 2:
					{
						p.SetState(962)
						p.Match(SQLiteParserOPEN_PAR)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}
					p.SetState(964)
					p.GetErrorHandler().Sync(p)
					if p.HasError() {
						goto errorExit
					}
					_la = p.GetTokenStream().LA(1)

					if (int64((_la-133)) & ^0x3f) == 0 && ((int64(1)<<(_la-133))&540673) != 0 {
						{
							p.SetState(963)
							p.Select_stmt()
						}

					}
					{
						p.SetState(966)
						p.Match(SQLiteParserCLOSE_PAR)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				case 3:
					p.SetState(970)
					p.GetErrorHandler().Sync(p)

					if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 125, p.GetParserRuleContext()) == 1 {
						{
							p.SetState(967)
							p.Schema_name()
						}
						{
							p.SetState(968)
							p.Match(SQLiteParserDOT)
							if p.HasError() {
								// Recognition error - abort rule
								goto errorExit
							}
						}

					} else if p.HasError() { // JIM
						goto errorExit
					}
					{
						p.SetState(972)
						p.Table_name()
					}

				case 4:
					p.SetState(976)
					p.GetErrorHandler().Sync(p)

					if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 126, p.GetParserRuleContext()) == 1 {
						{
							p.SetState(973)
							p.Schema_name()
						}
						{
							p.SetState(974)
							p.Match(SQLiteParserDOT)
							if p.HasError() {
								// Recognition error - abort rule
								goto errorExit
							}
						}

					} else if p.HasError() { // JIM
						goto errorExit
					}
					{
						p.SetState(978)
						p.Table_function_name()
					}
					{
						p.SetState(979)
						p.Match(SQLiteParserOPEN_PAR)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}
					p.SetState(988)
					p.GetErrorHandler().Sync(p)
					if p.HasError() {
						goto errorExit
					}
					_la = p.GetTokenStream().LA(1)

					if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&126153566124512008) != 0) || ((int64((_la-72)) & ^0x3f) == 0 && ((int64(1)<<(_la-72))&70411693850625) != 0) || ((int64((_la-166)) & ^0x3f) == 0 && ((int64(1)<<(_la-166))&264242689) != 0) {
						{
							p.SetState(980)
							p.expr(0)
						}
						p.SetState(985)
						p.GetErrorHandler().Sync(p)
						if p.HasError() {
							goto errorExit
						}
						_la = p.GetTokenStream().LA(1)

						for _la == SQLiteParserCOMMA {
							{
								p.SetState(981)
								p.Match(SQLiteParserCOMMA)
								if p.HasError() {
									// Recognition error - abort rule
									goto errorExit
								}
							}
							{
								p.SetState(982)
								p.expr(0)
							}

							p.SetState(987)
							p.GetErrorHandler().Sync(p)
							if p.HasError() {
								goto errorExit
							}
							_la = p.GetTokenStream().LA(1)
						}

					}
					{
						p.SetState(990)
						p.Match(SQLiteParserCLOSE_PAR)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				case antlr.ATNInvalidAltNumber:
					goto errorExit
				}

			case 15:
				localctx = NewExpr_null_compContext(p, NewExprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, SQLiteParserRULE_expr)
				p.SetState(994)

				if !(p.Precpred(p.GetParserRuleContext(), 10)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 10)", ""))
					goto errorExit
				}
				p.SetState(999)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}

				switch p.GetTokenStream().LA(1) {
				case SQLiteParserISNULL_:
					{
						p.SetState(995)
						p.Match(SQLiteParserISNULL_)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				case SQLiteParserNOTNULL_:
					{
						p.SetState(996)
						p.Match(SQLiteParserNOTNULL_)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				case SQLiteParserNOT_:
					{
						p.SetState(997)
						p.Match(SQLiteParserNOT_)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}
					{
						p.SetState(998)
						p.Match(SQLiteParserNULL_)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				default:
					p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
					goto errorExit
				}

			case 16:
				localctx = NewExpr_collateContext(p, NewExprContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, SQLiteParserRULE_expr)
				p.SetState(1001)

				if !(p.Precpred(p.GetParserRuleContext(), 4)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 4)", ""))
					goto errorExit
				}
				{
					p.SetState(1002)
					p.Match(SQLiteParserCOLLATE_)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(1003)
					p.Collation_name()
				}

			case antlr.ATNInvalidAltNumber:
				goto errorExit
			}

		}
		p.SetState(1008)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 132, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IRaise_functionContext is an interface to support dynamic dispatch.
type IRaise_functionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	RAISE_() antlr.TerminalNode
	OPEN_PAR() antlr.TerminalNode
	CLOSE_PAR() antlr.TerminalNode
	IGNORE_() antlr.TerminalNode
	COMMA() antlr.TerminalNode
	Error_message() IError_messageContext
	ROLLBACK_() antlr.TerminalNode
	ABORT_() antlr.TerminalNode
	FAIL_() antlr.TerminalNode

	// IsRaise_functionContext differentiates from other interfaces.
	IsRaise_functionContext()
}

type Raise_functionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRaise_functionContext() *Raise_functionContext {
	var p = new(Raise_functionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_raise_function
	return p
}

func InitEmptyRaise_functionContext(p *Raise_functionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_raise_function
}

func (*Raise_functionContext) IsRaise_functionContext() {}

func NewRaise_functionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Raise_functionContext {
	var p = new(Raise_functionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_raise_function

	return p
}

func (s *Raise_functionContext) GetParser() antlr.Parser { return s.parser }

func (s *Raise_functionContext) RAISE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserRAISE_, 0)
}

func (s *Raise_functionContext) OPEN_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserOPEN_PAR, 0)
}

func (s *Raise_functionContext) CLOSE_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCLOSE_PAR, 0)
}

func (s *Raise_functionContext) IGNORE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserIGNORE_, 0)
}

func (s *Raise_functionContext) COMMA() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, 0)
}

func (s *Raise_functionContext) Error_message() IError_messageContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IError_messageContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IError_messageContext)
}

func (s *Raise_functionContext) ROLLBACK_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserROLLBACK_, 0)
}

func (s *Raise_functionContext) ABORT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserABORT_, 0)
}

func (s *Raise_functionContext) FAIL_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserFAIL_, 0)
}

func (s *Raise_functionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Raise_functionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Raise_functionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterRaise_function(s)
	}
}

func (s *Raise_functionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitRaise_function(s)
	}
}

func (s *Raise_functionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitRaise_function(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Raise_function() (localctx IRaise_functionContext) {
	localctx = NewRaise_functionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 56, SQLiteParserRULE_raise_function)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1009)
		p.Match(SQLiteParserRAISE_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1010)
		p.Match(SQLiteParserOPEN_PAR)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1015)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case SQLiteParserIGNORE_:
		{
			p.SetState(1011)
			p.Match(SQLiteParserIGNORE_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case SQLiteParserABORT_, SQLiteParserFAIL_, SQLiteParserROLLBACK_:
		{
			p.SetState(1012)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLiteParserABORT_ || _la == SQLiteParserFAIL_ || _la == SQLiteParserROLLBACK_) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(1013)
			p.Match(SQLiteParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1014)
			p.Error_message()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}
	{
		p.SetState(1017)
		p.Match(SQLiteParserCLOSE_PAR)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ILiteral_valueContext is an interface to support dynamic dispatch.
type ILiteral_valueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetLiteralType returns the literalType token.
	GetLiteralType() antlr.Token

	// SetLiteralType sets the literalType token.
	SetLiteralType(antlr.Token)

	// Getter signatures
	NUMERIC_LITERAL() antlr.TerminalNode
	STRING_LITERAL() antlr.TerminalNode
	BLOB_LITERAL() antlr.TerminalNode
	NULL_() antlr.TerminalNode
	TRUE_() antlr.TerminalNode
	FALSE_() antlr.TerminalNode
	CURRENT_TIME_() antlr.TerminalNode
	CURRENT_DATE_() antlr.TerminalNode
	CURRENT_TIMESTAMP_() antlr.TerminalNode

	// IsLiteral_valueContext differentiates from other interfaces.
	IsLiteral_valueContext()
}

type Literal_valueContext struct {
	antlr.BaseParserRuleContext
	parser      antlr.Parser
	literalType antlr.Token
}

func NewEmptyLiteral_valueContext() *Literal_valueContext {
	var p = new(Literal_valueContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_literal_value
	return p
}

func InitEmptyLiteral_valueContext(p *Literal_valueContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_literal_value
}

func (*Literal_valueContext) IsLiteral_valueContext() {}

func NewLiteral_valueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Literal_valueContext {
	var p = new(Literal_valueContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_literal_value

	return p
}

func (s *Literal_valueContext) GetParser() antlr.Parser { return s.parser }

func (s *Literal_valueContext) GetLiteralType() antlr.Token { return s.literalType }

func (s *Literal_valueContext) SetLiteralType(v antlr.Token) { s.literalType = v }

func (s *Literal_valueContext) NUMERIC_LITERAL() antlr.TerminalNode {
	return s.GetToken(SQLiteParserNUMERIC_LITERAL, 0)
}

func (s *Literal_valueContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(SQLiteParserSTRING_LITERAL, 0)
}

func (s *Literal_valueContext) BLOB_LITERAL() antlr.TerminalNode {
	return s.GetToken(SQLiteParserBLOB_LITERAL, 0)
}

func (s *Literal_valueContext) NULL_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserNULL_, 0)
}

func (s *Literal_valueContext) TRUE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserTRUE_, 0)
}

func (s *Literal_valueContext) FALSE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserFALSE_, 0)
}

func (s *Literal_valueContext) CURRENT_TIME_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCURRENT_TIME_, 0)
}

func (s *Literal_valueContext) CURRENT_DATE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCURRENT_DATE_, 0)
}

func (s *Literal_valueContext) CURRENT_TIMESTAMP_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCURRENT_TIMESTAMP_, 0)
}

func (s *Literal_valueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Literal_valueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Literal_valueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterLiteral_value(s)
	}
}

func (s *Literal_valueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitLiteral_value(s)
	}
}

func (s *Literal_valueContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitLiteral_value(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Literal_value() (localctx ILiteral_valueContext) {
	localctx = NewLiteral_valueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 58, SQLiteParserRULE_literal_value)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1019)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*Literal_valueContext).literalType = _lt

		_la = p.GetTokenStream().LA(1)

		if !(((int64((_la-54)) & ^0x3f) == 0 && ((int64(1)<<(_la-54))&9007199254740999) != 0) || ((int64((_la-175)) & ^0x3f) == 0 && ((int64(1)<<(_la-175))&409603) != 0)) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*Literal_valueContext).literalType = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IValue_rowContext is an interface to support dynamic dispatch.
type IValue_rowContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	OPEN_PAR() antlr.TerminalNode
	AllExpr() []IExprContext
	Expr(i int) IExprContext
	CLOSE_PAR() antlr.TerminalNode
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsValue_rowContext differentiates from other interfaces.
	IsValue_rowContext()
}

type Value_rowContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyValue_rowContext() *Value_rowContext {
	var p = new(Value_rowContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_value_row
	return p
}

func InitEmptyValue_rowContext(p *Value_rowContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_value_row
}

func (*Value_rowContext) IsValue_rowContext() {}

func NewValue_rowContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Value_rowContext {
	var p = new(Value_rowContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_value_row

	return p
}

func (s *Value_rowContext) GetParser() antlr.Parser { return s.parser }

func (s *Value_rowContext) OPEN_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserOPEN_PAR, 0)
}

func (s *Value_rowContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *Value_rowContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Value_rowContext) CLOSE_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCLOSE_PAR, 0)
}

func (s *Value_rowContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserCOMMA)
}

func (s *Value_rowContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, i)
}

func (s *Value_rowContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Value_rowContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Value_rowContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterValue_row(s)
	}
}

func (s *Value_rowContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitValue_row(s)
	}
}

func (s *Value_rowContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitValue_row(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Value_row() (localctx IValue_rowContext) {
	localctx = NewValue_rowContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 60, SQLiteParserRULE_value_row)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1021)
		p.Match(SQLiteParserOPEN_PAR)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1022)
		p.expr(0)
	}
	p.SetState(1027)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == SQLiteParserCOMMA {
		{
			p.SetState(1023)
			p.Match(SQLiteParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1024)
			p.expr(0)
		}

		p.SetState(1029)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1030)
		p.Match(SQLiteParserCLOSE_PAR)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IValues_clauseContext is an interface to support dynamic dispatch.
type IValues_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	VALUES_() antlr.TerminalNode
	AllValue_row() []IValue_rowContext
	Value_row(i int) IValue_rowContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsValues_clauseContext differentiates from other interfaces.
	IsValues_clauseContext()
}

type Values_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyValues_clauseContext() *Values_clauseContext {
	var p = new(Values_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_values_clause
	return p
}

func InitEmptyValues_clauseContext(p *Values_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_values_clause
}

func (*Values_clauseContext) IsValues_clauseContext() {}

func NewValues_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Values_clauseContext {
	var p = new(Values_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_values_clause

	return p
}

func (s *Values_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Values_clauseContext) VALUES_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserVALUES_, 0)
}

func (s *Values_clauseContext) AllValue_row() []IValue_rowContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IValue_rowContext); ok {
			len++
		}
	}

	tst := make([]IValue_rowContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IValue_rowContext); ok {
			tst[i] = t.(IValue_rowContext)
			i++
		}
	}

	return tst
}

func (s *Values_clauseContext) Value_row(i int) IValue_rowContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IValue_rowContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IValue_rowContext)
}

func (s *Values_clauseContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserCOMMA)
}

func (s *Values_clauseContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, i)
}

func (s *Values_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Values_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Values_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterValues_clause(s)
	}
}

func (s *Values_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitValues_clause(s)
	}
}

func (s *Values_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitValues_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Values_clause() (localctx IValues_clauseContext) {
	localctx = NewValues_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 62, SQLiteParserRULE_values_clause)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1032)
		p.Match(SQLiteParserVALUES_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1033)
		p.Value_row()
	}
	p.SetState(1038)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == SQLiteParserCOMMA {
		{
			p.SetState(1034)
			p.Match(SQLiteParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1035)
			p.Value_row()
		}

		p.SetState(1040)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IInsert_stmtContext is an interface to support dynamic dispatch.
type IInsert_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetUpsert_action returns the upsert_action token.
	GetUpsert_action() antlr.Token

	// SetUpsert_action sets the upsert_action token.
	SetUpsert_action(antlr.Token)

	// Getter signatures
	INTO_() antlr.TerminalNode
	Table_name() ITable_nameContext
	INSERT_() antlr.TerminalNode
	REPLACE_() antlr.TerminalNode
	OR_() antlr.TerminalNode
	DEFAULT_() antlr.TerminalNode
	VALUES_() antlr.TerminalNode
	With_clause() IWith_clauseContext
	Schema_name() ISchema_nameContext
	DOT() antlr.TerminalNode
	AS_() antlr.TerminalNode
	Table_alias() ITable_aliasContext
	OPEN_PAR() antlr.TerminalNode
	AllColumn_name() []IColumn_nameContext
	Column_name(i int) IColumn_nameContext
	CLOSE_PAR() antlr.TerminalNode
	Returning_clause() IReturning_clauseContext
	ROLLBACK_() antlr.TerminalNode
	ABORT_() antlr.TerminalNode
	FAIL_() antlr.TerminalNode
	IGNORE_() antlr.TerminalNode
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode
	Values_clause() IValues_clauseContext
	Select_stmt() ISelect_stmtContext
	Upsert_clause() IUpsert_clauseContext

	// IsInsert_stmtContext differentiates from other interfaces.
	IsInsert_stmtContext()
}

type Insert_stmtContext struct {
	antlr.BaseParserRuleContext
	parser        antlr.Parser
	upsert_action antlr.Token
}

func NewEmptyInsert_stmtContext() *Insert_stmtContext {
	var p = new(Insert_stmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_insert_stmt
	return p
}

func InitEmptyInsert_stmtContext(p *Insert_stmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_insert_stmt
}

func (*Insert_stmtContext) IsInsert_stmtContext() {}

func NewInsert_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Insert_stmtContext {
	var p = new(Insert_stmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_insert_stmt

	return p
}

func (s *Insert_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Insert_stmtContext) GetUpsert_action() antlr.Token { return s.upsert_action }

func (s *Insert_stmtContext) SetUpsert_action(v antlr.Token) { s.upsert_action = v }

func (s *Insert_stmtContext) INTO_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserINTO_, 0)
}

func (s *Insert_stmtContext) Table_name() ITable_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Insert_stmtContext) INSERT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserINSERT_, 0)
}

func (s *Insert_stmtContext) REPLACE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserREPLACE_, 0)
}

func (s *Insert_stmtContext) OR_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserOR_, 0)
}

func (s *Insert_stmtContext) DEFAULT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDEFAULT_, 0)
}

func (s *Insert_stmtContext) VALUES_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserVALUES_, 0)
}

func (s *Insert_stmtContext) With_clause() IWith_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWith_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWith_clauseContext)
}

func (s *Insert_stmtContext) Schema_name() ISchema_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISchema_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISchema_nameContext)
}

func (s *Insert_stmtContext) DOT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDOT, 0)
}

func (s *Insert_stmtContext) AS_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserAS_, 0)
}

func (s *Insert_stmtContext) Table_alias() ITable_aliasContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_aliasContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_aliasContext)
}

func (s *Insert_stmtContext) OPEN_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserOPEN_PAR, 0)
}

func (s *Insert_stmtContext) AllColumn_name() []IColumn_nameContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumn_nameContext); ok {
			len++
		}
	}

	tst := make([]IColumn_nameContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumn_nameContext); ok {
			tst[i] = t.(IColumn_nameContext)
			i++
		}
	}

	return tst
}

func (s *Insert_stmtContext) Column_name(i int) IColumn_nameContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_nameContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *Insert_stmtContext) CLOSE_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCLOSE_PAR, 0)
}

func (s *Insert_stmtContext) Returning_clause() IReturning_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IReturning_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IReturning_clauseContext)
}

func (s *Insert_stmtContext) ROLLBACK_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserROLLBACK_, 0)
}

func (s *Insert_stmtContext) ABORT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserABORT_, 0)
}

func (s *Insert_stmtContext) FAIL_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserFAIL_, 0)
}

func (s *Insert_stmtContext) IGNORE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserIGNORE_, 0)
}

func (s *Insert_stmtContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserCOMMA)
}

func (s *Insert_stmtContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, i)
}

func (s *Insert_stmtContext) Values_clause() IValues_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IValues_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IValues_clauseContext)
}

func (s *Insert_stmtContext) Select_stmt() ISelect_stmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelect_stmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelect_stmtContext)
}

func (s *Insert_stmtContext) Upsert_clause() IUpsert_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUpsert_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUpsert_clauseContext)
}

func (s *Insert_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Insert_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Insert_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterInsert_stmt(s)
	}
}

func (s *Insert_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitInsert_stmt(s)
	}
}

func (s *Insert_stmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitInsert_stmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Insert_stmt() (localctx IInsert_stmtContext) {
	localctx = NewInsert_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 64, SQLiteParserRULE_insert_stmt)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1042)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserWITH_ {
		{
			p.SetState(1041)
			p.With_clause()
		}

	}
	p.SetState(1049)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 137, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1044)
			p.Match(SQLiteParserINSERT_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		{
			p.SetState(1045)
			p.Match(SQLiteParserREPLACE_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 3:
		{
			p.SetState(1046)
			p.Match(SQLiteParserINSERT_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1047)
			p.Match(SQLiteParserOR_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1048)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*Insert_stmtContext).upsert_action = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLiteParserABORT_ || ((int64((_la-74)) & ^0x3f) == 0 && ((int64(1)<<(_la-74))&38280596832649729) != 0)) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*Insert_stmtContext).upsert_action = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}
	{
		p.SetState(1051)
		p.Match(SQLiteParserINTO_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1055)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 138, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1052)
			p.Schema_name()
		}
		{
			p.SetState(1053)
			p.Match(SQLiteParserDOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	{
		p.SetState(1057)
		p.Table_name()
	}
	p.SetState(1060)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserAS_ {
		{
			p.SetState(1058)
			p.Match(SQLiteParserAS_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1059)
			p.Table_alias()
		}

	}
	p.SetState(1073)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserOPEN_PAR {
		{
			p.SetState(1062)
			p.Match(SQLiteParserOPEN_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1063)
			p.Column_name()
		}
		p.SetState(1068)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == SQLiteParserCOMMA {
			{
				p.SetState(1064)
				p.Match(SQLiteParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1065)
				p.Column_name()
			}

			p.SetState(1070)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1071)
			p.Match(SQLiteParserCLOSE_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(1084)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case SQLiteParserSELECT_, SQLiteParserVALUES_, SQLiteParserWITH_:
		p.SetState(1077)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 142, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(1075)
				p.Values_clause()
			}

		case 2:
			{
				p.SetState(1076)
				p.Select_stmt()
			}

		case antlr.ATNInvalidAltNumber:
			goto errorExit
		}
		p.SetState(1080)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserON_ {
			{
				p.SetState(1079)
				p.Upsert_clause()
			}

		}

	case SQLiteParserDEFAULT_:
		{
			p.SetState(1082)
			p.Match(SQLiteParserDEFAULT_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1083)
			p.Match(SQLiteParserVALUES_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}
	p.SetState(1087)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserRETURNING_ {
		{
			p.SetState(1086)
			p.Returning_clause()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IReturning_clauseContext is an interface to support dynamic dispatch.
type IReturning_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	RETURNING_() antlr.TerminalNode
	AllResult_column() []IResult_columnContext
	Result_column(i int) IResult_columnContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsReturning_clauseContext differentiates from other interfaces.
	IsReturning_clauseContext()
}

type Returning_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReturning_clauseContext() *Returning_clauseContext {
	var p = new(Returning_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_returning_clause
	return p
}

func InitEmptyReturning_clauseContext(p *Returning_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_returning_clause
}

func (*Returning_clauseContext) IsReturning_clauseContext() {}

func NewReturning_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Returning_clauseContext {
	var p = new(Returning_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_returning_clause

	return p
}

func (s *Returning_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Returning_clauseContext) RETURNING_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserRETURNING_, 0)
}

func (s *Returning_clauseContext) AllResult_column() []IResult_columnContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IResult_columnContext); ok {
			len++
		}
	}

	tst := make([]IResult_columnContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IResult_columnContext); ok {
			tst[i] = t.(IResult_columnContext)
			i++
		}
	}

	return tst
}

func (s *Returning_clauseContext) Result_column(i int) IResult_columnContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IResult_columnContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IResult_columnContext)
}

func (s *Returning_clauseContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserCOMMA)
}

func (s *Returning_clauseContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, i)
}

func (s *Returning_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Returning_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Returning_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterReturning_clause(s)
	}
}

func (s *Returning_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitReturning_clause(s)
	}
}

func (s *Returning_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitReturning_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Returning_clause() (localctx IReturning_clauseContext) {
	localctx = NewReturning_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 66, SQLiteParserRULE_returning_clause)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1089)
		p.Match(SQLiteParserRETURNING_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1090)
		p.Result_column()
	}
	p.SetState(1095)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == SQLiteParserCOMMA {
		{
			p.SetState(1091)
			p.Match(SQLiteParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1092)
			p.Result_column()
		}

		p.SetState(1097)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IUpsert_clauseContext is an interface to support dynamic dispatch.
type IUpsert_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ON_() antlr.TerminalNode
	CONFLICT_() antlr.TerminalNode
	DO_() antlr.TerminalNode
	NOTHING_() antlr.TerminalNode
	UPDATE_() antlr.TerminalNode
	SET_() antlr.TerminalNode
	OPEN_PAR() antlr.TerminalNode
	AllIndexed_column() []IIndexed_columnContext
	Indexed_column(i int) IIndexed_columnContext
	CLOSE_PAR() antlr.TerminalNode
	AllEQ() []antlr.TerminalNode
	EQ(i int) antlr.TerminalNode
	AllExpr() []IExprContext
	Expr(i int) IExprContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode
	AllWhere_stmt() []IWhere_stmtContext
	Where_stmt(i int) IWhere_stmtContext
	AllColumn_name() []IColumn_nameContext
	Column_name(i int) IColumn_nameContext
	AllColumn_name_list() []IColumn_name_listContext
	Column_name_list(i int) IColumn_name_listContext

	// IsUpsert_clauseContext differentiates from other interfaces.
	IsUpsert_clauseContext()
}

type Upsert_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUpsert_clauseContext() *Upsert_clauseContext {
	var p = new(Upsert_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_upsert_clause
	return p
}

func InitEmptyUpsert_clauseContext(p *Upsert_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_upsert_clause
}

func (*Upsert_clauseContext) IsUpsert_clauseContext() {}

func NewUpsert_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Upsert_clauseContext {
	var p = new(Upsert_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_upsert_clause

	return p
}

func (s *Upsert_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Upsert_clauseContext) ON_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserON_, 0)
}

func (s *Upsert_clauseContext) CONFLICT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCONFLICT_, 0)
}

func (s *Upsert_clauseContext) DO_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDO_, 0)
}

func (s *Upsert_clauseContext) NOTHING_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserNOTHING_, 0)
}

func (s *Upsert_clauseContext) UPDATE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserUPDATE_, 0)
}

func (s *Upsert_clauseContext) SET_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserSET_, 0)
}

func (s *Upsert_clauseContext) OPEN_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserOPEN_PAR, 0)
}

func (s *Upsert_clauseContext) AllIndexed_column() []IIndexed_columnContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIndexed_columnContext); ok {
			len++
		}
	}

	tst := make([]IIndexed_columnContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIndexed_columnContext); ok {
			tst[i] = t.(IIndexed_columnContext)
			i++
		}
	}

	return tst
}

func (s *Upsert_clauseContext) Indexed_column(i int) IIndexed_columnContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIndexed_columnContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIndexed_columnContext)
}

func (s *Upsert_clauseContext) CLOSE_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCLOSE_PAR, 0)
}

func (s *Upsert_clauseContext) AllEQ() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserEQ)
}

func (s *Upsert_clauseContext) EQ(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserEQ, i)
}

func (s *Upsert_clauseContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *Upsert_clauseContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Upsert_clauseContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserCOMMA)
}

func (s *Upsert_clauseContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, i)
}

func (s *Upsert_clauseContext) AllWhere_stmt() []IWhere_stmtContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IWhere_stmtContext); ok {
			len++
		}
	}

	tst := make([]IWhere_stmtContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IWhere_stmtContext); ok {
			tst[i] = t.(IWhere_stmtContext)
			i++
		}
	}

	return tst
}

func (s *Upsert_clauseContext) Where_stmt(i int) IWhere_stmtContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWhere_stmtContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWhere_stmtContext)
}

func (s *Upsert_clauseContext) AllColumn_name() []IColumn_nameContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumn_nameContext); ok {
			len++
		}
	}

	tst := make([]IColumn_nameContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumn_nameContext); ok {
			tst[i] = t.(IColumn_nameContext)
			i++
		}
	}

	return tst
}

func (s *Upsert_clauseContext) Column_name(i int) IColumn_nameContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_nameContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *Upsert_clauseContext) AllColumn_name_list() []IColumn_name_listContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumn_name_listContext); ok {
			len++
		}
	}

	tst := make([]IColumn_name_listContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumn_name_listContext); ok {
			tst[i] = t.(IColumn_name_listContext)
			i++
		}
	}

	return tst
}

func (s *Upsert_clauseContext) Column_name_list(i int) IColumn_name_listContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_name_listContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_name_listContext)
}

func (s *Upsert_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Upsert_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Upsert_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterUpsert_clause(s)
	}
}

func (s *Upsert_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitUpsert_clause(s)
	}
}

func (s *Upsert_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitUpsert_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Upsert_clause() (localctx IUpsert_clauseContext) {
	localctx = NewUpsert_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 68, SQLiteParserRULE_upsert_clause)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1098)
		p.Match(SQLiteParserON_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1099)
		p.Match(SQLiteParserCONFLICT_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1113)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserOPEN_PAR {
		{
			p.SetState(1100)
			p.Match(SQLiteParserOPEN_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1101)
			p.Indexed_column()
		}
		p.SetState(1106)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == SQLiteParserCOMMA {
			{
				p.SetState(1102)
				p.Match(SQLiteParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1103)
				p.Indexed_column()
			}

			p.SetState(1108)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1109)
			p.Match(SQLiteParserCLOSE_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1111)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserWHERE_ {
			{
				p.SetState(1110)
				p.Where_stmt()
			}

		}

	}
	{
		p.SetState(1115)
		p.Match(SQLiteParserDO_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1141)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case SQLiteParserNOTHING_:
		{
			p.SetState(1116)
			p.Match(SQLiteParserNOTHING_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case SQLiteParserUPDATE_:
		{
			p.SetState(1117)
			p.Match(SQLiteParserUPDATE_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1118)
			p.Match(SQLiteParserSET_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1121)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 150, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(1119)
				p.Column_name()
			}

		case 2:
			{
				p.SetState(1120)
				p.Column_name_list()
			}

		case antlr.ATNInvalidAltNumber:
			goto errorExit
		}
		{
			p.SetState(1123)
			p.Match(SQLiteParserEQ)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1124)
			p.expr(0)
		}
		p.SetState(1135)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == SQLiteParserCOMMA {
			{
				p.SetState(1125)
				p.Match(SQLiteParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			p.SetState(1128)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}

			switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 151, p.GetParserRuleContext()) {
			case 1:
				{
					p.SetState(1126)
					p.Column_name()
				}

			case 2:
				{
					p.SetState(1127)
					p.Column_name_list()
				}

			case antlr.ATNInvalidAltNumber:
				goto errorExit
			}
			{
				p.SetState(1130)
				p.Match(SQLiteParserEQ)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1131)
				p.expr(0)
			}

			p.SetState(1137)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(1139)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserWHERE_ {
			{
				p.SetState(1138)
				p.Where_stmt()
			}

		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPragma_stmtContext is an interface to support dynamic dispatch.
type IPragma_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	PRAGMA_() antlr.TerminalNode
	Pragma_name() IPragma_nameContext
	Schema_name() ISchema_nameContext
	DOT() antlr.TerminalNode
	EQ() antlr.TerminalNode
	Pragma_value() IPragma_valueContext
	OPEN_PAR() antlr.TerminalNode
	CLOSE_PAR() antlr.TerminalNode

	// IsPragma_stmtContext differentiates from other interfaces.
	IsPragma_stmtContext()
}

type Pragma_stmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPragma_stmtContext() *Pragma_stmtContext {
	var p = new(Pragma_stmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_pragma_stmt
	return p
}

func InitEmptyPragma_stmtContext(p *Pragma_stmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_pragma_stmt
}

func (*Pragma_stmtContext) IsPragma_stmtContext() {}

func NewPragma_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Pragma_stmtContext {
	var p = new(Pragma_stmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_pragma_stmt

	return p
}

func (s *Pragma_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Pragma_stmtContext) PRAGMA_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserPRAGMA_, 0)
}

func (s *Pragma_stmtContext) Pragma_name() IPragma_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPragma_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPragma_nameContext)
}

func (s *Pragma_stmtContext) Schema_name() ISchema_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISchema_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISchema_nameContext)
}

func (s *Pragma_stmtContext) DOT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDOT, 0)
}

func (s *Pragma_stmtContext) EQ() antlr.TerminalNode {
	return s.GetToken(SQLiteParserEQ, 0)
}

func (s *Pragma_stmtContext) Pragma_value() IPragma_valueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPragma_valueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPragma_valueContext)
}

func (s *Pragma_stmtContext) OPEN_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserOPEN_PAR, 0)
}

func (s *Pragma_stmtContext) CLOSE_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCLOSE_PAR, 0)
}

func (s *Pragma_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Pragma_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Pragma_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterPragma_stmt(s)
	}
}

func (s *Pragma_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitPragma_stmt(s)
	}
}

func (s *Pragma_stmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitPragma_stmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Pragma_stmt() (localctx IPragma_stmtContext) {
	localctx = NewPragma_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 70, SQLiteParserRULE_pragma_stmt)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1143)
		p.Match(SQLiteParserPRAGMA_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1147)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 155, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1144)
			p.Schema_name()
		}
		{
			p.SetState(1145)
			p.Match(SQLiteParserDOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	{
		p.SetState(1149)
		p.Pragma_name()
	}
	p.SetState(1156)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	switch p.GetTokenStream().LA(1) {
	case SQLiteParserEQ:
		{
			p.SetState(1150)
			p.Match(SQLiteParserEQ)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1151)
			p.Pragma_value()
		}

	case SQLiteParserOPEN_PAR:
		{
			p.SetState(1152)
			p.Match(SQLiteParserOPEN_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1153)
			p.Pragma_value()
		}
		{
			p.SetState(1154)
			p.Match(SQLiteParserCLOSE_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case SQLiteParserEOF, SQLiteParserSCOL:

	default:
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPragma_valueContext is an interface to support dynamic dispatch.
type IPragma_valueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Signed_number() ISigned_numberContext
	Name() INameContext
	STRING_LITERAL() antlr.TerminalNode

	// IsPragma_valueContext differentiates from other interfaces.
	IsPragma_valueContext()
}

type Pragma_valueContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPragma_valueContext() *Pragma_valueContext {
	var p = new(Pragma_valueContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_pragma_value
	return p
}

func InitEmptyPragma_valueContext(p *Pragma_valueContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_pragma_value
}

func (*Pragma_valueContext) IsPragma_valueContext() {}

func NewPragma_valueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Pragma_valueContext {
	var p = new(Pragma_valueContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_pragma_value

	return p
}

func (s *Pragma_valueContext) GetParser() antlr.Parser { return s.parser }

func (s *Pragma_valueContext) Signed_number() ISigned_numberContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISigned_numberContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISigned_numberContext)
}

func (s *Pragma_valueContext) Name() INameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *Pragma_valueContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(SQLiteParserSTRING_LITERAL, 0)
}

func (s *Pragma_valueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Pragma_valueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Pragma_valueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterPragma_value(s)
	}
}

func (s *Pragma_valueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitPragma_value(s)
	}
}

func (s *Pragma_valueContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitPragma_value(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Pragma_value() (localctx IPragma_valueContext) {
	localctx = NewPragma_valueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 72, SQLiteParserRULE_pragma_value)
	p.SetState(1161)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case SQLiteParserPLUS, SQLiteParserMINUS, SQLiteParserNUMERIC_LITERAL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1158)
			p.Signed_number()
		}

	case SQLiteParserOPEN_PAR, SQLiteParserIDENTIFIER:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1159)
			p.Name()
		}

	case SQLiteParserSTRING_LITERAL:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1160)
			p.Match(SQLiteParserSTRING_LITERAL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IReindex_stmtContext is an interface to support dynamic dispatch.
type IReindex_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	REINDEX_() antlr.TerminalNode
	Collation_name() ICollation_nameContext
	Table_name() ITable_nameContext
	Index_name() IIndex_nameContext
	Schema_name() ISchema_nameContext
	DOT() antlr.TerminalNode

	// IsReindex_stmtContext differentiates from other interfaces.
	IsReindex_stmtContext()
}

type Reindex_stmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReindex_stmtContext() *Reindex_stmtContext {
	var p = new(Reindex_stmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_reindex_stmt
	return p
}

func InitEmptyReindex_stmtContext(p *Reindex_stmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_reindex_stmt
}

func (*Reindex_stmtContext) IsReindex_stmtContext() {}

func NewReindex_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Reindex_stmtContext {
	var p = new(Reindex_stmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_reindex_stmt

	return p
}

func (s *Reindex_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Reindex_stmtContext) REINDEX_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserREINDEX_, 0)
}

func (s *Reindex_stmtContext) Collation_name() ICollation_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICollation_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICollation_nameContext)
}

func (s *Reindex_stmtContext) Table_name() ITable_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Reindex_stmtContext) Index_name() IIndex_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIndex_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIndex_nameContext)
}

func (s *Reindex_stmtContext) Schema_name() ISchema_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISchema_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISchema_nameContext)
}

func (s *Reindex_stmtContext) DOT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDOT, 0)
}

func (s *Reindex_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Reindex_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Reindex_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterReindex_stmt(s)
	}
}

func (s *Reindex_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitReindex_stmt(s)
	}
}

func (s *Reindex_stmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitReindex_stmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Reindex_stmt() (localctx IReindex_stmtContext) {
	localctx = NewReindex_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 74, SQLiteParserRULE_reindex_stmt)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1163)
		p.Match(SQLiteParserREINDEX_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1174)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 160, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1164)
			p.Collation_name()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	} else if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 160, p.GetParserRuleContext()) == 2 {
		p.SetState(1168)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 158, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1165)
				p.Schema_name()
			}
			{
				p.SetState(1166)
				p.Match(SQLiteParserDOT)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(1172)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 159, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(1170)
				p.Table_name()
			}

		case 2:
			{
				p.SetState(1171)
				p.Index_name()
			}

		case antlr.ATNInvalidAltNumber:
			goto errorExit
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISelect_stmtContext is an interface to support dynamic dispatch.
type ISelect_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Select_core() ISelect_coreContext
	With_clause() IWith_clauseContext
	AllCompound_select() []ICompound_selectContext
	Compound_select(i int) ICompound_selectContext
	Order_by_stmt() IOrder_by_stmtContext
	Limit_stmt() ILimit_stmtContext

	// IsSelect_stmtContext differentiates from other interfaces.
	IsSelect_stmtContext()
}

type Select_stmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelect_stmtContext() *Select_stmtContext {
	var p = new(Select_stmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_select_stmt
	return p
}

func InitEmptySelect_stmtContext(p *Select_stmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_select_stmt
}

func (*Select_stmtContext) IsSelect_stmtContext() {}

func NewSelect_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Select_stmtContext {
	var p = new(Select_stmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_select_stmt

	return p
}

func (s *Select_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Select_stmtContext) Select_core() ISelect_coreContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelect_coreContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelect_coreContext)
}

func (s *Select_stmtContext) With_clause() IWith_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWith_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWith_clauseContext)
}

func (s *Select_stmtContext) AllCompound_select() []ICompound_selectContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ICompound_selectContext); ok {
			len++
		}
	}

	tst := make([]ICompound_selectContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ICompound_selectContext); ok {
			tst[i] = t.(ICompound_selectContext)
			i++
		}
	}

	return tst
}

func (s *Select_stmtContext) Compound_select(i int) ICompound_selectContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICompound_selectContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICompound_selectContext)
}

func (s *Select_stmtContext) Order_by_stmt() IOrder_by_stmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOrder_by_stmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOrder_by_stmtContext)
}

func (s *Select_stmtContext) Limit_stmt() ILimit_stmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILimit_stmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILimit_stmtContext)
}

func (s *Select_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Select_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Select_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterSelect_stmt(s)
	}
}

func (s *Select_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitSelect_stmt(s)
	}
}

func (s *Select_stmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitSelect_stmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Select_stmt() (localctx ISelect_stmtContext) {
	localctx = NewSelect_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 76, SQLiteParserRULE_select_stmt)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1177)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserWITH_ {
		{
			p.SetState(1176)
			p.With_clause()
		}

	}
	{
		p.SetState(1179)
		p.Select_core()
	}
	p.SetState(1183)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == SQLiteParserEXCEPT_ || _la == SQLiteParserINTERSECT_ || _la == SQLiteParserUNION_ {
		{
			p.SetState(1180)
			p.Compound_select()
		}

		p.SetState(1185)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(1187)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserORDER_ {
		{
			p.SetState(1186)
			p.Order_by_stmt()
		}

	}
	p.SetState(1190)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserLIMIT_ {
		{
			p.SetState(1189)
			p.Limit_stmt()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISelect_coreContext is an interface to support dynamic dispatch.
type ISelect_coreContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetHavingExpr returns the havingExpr rule contexts.
	GetHavingExpr() IExprContext

	// SetHavingExpr sets the havingExpr rule contexts.
	SetHavingExpr(IExprContext)

	// Getter signatures
	SELECT_() antlr.TerminalNode
	AllResult_column() []IResult_columnContext
	Result_column(i int) IResult_columnContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode
	FROM_() antlr.TerminalNode
	From_item() IFrom_itemContext
	Where_stmt() IWhere_stmtContext
	GROUP_() antlr.TerminalNode
	BY_() antlr.TerminalNode
	Group_by_stmt() IGroup_by_stmtContext
	WINDOW_() antlr.TerminalNode
	AllWindow_stmt() []IWindow_stmtContext
	Window_stmt(i int) IWindow_stmtContext
	DISTINCT_() antlr.TerminalNode
	ALL_() antlr.TerminalNode
	HAVING_() antlr.TerminalNode
	Expr() IExprContext
	Values_clause() IValues_clauseContext

	// IsSelect_coreContext differentiates from other interfaces.
	IsSelect_coreContext()
}

type Select_coreContext struct {
	antlr.BaseParserRuleContext
	parser     antlr.Parser
	havingExpr IExprContext
}

func NewEmptySelect_coreContext() *Select_coreContext {
	var p = new(Select_coreContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_select_core
	return p
}

func InitEmptySelect_coreContext(p *Select_coreContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_select_core
}

func (*Select_coreContext) IsSelect_coreContext() {}

func NewSelect_coreContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Select_coreContext {
	var p = new(Select_coreContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_select_core

	return p
}

func (s *Select_coreContext) GetParser() antlr.Parser { return s.parser }

func (s *Select_coreContext) GetHavingExpr() IExprContext { return s.havingExpr }

func (s *Select_coreContext) SetHavingExpr(v IExprContext) { s.havingExpr = v }

func (s *Select_coreContext) SELECT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserSELECT_, 0)
}

func (s *Select_coreContext) AllResult_column() []IResult_columnContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IResult_columnContext); ok {
			len++
		}
	}

	tst := make([]IResult_columnContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IResult_columnContext); ok {
			tst[i] = t.(IResult_columnContext)
			i++
		}
	}

	return tst
}

func (s *Select_coreContext) Result_column(i int) IResult_columnContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IResult_columnContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IResult_columnContext)
}

func (s *Select_coreContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserCOMMA)
}

func (s *Select_coreContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, i)
}

func (s *Select_coreContext) FROM_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserFROM_, 0)
}

func (s *Select_coreContext) From_item() IFrom_itemContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFrom_itemContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFrom_itemContext)
}

func (s *Select_coreContext) Where_stmt() IWhere_stmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWhere_stmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWhere_stmtContext)
}

func (s *Select_coreContext) GROUP_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserGROUP_, 0)
}

func (s *Select_coreContext) BY_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserBY_, 0)
}

func (s *Select_coreContext) Group_by_stmt() IGroup_by_stmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGroup_by_stmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGroup_by_stmtContext)
}

func (s *Select_coreContext) WINDOW_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserWINDOW_, 0)
}

func (s *Select_coreContext) AllWindow_stmt() []IWindow_stmtContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IWindow_stmtContext); ok {
			len++
		}
	}

	tst := make([]IWindow_stmtContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IWindow_stmtContext); ok {
			tst[i] = t.(IWindow_stmtContext)
			i++
		}
	}

	return tst
}

func (s *Select_coreContext) Window_stmt(i int) IWindow_stmtContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWindow_stmtContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWindow_stmtContext)
}

func (s *Select_coreContext) DISTINCT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDISTINCT_, 0)
}

func (s *Select_coreContext) ALL_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserALL_, 0)
}

func (s *Select_coreContext) HAVING_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserHAVING_, 0)
}

func (s *Select_coreContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Select_coreContext) Values_clause() IValues_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IValues_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IValues_clauseContext)
}

func (s *Select_coreContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Select_coreContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Select_coreContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterSelect_core(s)
	}
}

func (s *Select_coreContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitSelect_core(s)
	}
}

func (s *Select_coreContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitSelect_core(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Select_core() (localctx ISelect_coreContext) {
	localctx = NewSelect_coreContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 78, SQLiteParserRULE_select_core)
	var _la int

	p.SetState(1232)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case SQLiteParserSELECT_:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1192)
			p.Match(SQLiteParserSELECT_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1194)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserALL_ || _la == SQLiteParserDISTINCT_ {
			{
				p.SetState(1193)
				_la = p.GetTokenStream().LA(1)

				if !(_la == SQLiteParserALL_ || _la == SQLiteParserDISTINCT_) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}
		{
			p.SetState(1196)
			p.Result_column()
		}
		p.SetState(1201)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == SQLiteParserCOMMA {
			{
				p.SetState(1197)
				p.Match(SQLiteParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1198)
				p.Result_column()
			}

			p.SetState(1203)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(1206)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserFROM_ {
			{
				p.SetState(1204)
				p.Match(SQLiteParserFROM_)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1205)
				p.From_item()
			}

		}
		p.SetState(1209)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserWHERE_ {
			{
				p.SetState(1208)
				p.Where_stmt()
			}

		}
		p.SetState(1218)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserGROUP_ {
			{
				p.SetState(1211)
				p.Match(SQLiteParserGROUP_)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1212)
				p.Match(SQLiteParserBY_)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1213)
				p.Group_by_stmt()
			}
			p.SetState(1216)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			if _la == SQLiteParserHAVING_ {
				{
					p.SetState(1214)
					p.Match(SQLiteParserHAVING_)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(1215)

					var _x = p.expr(0)

					localctx.(*Select_coreContext).havingExpr = _x
				}

			}

		}
		p.SetState(1229)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserWINDOW_ {
			{
				p.SetState(1220)
				p.Match(SQLiteParserWINDOW_)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1221)
				p.Window_stmt()
			}
			p.SetState(1226)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			for _la == SQLiteParserCOMMA {
				{
					p.SetState(1222)
					p.Match(SQLiteParserCOMMA)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(1223)
					p.Window_stmt()
				}

				p.SetState(1228)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)
			}

		}

	case SQLiteParserVALUES_:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1231)
			p.Values_clause()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IResult_columnContext is an interface to support dynamic dispatch.
type IResult_columnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	STAR() antlr.TerminalNode
	Table_name() ITable_nameContext
	DOT() antlr.TerminalNode
	Expr() IExprContext
	Alias() IAliasContext
	AS_() antlr.TerminalNode

	// IsResult_columnContext differentiates from other interfaces.
	IsResult_columnContext()
}

type Result_columnContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyResult_columnContext() *Result_columnContext {
	var p = new(Result_columnContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_result_column
	return p
}

func InitEmptyResult_columnContext(p *Result_columnContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_result_column
}

func (*Result_columnContext) IsResult_columnContext() {}

func NewResult_columnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Result_columnContext {
	var p = new(Result_columnContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_result_column

	return p
}

func (s *Result_columnContext) GetParser() antlr.Parser { return s.parser }

func (s *Result_columnContext) STAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserSTAR, 0)
}

func (s *Result_columnContext) Table_name() ITable_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Result_columnContext) DOT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDOT, 0)
}

func (s *Result_columnContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Result_columnContext) Alias() IAliasContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAliasContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAliasContext)
}

func (s *Result_columnContext) AS_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserAS_, 0)
}

func (s *Result_columnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Result_columnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Result_columnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterResult_column(s)
	}
}

func (s *Result_columnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitResult_column(s)
	}
}

func (s *Result_columnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitResult_column(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Result_column() (localctx IResult_columnContext) {
	localctx = NewResult_columnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 80, SQLiteParserRULE_result_column)
	var _la int

	p.SetState(1246)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 176, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1234)
			p.Match(SQLiteParserSTAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1235)
			p.Table_name()
		}
		{
			p.SetState(1236)
			p.Match(SQLiteParserDOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1237)
			p.Match(SQLiteParserSTAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1239)
			p.expr(0)
		}
		p.SetState(1244)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserOPEN_PAR || _la == SQLiteParserAS_ || _la == SQLiteParserIDENTIFIER {
			p.SetState(1241)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			if _la == SQLiteParserAS_ {
				{
					p.SetState(1240)
					p.Match(SQLiteParserAS_)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			{
				p.SetState(1243)
				p.Alias()
			}

		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFrom_itemContext is an interface to support dynamic dispatch.
type IFrom_itemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllTable_or_subquery() []ITable_or_subqueryContext
	Table_or_subquery(i int) ITable_or_subqueryContext
	AllJoin_operator() []IJoin_operatorContext
	Join_operator(i int) IJoin_operatorContext
	AllJoin_constraint() []IJoin_constraintContext
	Join_constraint(i int) IJoin_constraintContext

	// IsFrom_itemContext differentiates from other interfaces.
	IsFrom_itemContext()
}

type From_itemContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFrom_itemContext() *From_itemContext {
	var p = new(From_itemContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_from_item
	return p
}

func InitEmptyFrom_itemContext(p *From_itemContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_from_item
}

func (*From_itemContext) IsFrom_itemContext() {}

func NewFrom_itemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *From_itemContext {
	var p = new(From_itemContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_from_item

	return p
}

func (s *From_itemContext) GetParser() antlr.Parser { return s.parser }

func (s *From_itemContext) AllTable_or_subquery() []ITable_or_subqueryContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITable_or_subqueryContext); ok {
			len++
		}
	}

	tst := make([]ITable_or_subqueryContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITable_or_subqueryContext); ok {
			tst[i] = t.(ITable_or_subqueryContext)
			i++
		}
	}

	return tst
}

func (s *From_itemContext) Table_or_subquery(i int) ITable_or_subqueryContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_or_subqueryContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_or_subqueryContext)
}

func (s *From_itemContext) AllJoin_operator() []IJoin_operatorContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IJoin_operatorContext); ok {
			len++
		}
	}

	tst := make([]IJoin_operatorContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IJoin_operatorContext); ok {
			tst[i] = t.(IJoin_operatorContext)
			i++
		}
	}

	return tst
}

func (s *From_itemContext) Join_operator(i int) IJoin_operatorContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IJoin_operatorContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IJoin_operatorContext)
}

func (s *From_itemContext) AllJoin_constraint() []IJoin_constraintContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IJoin_constraintContext); ok {
			len++
		}
	}

	tst := make([]IJoin_constraintContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IJoin_constraintContext); ok {
			tst[i] = t.(IJoin_constraintContext)
			i++
		}
	}

	return tst
}

func (s *From_itemContext) Join_constraint(i int) IJoin_constraintContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IJoin_constraintContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IJoin_constraintContext)
}

func (s *From_itemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *From_itemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *From_itemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterFrom_item(s)
	}
}

func (s *From_itemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitFrom_item(s)
	}
}

func (s *From_itemContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitFrom_item(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) From_item() (localctx IFrom_itemContext) {
	localctx = NewFrom_itemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 82, SQLiteParserRULE_from_item)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1248)
		p.Table_or_subquery()
	}
	p.SetState(1256)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == SQLiteParserCOMMA || _la == SQLiteParserCROSS_ || ((int64((_la-78)) & ^0x3f) == 0 && ((int64(1)<<(_la-78))&1125899941709825) != 0) {
		{
			p.SetState(1249)
			p.Join_operator()
		}
		{
			p.SetState(1250)
			p.Table_or_subquery()
		}
		p.SetState(1252)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 177, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1251)
				p.Join_constraint()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

		p.SetState(1258)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IJoin_operatorContext is an interface to support dynamic dispatch.
type IJoin_operatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	COMMA() antlr.TerminalNode
	JOIN_() antlr.TerminalNode
	CROSS_() antlr.TerminalNode
	LEFT_() antlr.TerminalNode
	RIGHT_() antlr.TerminalNode
	FULL_() antlr.TerminalNode
	NATURAL_() antlr.TerminalNode
	OUTER_() antlr.TerminalNode
	INNER_() antlr.TerminalNode

	// IsJoin_operatorContext differentiates from other interfaces.
	IsJoin_operatorContext()
}

type Join_operatorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyJoin_operatorContext() *Join_operatorContext {
	var p = new(Join_operatorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_join_operator
	return p
}

func InitEmptyJoin_operatorContext(p *Join_operatorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_join_operator
}

func (*Join_operatorContext) IsJoin_operatorContext() {}

func NewJoin_operatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Join_operatorContext {
	var p = new(Join_operatorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_join_operator

	return p
}

func (s *Join_operatorContext) GetParser() antlr.Parser { return s.parser }

func (s *Join_operatorContext) COMMA() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, 0)
}

func (s *Join_operatorContext) JOIN_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserJOIN_, 0)
}

func (s *Join_operatorContext) CROSS_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCROSS_, 0)
}

func (s *Join_operatorContext) LEFT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserLEFT_, 0)
}

func (s *Join_operatorContext) RIGHT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserRIGHT_, 0)
}

func (s *Join_operatorContext) FULL_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserFULL_, 0)
}

func (s *Join_operatorContext) NATURAL_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserNATURAL_, 0)
}

func (s *Join_operatorContext) OUTER_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserOUTER_, 0)
}

func (s *Join_operatorContext) INNER_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserINNER_, 0)
}

func (s *Join_operatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Join_operatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Join_operatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterJoin_operator(s)
	}
}

func (s *Join_operatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitJoin_operator(s)
	}
}

func (s *Join_operatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitJoin_operator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Join_operator() (localctx IJoin_operatorContext) {
	localctx = NewJoin_operatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 84, SQLiteParserRULE_join_operator)
	var _la int

	p.SetState(1279)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 184, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(1264)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetTokenStream().LA(1) {
		case SQLiteParserCOMMA:
			{
				p.SetState(1259)
				p.Match(SQLiteParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		case SQLiteParserCROSS_, SQLiteParserJOIN_:
			p.SetState(1261)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			if _la == SQLiteParserCROSS_ {
				{
					p.SetState(1260)
					p.Match(SQLiteParserCROSS_)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			{
				p.SetState(1263)
				p.Match(SQLiteParserJOIN_)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		default:
			p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			goto errorExit
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(1267)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserNATURAL_ {
			{
				p.SetState(1266)
				p.Match(SQLiteParserNATURAL_)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(1269)
			_la = p.GetTokenStream().LA(1)

			if !((int64((_la-78)) & ^0x3f) == 0 && ((int64(1)<<(_la-78))&1125899907891201) != 0) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(1271)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserOUTER_ {
			{
				p.SetState(1270)
				p.Match(SQLiteParserOUTER_)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(1273)
			p.Match(SQLiteParserJOIN_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		p.SetState(1275)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserNATURAL_ {
			{
				p.SetState(1274)
				p.Match(SQLiteParserNATURAL_)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(1277)
			p.Match(SQLiteParserINNER_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1278)
			p.Match(SQLiteParserJOIN_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IJoin_constraintContext is an interface to support dynamic dispatch.
type IJoin_constraintContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ON_() antlr.TerminalNode
	Expr() IExprContext
	USING_() antlr.TerminalNode
	OPEN_PAR() antlr.TerminalNode
	AllColumn_name() []IColumn_nameContext
	Column_name(i int) IColumn_nameContext
	CLOSE_PAR() antlr.TerminalNode
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsJoin_constraintContext differentiates from other interfaces.
	IsJoin_constraintContext()
}

type Join_constraintContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyJoin_constraintContext() *Join_constraintContext {
	var p = new(Join_constraintContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_join_constraint
	return p
}

func InitEmptyJoin_constraintContext(p *Join_constraintContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_join_constraint
}

func (*Join_constraintContext) IsJoin_constraintContext() {}

func NewJoin_constraintContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Join_constraintContext {
	var p = new(Join_constraintContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_join_constraint

	return p
}

func (s *Join_constraintContext) GetParser() antlr.Parser { return s.parser }

func (s *Join_constraintContext) ON_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserON_, 0)
}

func (s *Join_constraintContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Join_constraintContext) USING_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserUSING_, 0)
}

func (s *Join_constraintContext) OPEN_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserOPEN_PAR, 0)
}

func (s *Join_constraintContext) AllColumn_name() []IColumn_nameContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumn_nameContext); ok {
			len++
		}
	}

	tst := make([]IColumn_nameContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumn_nameContext); ok {
			tst[i] = t.(IColumn_nameContext)
			i++
		}
	}

	return tst
}

func (s *Join_constraintContext) Column_name(i int) IColumn_nameContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_nameContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *Join_constraintContext) CLOSE_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCLOSE_PAR, 0)
}

func (s *Join_constraintContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserCOMMA)
}

func (s *Join_constraintContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, i)
}

func (s *Join_constraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Join_constraintContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Join_constraintContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterJoin_constraint(s)
	}
}

func (s *Join_constraintContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitJoin_constraint(s)
	}
}

func (s *Join_constraintContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitJoin_constraint(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Join_constraint() (localctx IJoin_constraintContext) {
	localctx = NewJoin_constraintContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 86, SQLiteParserRULE_join_constraint)
	var _la int

	p.SetState(1295)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case SQLiteParserON_:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1281)
			p.Match(SQLiteParserON_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1282)
			p.expr(0)
		}

	case SQLiteParserUSING_:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1283)
			p.Match(SQLiteParserUSING_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1284)
			p.Match(SQLiteParserOPEN_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1285)
			p.Column_name()
		}
		p.SetState(1290)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == SQLiteParserCOMMA {
			{
				p.SetState(1286)
				p.Match(SQLiteParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1287)
				p.Column_name()
			}

			p.SetState(1292)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1293)
			p.Match(SQLiteParserCLOSE_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITable_or_subqueryContext is an interface to support dynamic dispatch.
type ITable_or_subqueryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Table_name() ITable_nameContext
	Schema_name() ISchema_nameContext
	DOT() antlr.TerminalNode
	Table_alias() ITable_aliasContext
	INDEXED_() antlr.TerminalNode
	BY_() antlr.TerminalNode
	Index_name() IIndex_nameContext
	NOT_() antlr.TerminalNode
	AS_() antlr.TerminalNode
	Table_function_name() ITable_function_nameContext
	OPEN_PAR() antlr.TerminalNode
	AllExpr() []IExprContext
	Expr(i int) IExprContext
	CLOSE_PAR() antlr.TerminalNode
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode
	Select_stmt() ISelect_stmtContext
	Table_or_subquery() ITable_or_subqueryContext

	// IsTable_or_subqueryContext differentiates from other interfaces.
	IsTable_or_subqueryContext()
}

type Table_or_subqueryContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_or_subqueryContext() *Table_or_subqueryContext {
	var p = new(Table_or_subqueryContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_table_or_subquery
	return p
}

func InitEmptyTable_or_subqueryContext(p *Table_or_subqueryContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_table_or_subquery
}

func (*Table_or_subqueryContext) IsTable_or_subqueryContext() {}

func NewTable_or_subqueryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_or_subqueryContext {
	var p = new(Table_or_subqueryContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_table_or_subquery

	return p
}

func (s *Table_or_subqueryContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_or_subqueryContext) Table_name() ITable_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Table_or_subqueryContext) Schema_name() ISchema_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISchema_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISchema_nameContext)
}

func (s *Table_or_subqueryContext) DOT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDOT, 0)
}

func (s *Table_or_subqueryContext) Table_alias() ITable_aliasContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_aliasContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_aliasContext)
}

func (s *Table_or_subqueryContext) INDEXED_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserINDEXED_, 0)
}

func (s *Table_or_subqueryContext) BY_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserBY_, 0)
}

func (s *Table_or_subqueryContext) Index_name() IIndex_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIndex_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIndex_nameContext)
}

func (s *Table_or_subqueryContext) NOT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserNOT_, 0)
}

func (s *Table_or_subqueryContext) AS_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserAS_, 0)
}

func (s *Table_or_subqueryContext) Table_function_name() ITable_function_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_function_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_function_nameContext)
}

func (s *Table_or_subqueryContext) OPEN_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserOPEN_PAR, 0)
}

func (s *Table_or_subqueryContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *Table_or_subqueryContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Table_or_subqueryContext) CLOSE_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCLOSE_PAR, 0)
}

func (s *Table_or_subqueryContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserCOMMA)
}

func (s *Table_or_subqueryContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, i)
}

func (s *Table_or_subqueryContext) Select_stmt() ISelect_stmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelect_stmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelect_stmtContext)
}

func (s *Table_or_subqueryContext) Table_or_subquery() ITable_or_subqueryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_or_subqueryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_or_subqueryContext)
}

func (s *Table_or_subqueryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_or_subqueryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Table_or_subqueryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterTable_or_subquery(s)
	}
}

func (s *Table_or_subqueryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitTable_or_subquery(s)
	}
}

func (s *Table_or_subqueryContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitTable_or_subquery(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Table_or_subquery() (localctx ITable_or_subqueryContext) {
	localctx = NewTable_or_subqueryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 88, SQLiteParserRULE_table_or_subquery)
	var _la int

	p.SetState(1351)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 197, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(1300)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 187, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1297)
				p.Schema_name()
			}
			{
				p.SetState(1298)
				p.Match(SQLiteParserDOT)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		{
			p.SetState(1302)
			p.Table_name()
		}
		p.SetState(1307)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserOPEN_PAR || _la == SQLiteParserAS_ || _la == SQLiteParserIDENTIFIER {
			p.SetState(1304)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			if _la == SQLiteParserAS_ {
				{
					p.SetState(1303)
					p.Match(SQLiteParserAS_)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			{
				p.SetState(1306)
				p.Table_alias()
			}

		}
		p.SetState(1314)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		switch p.GetTokenStream().LA(1) {
		case SQLiteParserINDEXED_:
			{
				p.SetState(1309)
				p.Match(SQLiteParserINDEXED_)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1310)
				p.Match(SQLiteParserBY_)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1311)
				p.Index_name()
			}

		case SQLiteParserNOT_:
			{
				p.SetState(1312)
				p.Match(SQLiteParserNOT_)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1313)
				p.Match(SQLiteParserINDEXED_)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		case SQLiteParserEOF, SQLiteParserSCOL, SQLiteParserCLOSE_PAR, SQLiteParserCOMMA, SQLiteParserCROSS_, SQLiteParserEXCEPT_, SQLiteParserFULL_, SQLiteParserGROUP_, SQLiteParserINNER_, SQLiteParserINTERSECT_, SQLiteParserJOIN_, SQLiteParserLEFT_, SQLiteParserLIMIT_, SQLiteParserNATURAL_, SQLiteParserON_, SQLiteParserORDER_, SQLiteParserRETURNING_, SQLiteParserRIGHT_, SQLiteParserUNION_, SQLiteParserUSING_, SQLiteParserWHERE_, SQLiteParserWINDOW_:

		default:
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(1319)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 191, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1316)
				p.Schema_name()
			}
			{
				p.SetState(1317)
				p.Match(SQLiteParserDOT)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		{
			p.SetState(1321)
			p.Table_function_name()
		}
		{
			p.SetState(1322)
			p.Match(SQLiteParserOPEN_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1323)
			p.expr(0)
		}
		p.SetState(1328)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == SQLiteParserCOMMA {
			{
				p.SetState(1324)
				p.Match(SQLiteParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1325)
				p.expr(0)
			}

			p.SetState(1330)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1331)
			p.Match(SQLiteParserCLOSE_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1336)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserOPEN_PAR || _la == SQLiteParserAS_ || _la == SQLiteParserIDENTIFIER {
			p.SetState(1333)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			if _la == SQLiteParserAS_ {
				{
					p.SetState(1332)
					p.Match(SQLiteParserAS_)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			{
				p.SetState(1335)
				p.Table_alias()
			}

		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1338)
			p.Match(SQLiteParserOPEN_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1339)
			p.Select_stmt()
		}
		{
			p.SetState(1340)
			p.Match(SQLiteParserCLOSE_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1345)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserOPEN_PAR || _la == SQLiteParserAS_ || _la == SQLiteParserIDENTIFIER {
			p.SetState(1342)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			if _la == SQLiteParserAS_ {
				{
					p.SetState(1341)
					p.Match(SQLiteParserAS_)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			{
				p.SetState(1344)
				p.Table_alias()
			}

		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1347)
			p.Match(SQLiteParserOPEN_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1348)
			p.Table_or_subquery()
		}
		{
			p.SetState(1349)
			p.Match(SQLiteParserCLOSE_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICompound_selectContext is an interface to support dynamic dispatch.
type ICompound_selectContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Compound_operator() ICompound_operatorContext
	Select_core() ISelect_coreContext

	// IsCompound_selectContext differentiates from other interfaces.
	IsCompound_selectContext()
}

type Compound_selectContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCompound_selectContext() *Compound_selectContext {
	var p = new(Compound_selectContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_compound_select
	return p
}

func InitEmptyCompound_selectContext(p *Compound_selectContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_compound_select
}

func (*Compound_selectContext) IsCompound_selectContext() {}

func NewCompound_selectContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Compound_selectContext {
	var p = new(Compound_selectContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_compound_select

	return p
}

func (s *Compound_selectContext) GetParser() antlr.Parser { return s.parser }

func (s *Compound_selectContext) Compound_operator() ICompound_operatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICompound_operatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICompound_operatorContext)
}

func (s *Compound_selectContext) Select_core() ISelect_coreContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelect_coreContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelect_coreContext)
}

func (s *Compound_selectContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Compound_selectContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Compound_selectContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterCompound_select(s)
	}
}

func (s *Compound_selectContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitCompound_select(s)
	}
}

func (s *Compound_selectContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitCompound_select(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Compound_select() (localctx ICompound_selectContext) {
	localctx = NewCompound_selectContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 90, SQLiteParserRULE_compound_select)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1353)
		p.Compound_operator()
	}
	{
		p.SetState(1354)
		p.Select_core()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICompound_operatorContext is an interface to support dynamic dispatch.
type ICompound_operatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	UNION_() antlr.TerminalNode
	ALL_() antlr.TerminalNode
	INTERSECT_() antlr.TerminalNode
	EXCEPT_() antlr.TerminalNode

	// IsCompound_operatorContext differentiates from other interfaces.
	IsCompound_operatorContext()
}

type Compound_operatorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCompound_operatorContext() *Compound_operatorContext {
	var p = new(Compound_operatorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_compound_operator
	return p
}

func InitEmptyCompound_operatorContext(p *Compound_operatorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_compound_operator
}

func (*Compound_operatorContext) IsCompound_operatorContext() {}

func NewCompound_operatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Compound_operatorContext {
	var p = new(Compound_operatorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_compound_operator

	return p
}

func (s *Compound_operatorContext) GetParser() antlr.Parser { return s.parser }

func (s *Compound_operatorContext) UNION_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserUNION_, 0)
}

func (s *Compound_operatorContext) ALL_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserALL_, 0)
}

func (s *Compound_operatorContext) INTERSECT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserINTERSECT_, 0)
}

func (s *Compound_operatorContext) EXCEPT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserEXCEPT_, 0)
}

func (s *Compound_operatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Compound_operatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Compound_operatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterCompound_operator(s)
	}
}

func (s *Compound_operatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitCompound_operator(s)
	}
}

func (s *Compound_operatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitCompound_operator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Compound_operator() (localctx ICompound_operatorContext) {
	localctx = NewCompound_operatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 92, SQLiteParserRULE_compound_operator)
	var _la int

	p.SetState(1362)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case SQLiteParserUNION_:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1356)
			p.Match(SQLiteParserUNION_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1358)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserALL_ {
			{
				p.SetState(1357)
				p.Match(SQLiteParserALL_)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}

	case SQLiteParserINTERSECT_:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1360)
			p.Match(SQLiteParserINTERSECT_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case SQLiteParserEXCEPT_:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1361)
			p.Match(SQLiteParserEXCEPT_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IUpdate_stmtContext is an interface to support dynamic dispatch.
type IUpdate_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	UPDATE_() antlr.TerminalNode
	Qualified_table_name() IQualified_table_nameContext
	SET_() antlr.TerminalNode
	AllEQ() []antlr.TerminalNode
	EQ(i int) antlr.TerminalNode
	AllExpr() []IExprContext
	Expr(i int) IExprContext
	AllColumn_name() []IColumn_nameContext
	Column_name(i int) IColumn_nameContext
	AllColumn_name_list() []IColumn_name_listContext
	Column_name_list(i int) IColumn_name_listContext
	With_clause() IWith_clauseContext
	OR_() antlr.TerminalNode
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode
	FROM_() antlr.TerminalNode
	From_item() IFrom_itemContext
	Where_stmt() IWhere_stmtContext
	Returning_clause() IReturning_clauseContext
	Limit_stmt() ILimit_stmtContext
	ROLLBACK_() antlr.TerminalNode
	ABORT_() antlr.TerminalNode
	REPLACE_() antlr.TerminalNode
	FAIL_() antlr.TerminalNode
	IGNORE_() antlr.TerminalNode
	Order_by_stmt() IOrder_by_stmtContext

	// IsUpdate_stmtContext differentiates from other interfaces.
	IsUpdate_stmtContext()
}

type Update_stmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUpdate_stmtContext() *Update_stmtContext {
	var p = new(Update_stmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_update_stmt
	return p
}

func InitEmptyUpdate_stmtContext(p *Update_stmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_update_stmt
}

func (*Update_stmtContext) IsUpdate_stmtContext() {}

func NewUpdate_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Update_stmtContext {
	var p = new(Update_stmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_update_stmt

	return p
}

func (s *Update_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Update_stmtContext) UPDATE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserUPDATE_, 0)
}

func (s *Update_stmtContext) Qualified_table_name() IQualified_table_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQualified_table_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQualified_table_nameContext)
}

func (s *Update_stmtContext) SET_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserSET_, 0)
}

func (s *Update_stmtContext) AllEQ() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserEQ)
}

func (s *Update_stmtContext) EQ(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserEQ, i)
}

func (s *Update_stmtContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *Update_stmtContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Update_stmtContext) AllColumn_name() []IColumn_nameContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumn_nameContext); ok {
			len++
		}
	}

	tst := make([]IColumn_nameContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumn_nameContext); ok {
			tst[i] = t.(IColumn_nameContext)
			i++
		}
	}

	return tst
}

func (s *Update_stmtContext) Column_name(i int) IColumn_nameContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_nameContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *Update_stmtContext) AllColumn_name_list() []IColumn_name_listContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumn_name_listContext); ok {
			len++
		}
	}

	tst := make([]IColumn_name_listContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumn_name_listContext); ok {
			tst[i] = t.(IColumn_name_listContext)
			i++
		}
	}

	return tst
}

func (s *Update_stmtContext) Column_name_list(i int) IColumn_name_listContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_name_listContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_name_listContext)
}

func (s *Update_stmtContext) With_clause() IWith_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWith_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWith_clauseContext)
}

func (s *Update_stmtContext) OR_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserOR_, 0)
}

func (s *Update_stmtContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserCOMMA)
}

func (s *Update_stmtContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, i)
}

func (s *Update_stmtContext) FROM_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserFROM_, 0)
}

func (s *Update_stmtContext) From_item() IFrom_itemContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFrom_itemContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFrom_itemContext)
}

func (s *Update_stmtContext) Where_stmt() IWhere_stmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWhere_stmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWhere_stmtContext)
}

func (s *Update_stmtContext) Returning_clause() IReturning_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IReturning_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IReturning_clauseContext)
}

func (s *Update_stmtContext) Limit_stmt() ILimit_stmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILimit_stmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILimit_stmtContext)
}

func (s *Update_stmtContext) ROLLBACK_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserROLLBACK_, 0)
}

func (s *Update_stmtContext) ABORT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserABORT_, 0)
}

func (s *Update_stmtContext) REPLACE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserREPLACE_, 0)
}

func (s *Update_stmtContext) FAIL_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserFAIL_, 0)
}

func (s *Update_stmtContext) IGNORE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserIGNORE_, 0)
}

func (s *Update_stmtContext) Order_by_stmt() IOrder_by_stmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOrder_by_stmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOrder_by_stmtContext)
}

func (s *Update_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Update_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Update_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterUpdate_stmt(s)
	}
}

func (s *Update_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitUpdate_stmt(s)
	}
}

func (s *Update_stmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitUpdate_stmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Update_stmt() (localctx IUpdate_stmtContext) {
	localctx = NewUpdate_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 94, SQLiteParserRULE_update_stmt)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1365)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserWITH_ {
		{
			p.SetState(1364)
			p.With_clause()
		}

	}
	{
		p.SetState(1367)
		p.Match(SQLiteParserUPDATE_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1370)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserOR_ {
		{
			p.SetState(1368)
			p.Match(SQLiteParserOR_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1369)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLiteParserABORT_ || ((int64((_la-74)) & ^0x3f) == 0 && ((int64(1)<<(_la-74))&38280596832649729) != 0)) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	{
		p.SetState(1372)
		p.Qualified_table_name()
	}
	{
		p.SetState(1373)
		p.Match(SQLiteParserSET_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1376)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 202, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1374)
			p.Column_name()
		}

	case 2:
		{
			p.SetState(1375)
			p.Column_name_list()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}
	{
		p.SetState(1378)
		p.Match(SQLiteParserEQ)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1379)
		p.expr(0)
	}
	p.SetState(1390)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == SQLiteParserCOMMA {
		{
			p.SetState(1380)
			p.Match(SQLiteParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1383)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 203, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(1381)
				p.Column_name()
			}

		case 2:
			{
				p.SetState(1382)
				p.Column_name_list()
			}

		case antlr.ATNInvalidAltNumber:
			goto errorExit
		}
		{
			p.SetState(1385)
			p.Match(SQLiteParserEQ)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1386)
			p.expr(0)
		}

		p.SetState(1392)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(1395)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserFROM_ {
		{
			p.SetState(1393)
			p.Match(SQLiteParserFROM_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1394)
			p.From_item()
		}

	}
	p.SetState(1398)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserWHERE_ {
		{
			p.SetState(1397)
			p.Where_stmt()
		}

	}
	p.SetState(1401)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserRETURNING_ {
		{
			p.SetState(1400)
			p.Returning_clause()
		}

	}
	p.SetState(1407)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserLIMIT_ || _la == SQLiteParserORDER_ {
		p.SetState(1404)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserORDER_ {
			{
				p.SetState(1403)
				p.Order_by_stmt()
			}

		}
		{
			p.SetState(1406)
			p.Limit_stmt()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IColumn_name_listContext is an interface to support dynamic dispatch.
type IColumn_name_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	OPEN_PAR() antlr.TerminalNode
	AllColumn_name() []IColumn_nameContext
	Column_name(i int) IColumn_nameContext
	CLOSE_PAR() antlr.TerminalNode
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsColumn_name_listContext differentiates from other interfaces.
	IsColumn_name_listContext()
}

type Column_name_listContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumn_name_listContext() *Column_name_listContext {
	var p = new(Column_name_listContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_column_name_list
	return p
}

func InitEmptyColumn_name_listContext(p *Column_name_listContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_column_name_list
}

func (*Column_name_listContext) IsColumn_name_listContext() {}

func NewColumn_name_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Column_name_listContext {
	var p = new(Column_name_listContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_column_name_list

	return p
}

func (s *Column_name_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Column_name_listContext) OPEN_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserOPEN_PAR, 0)
}

func (s *Column_name_listContext) AllColumn_name() []IColumn_nameContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumn_nameContext); ok {
			len++
		}
	}

	tst := make([]IColumn_nameContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumn_nameContext); ok {
			tst[i] = t.(IColumn_nameContext)
			i++
		}
	}

	return tst
}

func (s *Column_name_listContext) Column_name(i int) IColumn_nameContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_nameContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *Column_name_listContext) CLOSE_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCLOSE_PAR, 0)
}

func (s *Column_name_listContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserCOMMA)
}

func (s *Column_name_listContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, i)
}

func (s *Column_name_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Column_name_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Column_name_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterColumn_name_list(s)
	}
}

func (s *Column_name_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitColumn_name_list(s)
	}
}

func (s *Column_name_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitColumn_name_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Column_name_list() (localctx IColumn_name_listContext) {
	localctx = NewColumn_name_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 96, SQLiteParserRULE_column_name_list)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1409)
		p.Match(SQLiteParserOPEN_PAR)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1410)
		p.Column_name()
	}
	p.SetState(1415)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == SQLiteParserCOMMA {
		{
			p.SetState(1411)
			p.Match(SQLiteParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1412)
			p.Column_name()
		}

		p.SetState(1417)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1418)
		p.Match(SQLiteParserCLOSE_PAR)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IQualified_table_nameContext is an interface to support dynamic dispatch.
type IQualified_table_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Table_name() ITable_nameContext
	Schema_name() ISchema_nameContext
	DOT() antlr.TerminalNode
	AS_() antlr.TerminalNode
	Alias() IAliasContext
	INDEXED_() antlr.TerminalNode
	BY_() antlr.TerminalNode
	Index_name() IIndex_nameContext
	NOT_() antlr.TerminalNode

	// IsQualified_table_nameContext differentiates from other interfaces.
	IsQualified_table_nameContext()
}

type Qualified_table_nameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyQualified_table_nameContext() *Qualified_table_nameContext {
	var p = new(Qualified_table_nameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_qualified_table_name
	return p
}

func InitEmptyQualified_table_nameContext(p *Qualified_table_nameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_qualified_table_name
}

func (*Qualified_table_nameContext) IsQualified_table_nameContext() {}

func NewQualified_table_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Qualified_table_nameContext {
	var p = new(Qualified_table_nameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_qualified_table_name

	return p
}

func (s *Qualified_table_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Qualified_table_nameContext) Table_name() ITable_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Qualified_table_nameContext) Schema_name() ISchema_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISchema_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISchema_nameContext)
}

func (s *Qualified_table_nameContext) DOT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDOT, 0)
}

func (s *Qualified_table_nameContext) AS_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserAS_, 0)
}

func (s *Qualified_table_nameContext) Alias() IAliasContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAliasContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAliasContext)
}

func (s *Qualified_table_nameContext) INDEXED_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserINDEXED_, 0)
}

func (s *Qualified_table_nameContext) BY_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserBY_, 0)
}

func (s *Qualified_table_nameContext) Index_name() IIndex_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIndex_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIndex_nameContext)
}

func (s *Qualified_table_nameContext) NOT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserNOT_, 0)
}

func (s *Qualified_table_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Qualified_table_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Qualified_table_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterQualified_table_name(s)
	}
}

func (s *Qualified_table_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitQualified_table_name(s)
	}
}

func (s *Qualified_table_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitQualified_table_name(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Qualified_table_name() (localctx IQualified_table_nameContext) {
	localctx = NewQualified_table_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 98, SQLiteParserRULE_qualified_table_name)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1423)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 211, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1420)
			p.Schema_name()
		}
		{
			p.SetState(1421)
			p.Match(SQLiteParserDOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	{
		p.SetState(1425)
		p.Table_name()
	}
	p.SetState(1428)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserAS_ {
		{
			p.SetState(1426)
			p.Match(SQLiteParserAS_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1427)
			p.Alias()
		}

	}
	p.SetState(1435)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	switch p.GetTokenStream().LA(1) {
	case SQLiteParserINDEXED_:
		{
			p.SetState(1430)
			p.Match(SQLiteParserINDEXED_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1431)
			p.Match(SQLiteParserBY_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1432)
			p.Index_name()
		}

	case SQLiteParserNOT_:
		{
			p.SetState(1433)
			p.Match(SQLiteParserNOT_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1434)
			p.Match(SQLiteParserINDEXED_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case SQLiteParserEOF, SQLiteParserSCOL, SQLiteParserLIMIT_, SQLiteParserORDER_, SQLiteParserRETURNING_, SQLiteParserSET_, SQLiteParserWHERE_:

	default:
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IVacuum_stmtContext is an interface to support dynamic dispatch.
type IVacuum_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	VACUUM_() antlr.TerminalNode
	Schema_name() ISchema_nameContext
	INTO_() antlr.TerminalNode
	Filename() IFilenameContext

	// IsVacuum_stmtContext differentiates from other interfaces.
	IsVacuum_stmtContext()
}

type Vacuum_stmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVacuum_stmtContext() *Vacuum_stmtContext {
	var p = new(Vacuum_stmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_vacuum_stmt
	return p
}

func InitEmptyVacuum_stmtContext(p *Vacuum_stmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_vacuum_stmt
}

func (*Vacuum_stmtContext) IsVacuum_stmtContext() {}

func NewVacuum_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Vacuum_stmtContext {
	var p = new(Vacuum_stmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_vacuum_stmt

	return p
}

func (s *Vacuum_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Vacuum_stmtContext) VACUUM_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserVACUUM_, 0)
}

func (s *Vacuum_stmtContext) Schema_name() ISchema_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISchema_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISchema_nameContext)
}

func (s *Vacuum_stmtContext) INTO_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserINTO_, 0)
}

func (s *Vacuum_stmtContext) Filename() IFilenameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFilenameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFilenameContext)
}

func (s *Vacuum_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Vacuum_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Vacuum_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterVacuum_stmt(s)
	}
}

func (s *Vacuum_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitVacuum_stmt(s)
	}
}

func (s *Vacuum_stmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitVacuum_stmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Vacuum_stmt() (localctx IVacuum_stmtContext) {
	localctx = NewVacuum_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 100, SQLiteParserRULE_vacuum_stmt)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1437)
		p.Match(SQLiteParserVACUUM_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1439)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserOPEN_PAR || _la == SQLiteParserIDENTIFIER {
		{
			p.SetState(1438)
			p.Schema_name()
		}

	}
	p.SetState(1443)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserINTO_ {
		{
			p.SetState(1441)
			p.Match(SQLiteParserINTO_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1442)
			p.Filename()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFilter_clauseContext is an interface to support dynamic dispatch.
type IFilter_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	FILTER_() antlr.TerminalNode
	OPEN_PAR() antlr.TerminalNode
	WHERE_() antlr.TerminalNode
	Expr() IExprContext
	CLOSE_PAR() antlr.TerminalNode

	// IsFilter_clauseContext differentiates from other interfaces.
	IsFilter_clauseContext()
}

type Filter_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFilter_clauseContext() *Filter_clauseContext {
	var p = new(Filter_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_filter_clause
	return p
}

func InitEmptyFilter_clauseContext(p *Filter_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_filter_clause
}

func (*Filter_clauseContext) IsFilter_clauseContext() {}

func NewFilter_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Filter_clauseContext {
	var p = new(Filter_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_filter_clause

	return p
}

func (s *Filter_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Filter_clauseContext) FILTER_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserFILTER_, 0)
}

func (s *Filter_clauseContext) OPEN_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserOPEN_PAR, 0)
}

func (s *Filter_clauseContext) WHERE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserWHERE_, 0)
}

func (s *Filter_clauseContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Filter_clauseContext) CLOSE_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCLOSE_PAR, 0)
}

func (s *Filter_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Filter_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Filter_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterFilter_clause(s)
	}
}

func (s *Filter_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitFilter_clause(s)
	}
}

func (s *Filter_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitFilter_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Filter_clause() (localctx IFilter_clauseContext) {
	localctx = NewFilter_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 102, SQLiteParserRULE_filter_clause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1445)
		p.Match(SQLiteParserFILTER_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1446)
		p.Match(SQLiteParserOPEN_PAR)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1447)
		p.Match(SQLiteParserWHERE_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1448)
		p.expr(0)
	}
	{
		p.SetState(1449)
		p.Match(SQLiteParserCLOSE_PAR)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IWindow_defnContext is an interface to support dynamic dispatch.
type IWindow_defnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	OPEN_PAR() antlr.TerminalNode
	CLOSE_PAR() antlr.TerminalNode
	Base_window_name() IBase_window_nameContext
	PARTITION_() antlr.TerminalNode
	BY_() antlr.TerminalNode
	AllExpr() []IExprContext
	Expr(i int) IExprContext
	Order_by_stmt() IOrder_by_stmtContext
	Frame_spec() IFrame_specContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsWindow_defnContext differentiates from other interfaces.
	IsWindow_defnContext()
}

type Window_defnContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWindow_defnContext() *Window_defnContext {
	var p = new(Window_defnContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_window_defn
	return p
}

func InitEmptyWindow_defnContext(p *Window_defnContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_window_defn
}

func (*Window_defnContext) IsWindow_defnContext() {}

func NewWindow_defnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Window_defnContext {
	var p = new(Window_defnContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_window_defn

	return p
}

func (s *Window_defnContext) GetParser() antlr.Parser { return s.parser }

func (s *Window_defnContext) OPEN_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserOPEN_PAR, 0)
}

func (s *Window_defnContext) CLOSE_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCLOSE_PAR, 0)
}

func (s *Window_defnContext) Base_window_name() IBase_window_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBase_window_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBase_window_nameContext)
}

func (s *Window_defnContext) PARTITION_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserPARTITION_, 0)
}

func (s *Window_defnContext) BY_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserBY_, 0)
}

func (s *Window_defnContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *Window_defnContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Window_defnContext) Order_by_stmt() IOrder_by_stmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOrder_by_stmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOrder_by_stmtContext)
}

func (s *Window_defnContext) Frame_spec() IFrame_specContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFrame_specContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFrame_specContext)
}

func (s *Window_defnContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserCOMMA)
}

func (s *Window_defnContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, i)
}

func (s *Window_defnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Window_defnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Window_defnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterWindow_defn(s)
	}
}

func (s *Window_defnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitWindow_defn(s)
	}
}

func (s *Window_defnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitWindow_defn(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Window_defn() (localctx IWindow_defnContext) {
	localctx = NewWindow_defnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 104, SQLiteParserRULE_window_defn)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1451)
		p.Match(SQLiteParserOPEN_PAR)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1453)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserOPEN_PAR || _la == SQLiteParserIDENTIFIER {
		{
			p.SetState(1452)
			p.Base_window_name()
		}

	}
	p.SetState(1465)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserPARTITION_ {
		{
			p.SetState(1455)
			p.Match(SQLiteParserPARTITION_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1456)
			p.Match(SQLiteParserBY_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1457)
			p.expr(0)
		}
		p.SetState(1462)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == SQLiteParserCOMMA {
			{
				p.SetState(1458)
				p.Match(SQLiteParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1459)
				p.expr(0)
			}

			p.SetState(1464)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}

	}
	p.SetState(1468)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserORDER_ {
		{
			p.SetState(1467)
			p.Order_by_stmt()
		}

	}
	p.SetState(1471)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if (int64((_la-131)) & ^0x3f) == 0 && ((int64(1)<<(_la-131))&2251799880794113) != 0 {
		{
			p.SetState(1470)
			p.Frame_spec()
		}

	}
	{
		p.SetState(1473)
		p.Match(SQLiteParserCLOSE_PAR)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOver_clauseContext is an interface to support dynamic dispatch.
type IOver_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	OVER_() antlr.TerminalNode
	Window_name() IWindow_nameContext
	Window_defn() IWindow_defnContext

	// IsOver_clauseContext differentiates from other interfaces.
	IsOver_clauseContext()
}

type Over_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOver_clauseContext() *Over_clauseContext {
	var p = new(Over_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_over_clause
	return p
}

func InitEmptyOver_clauseContext(p *Over_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_over_clause
}

func (*Over_clauseContext) IsOver_clauseContext() {}

func NewOver_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Over_clauseContext {
	var p = new(Over_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_over_clause

	return p
}

func (s *Over_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Over_clauseContext) OVER_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserOVER_, 0)
}

func (s *Over_clauseContext) Window_name() IWindow_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWindow_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWindow_nameContext)
}

func (s *Over_clauseContext) Window_defn() IWindow_defnContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWindow_defnContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWindow_defnContext)
}

func (s *Over_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Over_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Over_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterOver_clause(s)
	}
}

func (s *Over_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitOver_clause(s)
	}
}

func (s *Over_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitOver_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Over_clause() (localctx IOver_clauseContext) {
	localctx = NewOver_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 106, SQLiteParserRULE_over_clause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1475)
		p.Match(SQLiteParserOVER_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1478)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 221, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1476)
			p.Window_name()
		}

	case 2:
		{
			p.SetState(1477)
			p.Window_defn()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFrame_specContext is an interface to support dynamic dispatch.
type IFrame_specContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Frame_clause() IFrame_clauseContext
	EXCLUDE_() antlr.TerminalNode
	NO_() antlr.TerminalNode
	OTHERS_() antlr.TerminalNode
	CURRENT_() antlr.TerminalNode
	ROW_() antlr.TerminalNode
	GROUP_() antlr.TerminalNode
	TIES_() antlr.TerminalNode

	// IsFrame_specContext differentiates from other interfaces.
	IsFrame_specContext()
}

type Frame_specContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFrame_specContext() *Frame_specContext {
	var p = new(Frame_specContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_frame_spec
	return p
}

func InitEmptyFrame_specContext(p *Frame_specContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_frame_spec
}

func (*Frame_specContext) IsFrame_specContext() {}

func NewFrame_specContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Frame_specContext {
	var p = new(Frame_specContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_frame_spec

	return p
}

func (s *Frame_specContext) GetParser() antlr.Parser { return s.parser }

func (s *Frame_specContext) Frame_clause() IFrame_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFrame_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFrame_clauseContext)
}

func (s *Frame_specContext) EXCLUDE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserEXCLUDE_, 0)
}

func (s *Frame_specContext) NO_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserNO_, 0)
}

func (s *Frame_specContext) OTHERS_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserOTHERS_, 0)
}

func (s *Frame_specContext) CURRENT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCURRENT_, 0)
}

func (s *Frame_specContext) ROW_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserROW_, 0)
}

func (s *Frame_specContext) GROUP_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserGROUP_, 0)
}

func (s *Frame_specContext) TIES_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserTIES_, 0)
}

func (s *Frame_specContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Frame_specContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Frame_specContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterFrame_spec(s)
	}
}

func (s *Frame_specContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitFrame_spec(s)
	}
}

func (s *Frame_specContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitFrame_spec(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Frame_spec() (localctx IFrame_specContext) {
	localctx = NewFrame_specContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 108, SQLiteParserRULE_frame_spec)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1480)
		p.Frame_clause()
	}
	p.SetState(1490)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserEXCLUDE_ {
		{
			p.SetState(1481)
			p.Match(SQLiteParserEXCLUDE_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1488)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetTokenStream().LA(1) {
		case SQLiteParserNO_:
			{
				p.SetState(1482)
				p.Match(SQLiteParserNO_)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1483)
				p.Match(SQLiteParserOTHERS_)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		case SQLiteParserCURRENT_:
			{
				p.SetState(1484)
				p.Match(SQLiteParserCURRENT_)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1485)
				p.Match(SQLiteParserROW_)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		case SQLiteParserGROUP_:
			{
				p.SetState(1486)
				p.Match(SQLiteParserGROUP_)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		case SQLiteParserTIES_:
			{
				p.SetState(1487)
				p.Match(SQLiteParserTIES_)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		default:
			p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			goto errorExit
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFrame_clauseContext is an interface to support dynamic dispatch.
type IFrame_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	RANGE_() antlr.TerminalNode
	ROWS_() antlr.TerminalNode
	GROUPS_() antlr.TerminalNode
	Frame_single() IFrame_singleContext
	BETWEEN_() antlr.TerminalNode
	Frame_left() IFrame_leftContext
	AND_() antlr.TerminalNode
	Frame_right() IFrame_rightContext

	// IsFrame_clauseContext differentiates from other interfaces.
	IsFrame_clauseContext()
}

type Frame_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFrame_clauseContext() *Frame_clauseContext {
	var p = new(Frame_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_frame_clause
	return p
}

func InitEmptyFrame_clauseContext(p *Frame_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_frame_clause
}

func (*Frame_clauseContext) IsFrame_clauseContext() {}

func NewFrame_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Frame_clauseContext {
	var p = new(Frame_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_frame_clause

	return p
}

func (s *Frame_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Frame_clauseContext) RANGE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserRANGE_, 0)
}

func (s *Frame_clauseContext) ROWS_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserROWS_, 0)
}

func (s *Frame_clauseContext) GROUPS_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserGROUPS_, 0)
}

func (s *Frame_clauseContext) Frame_single() IFrame_singleContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFrame_singleContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFrame_singleContext)
}

func (s *Frame_clauseContext) BETWEEN_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserBETWEEN_, 0)
}

func (s *Frame_clauseContext) Frame_left() IFrame_leftContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFrame_leftContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFrame_leftContext)
}

func (s *Frame_clauseContext) AND_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserAND_, 0)
}

func (s *Frame_clauseContext) Frame_right() IFrame_rightContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFrame_rightContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFrame_rightContext)
}

func (s *Frame_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Frame_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Frame_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterFrame_clause(s)
	}
}

func (s *Frame_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitFrame_clause(s)
	}
}

func (s *Frame_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitFrame_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Frame_clause() (localctx IFrame_clauseContext) {
	localctx = NewFrame_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 110, SQLiteParserRULE_frame_clause)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1492)
		_la = p.GetTokenStream().LA(1)

		if !((int64((_la-131)) & ^0x3f) == 0 && ((int64(1)<<(_la-131))&2251799880794113) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(1499)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case SQLiteParserOPEN_PAR, SQLiteParserPLUS, SQLiteParserMINUS, SQLiteParserTILDE, SQLiteParserCASE_, SQLiteParserCAST_, SQLiteParserCURRENT_DATE_, SQLiteParserCURRENT_TIME_, SQLiteParserCURRENT_TIMESTAMP_, SQLiteParserEXISTS_, SQLiteParserNOT_, SQLiteParserNULL_, SQLiteParserRAISE_, SQLiteParserUNBOUNDED_, SQLiteParserCURRENT_, SQLiteParserLEAD_, SQLiteParserTRUE_, SQLiteParserFALSE_, SQLiteParserIDENTIFIER, SQLiteParserNUMERIC_LITERAL, SQLiteParserNUMBERED_BIND_PARAMETER, SQLiteParserNAMED_BIND_PARAMETER, SQLiteParserSTRING_LITERAL, SQLiteParserBLOB_LITERAL:
		{
			p.SetState(1493)
			p.Frame_single()
		}

	case SQLiteParserBETWEEN_:
		{
			p.SetState(1494)
			p.Match(SQLiteParserBETWEEN_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1495)
			p.Frame_left()
		}
		{
			p.SetState(1496)
			p.Match(SQLiteParserAND_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1497)
			p.Frame_right()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IWith_clauseContext is an interface to support dynamic dispatch.
type IWith_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	WITH_() antlr.TerminalNode
	AllCommon_table_expression() []ICommon_table_expressionContext
	Common_table_expression(i int) ICommon_table_expressionContext
	RECURSIVE_() antlr.TerminalNode
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsWith_clauseContext differentiates from other interfaces.
	IsWith_clauseContext()
}

type With_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWith_clauseContext() *With_clauseContext {
	var p = new(With_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_with_clause
	return p
}

func InitEmptyWith_clauseContext(p *With_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_with_clause
}

func (*With_clauseContext) IsWith_clauseContext() {}

func NewWith_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *With_clauseContext {
	var p = new(With_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_with_clause

	return p
}

func (s *With_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *With_clauseContext) WITH_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserWITH_, 0)
}

func (s *With_clauseContext) AllCommon_table_expression() []ICommon_table_expressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ICommon_table_expressionContext); ok {
			len++
		}
	}

	tst := make([]ICommon_table_expressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ICommon_table_expressionContext); ok {
			tst[i] = t.(ICommon_table_expressionContext)
			i++
		}
	}

	return tst
}

func (s *With_clauseContext) Common_table_expression(i int) ICommon_table_expressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICommon_table_expressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICommon_table_expressionContext)
}

func (s *With_clauseContext) RECURSIVE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserRECURSIVE_, 0)
}

func (s *With_clauseContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserCOMMA)
}

func (s *With_clauseContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, i)
}

func (s *With_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *With_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *With_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterWith_clause(s)
	}
}

func (s *With_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitWith_clause(s)
	}
}

func (s *With_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitWith_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) With_clause() (localctx IWith_clauseContext) {
	localctx = NewWith_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 112, SQLiteParserRULE_with_clause)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1501)
		p.Match(SQLiteParserWITH_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1503)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserRECURSIVE_ {
		{
			p.SetState(1502)
			p.Match(SQLiteParserRECURSIVE_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(1505)
		p.Common_table_expression()
	}
	p.SetState(1510)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == SQLiteParserCOMMA {
		{
			p.SetState(1506)
			p.Match(SQLiteParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1507)
			p.Common_table_expression()
		}

		p.SetState(1512)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICommon_table_expressionContext is an interface to support dynamic dispatch.
type ICommon_table_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Table_name() ITable_nameContext
	AS_() antlr.TerminalNode
	AllOPEN_PAR() []antlr.TerminalNode
	OPEN_PAR(i int) antlr.TerminalNode
	Select_stmt() ISelect_stmtContext
	AllCLOSE_PAR() []antlr.TerminalNode
	CLOSE_PAR(i int) antlr.TerminalNode
	AllColumn_name() []IColumn_nameContext
	Column_name(i int) IColumn_nameContext
	NOT_() antlr.TerminalNode
	MATERIALIZED_() antlr.TerminalNode
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsCommon_table_expressionContext differentiates from other interfaces.
	IsCommon_table_expressionContext()
}

type Common_table_expressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCommon_table_expressionContext() *Common_table_expressionContext {
	var p = new(Common_table_expressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_common_table_expression
	return p
}

func InitEmptyCommon_table_expressionContext(p *Common_table_expressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_common_table_expression
}

func (*Common_table_expressionContext) IsCommon_table_expressionContext() {}

func NewCommon_table_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Common_table_expressionContext {
	var p = new(Common_table_expressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_common_table_expression

	return p
}

func (s *Common_table_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Common_table_expressionContext) Table_name() ITable_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Common_table_expressionContext) AS_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserAS_, 0)
}

func (s *Common_table_expressionContext) AllOPEN_PAR() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserOPEN_PAR)
}

func (s *Common_table_expressionContext) OPEN_PAR(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserOPEN_PAR, i)
}

func (s *Common_table_expressionContext) Select_stmt() ISelect_stmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelect_stmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelect_stmtContext)
}

func (s *Common_table_expressionContext) AllCLOSE_PAR() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserCLOSE_PAR)
}

func (s *Common_table_expressionContext) CLOSE_PAR(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserCLOSE_PAR, i)
}

func (s *Common_table_expressionContext) AllColumn_name() []IColumn_nameContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumn_nameContext); ok {
			len++
		}
	}

	tst := make([]IColumn_nameContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumn_nameContext); ok {
			tst[i] = t.(IColumn_nameContext)
			i++
		}
	}

	return tst
}

func (s *Common_table_expressionContext) Column_name(i int) IColumn_nameContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_nameContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *Common_table_expressionContext) NOT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserNOT_, 0)
}

func (s *Common_table_expressionContext) MATERIALIZED_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserMATERIALIZED_, 0)
}

func (s *Common_table_expressionContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserCOMMA)
}

func (s *Common_table_expressionContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, i)
}

func (s *Common_table_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Common_table_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Common_table_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterCommon_table_expression(s)
	}
}

func (s *Common_table_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitCommon_table_expression(s)
	}
}

func (s *Common_table_expressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitCommon_table_expression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Common_table_expression() (localctx ICommon_table_expressionContext) {
	localctx = NewCommon_table_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 114, SQLiteParserRULE_common_table_expression)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1513)
		p.Table_name()
	}
	p.SetState(1525)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserOPEN_PAR {
		{
			p.SetState(1514)
			p.Match(SQLiteParserOPEN_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1515)
			p.Column_name()
		}
		p.SetState(1520)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == SQLiteParserCOMMA {
			{
				p.SetState(1516)
				p.Match(SQLiteParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1517)
				p.Column_name()
			}

			p.SetState(1522)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1523)
			p.Match(SQLiteParserCLOSE_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(1527)
		p.Match(SQLiteParserAS_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1529)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserNOT_ {
		{
			p.SetState(1528)
			p.Match(SQLiteParserNOT_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(1532)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserMATERIALIZED_ {
		{
			p.SetState(1531)
			p.Match(SQLiteParserMATERIALIZED_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(1534)
		p.Match(SQLiteParserOPEN_PAR)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1535)
		p.Select_stmt()
	}
	{
		p.SetState(1536)
		p.Match(SQLiteParserCLOSE_PAR)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IWhere_stmtContext is an interface to support dynamic dispatch.
type IWhere_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	WHERE_() antlr.TerminalNode
	Expr() IExprContext

	// IsWhere_stmtContext differentiates from other interfaces.
	IsWhere_stmtContext()
}

type Where_stmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWhere_stmtContext() *Where_stmtContext {
	var p = new(Where_stmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_where_stmt
	return p
}

func InitEmptyWhere_stmtContext(p *Where_stmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_where_stmt
}

func (*Where_stmtContext) IsWhere_stmtContext() {}

func NewWhere_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Where_stmtContext {
	var p = new(Where_stmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_where_stmt

	return p
}

func (s *Where_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Where_stmtContext) WHERE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserWHERE_, 0)
}

func (s *Where_stmtContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Where_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Where_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Where_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterWhere_stmt(s)
	}
}

func (s *Where_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitWhere_stmt(s)
	}
}

func (s *Where_stmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitWhere_stmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Where_stmt() (localctx IWhere_stmtContext) {
	localctx = NewWhere_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 116, SQLiteParserRULE_where_stmt)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1538)
		p.Match(SQLiteParserWHERE_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1539)
		p.expr(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOrder_by_stmtContext is an interface to support dynamic dispatch.
type IOrder_by_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ORDER_() antlr.TerminalNode
	BY_() antlr.TerminalNode
	AllOrdering_term() []IOrdering_termContext
	Ordering_term(i int) IOrdering_termContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsOrder_by_stmtContext differentiates from other interfaces.
	IsOrder_by_stmtContext()
}

type Order_by_stmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOrder_by_stmtContext() *Order_by_stmtContext {
	var p = new(Order_by_stmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_order_by_stmt
	return p
}

func InitEmptyOrder_by_stmtContext(p *Order_by_stmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_order_by_stmt
}

func (*Order_by_stmtContext) IsOrder_by_stmtContext() {}

func NewOrder_by_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Order_by_stmtContext {
	var p = new(Order_by_stmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_order_by_stmt

	return p
}

func (s *Order_by_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Order_by_stmtContext) ORDER_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserORDER_, 0)
}

func (s *Order_by_stmtContext) BY_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserBY_, 0)
}

func (s *Order_by_stmtContext) AllOrdering_term() []IOrdering_termContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IOrdering_termContext); ok {
			len++
		}
	}

	tst := make([]IOrdering_termContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IOrdering_termContext); ok {
			tst[i] = t.(IOrdering_termContext)
			i++
		}
	}

	return tst
}

func (s *Order_by_stmtContext) Ordering_term(i int) IOrdering_termContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOrdering_termContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOrdering_termContext)
}

func (s *Order_by_stmtContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserCOMMA)
}

func (s *Order_by_stmtContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, i)
}

func (s *Order_by_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Order_by_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Order_by_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterOrder_by_stmt(s)
	}
}

func (s *Order_by_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitOrder_by_stmt(s)
	}
}

func (s *Order_by_stmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitOrder_by_stmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Order_by_stmt() (localctx IOrder_by_stmtContext) {
	localctx = NewOrder_by_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 118, SQLiteParserRULE_order_by_stmt)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1541)
		p.Match(SQLiteParserORDER_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1542)
		p.Match(SQLiteParserBY_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1543)
		p.Ordering_term()
	}
	p.SetState(1548)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == SQLiteParserCOMMA {
		{
			p.SetState(1544)
			p.Match(SQLiteParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1545)
			p.Ordering_term()
		}

		p.SetState(1550)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IGroup_by_stmtContext is an interface to support dynamic dispatch.
type IGroup_by_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllExpr() []IExprContext
	Expr(i int) IExprContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsGroup_by_stmtContext differentiates from other interfaces.
	IsGroup_by_stmtContext()
}

type Group_by_stmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGroup_by_stmtContext() *Group_by_stmtContext {
	var p = new(Group_by_stmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_group_by_stmt
	return p
}

func InitEmptyGroup_by_stmtContext(p *Group_by_stmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_group_by_stmt
}

func (*Group_by_stmtContext) IsGroup_by_stmtContext() {}

func NewGroup_by_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Group_by_stmtContext {
	var p = new(Group_by_stmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_group_by_stmt

	return p
}

func (s *Group_by_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Group_by_stmtContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *Group_by_stmtContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Group_by_stmtContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserCOMMA)
}

func (s *Group_by_stmtContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, i)
}

func (s *Group_by_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Group_by_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Group_by_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterGroup_by_stmt(s)
	}
}

func (s *Group_by_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitGroup_by_stmt(s)
	}
}

func (s *Group_by_stmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitGroup_by_stmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Group_by_stmt() (localctx IGroup_by_stmtContext) {
	localctx = NewGroup_by_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 120, SQLiteParserRULE_group_by_stmt)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1551)
		p.expr(0)
	}
	p.SetState(1556)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == SQLiteParserCOMMA {
		{
			p.SetState(1552)
			p.Match(SQLiteParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1553)
			p.expr(0)
		}

		p.SetState(1558)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IWindow_stmtContext is an interface to support dynamic dispatch.
type IWindow_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Window_name() IWindow_nameContext
	AS_() antlr.TerminalNode
	Window_defn() IWindow_defnContext

	// IsWindow_stmtContext differentiates from other interfaces.
	IsWindow_stmtContext()
}

type Window_stmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWindow_stmtContext() *Window_stmtContext {
	var p = new(Window_stmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_window_stmt
	return p
}

func InitEmptyWindow_stmtContext(p *Window_stmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_window_stmt
}

func (*Window_stmtContext) IsWindow_stmtContext() {}

func NewWindow_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Window_stmtContext {
	var p = new(Window_stmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_window_stmt

	return p
}

func (s *Window_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Window_stmtContext) Window_name() IWindow_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWindow_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWindow_nameContext)
}

func (s *Window_stmtContext) AS_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserAS_, 0)
}

func (s *Window_stmtContext) Window_defn() IWindow_defnContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWindow_defnContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWindow_defnContext)
}

func (s *Window_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Window_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Window_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterWindow_stmt(s)
	}
}

func (s *Window_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitWindow_stmt(s)
	}
}

func (s *Window_stmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitWindow_stmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Window_stmt() (localctx IWindow_stmtContext) {
	localctx = NewWindow_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 122, SQLiteParserRULE_window_stmt)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1559)
		p.Window_name()
	}
	{
		p.SetState(1560)
		p.Match(SQLiteParserAS_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1561)
		p.Window_defn()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ILimit_stmtContext is an interface to support dynamic dispatch.
type ILimit_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetFirstExpr returns the firstExpr rule contexts.
	GetFirstExpr() IExprContext

	// GetLastExpr returns the lastExpr rule contexts.
	GetLastExpr() IExprContext

	// SetFirstExpr sets the firstExpr rule contexts.
	SetFirstExpr(IExprContext)

	// SetLastExpr sets the lastExpr rule contexts.
	SetLastExpr(IExprContext)

	// Getter signatures
	LIMIT_() antlr.TerminalNode
	AllExpr() []IExprContext
	Expr(i int) IExprContext
	OFFSET_() antlr.TerminalNode
	COMMA() antlr.TerminalNode

	// IsLimit_stmtContext differentiates from other interfaces.
	IsLimit_stmtContext()
}

type Limit_stmtContext struct {
	antlr.BaseParserRuleContext
	parser    antlr.Parser
	firstExpr IExprContext
	lastExpr  IExprContext
}

func NewEmptyLimit_stmtContext() *Limit_stmtContext {
	var p = new(Limit_stmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_limit_stmt
	return p
}

func InitEmptyLimit_stmtContext(p *Limit_stmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_limit_stmt
}

func (*Limit_stmtContext) IsLimit_stmtContext() {}

func NewLimit_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Limit_stmtContext {
	var p = new(Limit_stmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_limit_stmt

	return p
}

func (s *Limit_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Limit_stmtContext) GetFirstExpr() IExprContext { return s.firstExpr }

func (s *Limit_stmtContext) GetLastExpr() IExprContext { return s.lastExpr }

func (s *Limit_stmtContext) SetFirstExpr(v IExprContext) { s.firstExpr = v }

func (s *Limit_stmtContext) SetLastExpr(v IExprContext) { s.lastExpr = v }

func (s *Limit_stmtContext) LIMIT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserLIMIT_, 0)
}

func (s *Limit_stmtContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *Limit_stmtContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Limit_stmtContext) OFFSET_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserOFFSET_, 0)
}

func (s *Limit_stmtContext) COMMA() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, 0)
}

func (s *Limit_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Limit_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Limit_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterLimit_stmt(s)
	}
}

func (s *Limit_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitLimit_stmt(s)
	}
}

func (s *Limit_stmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitLimit_stmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Limit_stmt() (localctx ILimit_stmtContext) {
	localctx = NewLimit_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 124, SQLiteParserRULE_limit_stmt)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1563)
		p.Match(SQLiteParserLIMIT_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1564)

		var _x = p.expr(0)

		localctx.(*Limit_stmtContext).firstExpr = _x
	}
	p.SetState(1567)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserCOMMA || _la == SQLiteParserOFFSET_ {
		{
			p.SetState(1565)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLiteParserCOMMA || _la == SQLiteParserOFFSET_) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(1566)

			var _x = p.expr(0)

			localctx.(*Limit_stmtContext).lastExpr = _x
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOrdering_termContext is an interface to support dynamic dispatch.
type IOrdering_termContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Expr() IExprContext
	COLLATE_() antlr.TerminalNode
	Collation_name() ICollation_nameContext
	Asc_desc() IAsc_descContext
	NULLS_() antlr.TerminalNode
	FIRST_() antlr.TerminalNode
	LAST_() antlr.TerminalNode

	// IsOrdering_termContext differentiates from other interfaces.
	IsOrdering_termContext()
}

type Ordering_termContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOrdering_termContext() *Ordering_termContext {
	var p = new(Ordering_termContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_ordering_term
	return p
}

func InitEmptyOrdering_termContext(p *Ordering_termContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_ordering_term
}

func (*Ordering_termContext) IsOrdering_termContext() {}

func NewOrdering_termContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Ordering_termContext {
	var p = new(Ordering_termContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_ordering_term

	return p
}

func (s *Ordering_termContext) GetParser() antlr.Parser { return s.parser }

func (s *Ordering_termContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Ordering_termContext) COLLATE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOLLATE_, 0)
}

func (s *Ordering_termContext) Collation_name() ICollation_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICollation_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICollation_nameContext)
}

func (s *Ordering_termContext) Asc_desc() IAsc_descContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAsc_descContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAsc_descContext)
}

func (s *Ordering_termContext) NULLS_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserNULLS_, 0)
}

func (s *Ordering_termContext) FIRST_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserFIRST_, 0)
}

func (s *Ordering_termContext) LAST_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserLAST_, 0)
}

func (s *Ordering_termContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Ordering_termContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Ordering_termContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterOrdering_term(s)
	}
}

func (s *Ordering_termContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitOrdering_term(s)
	}
}

func (s *Ordering_termContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitOrdering_term(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Ordering_term() (localctx IOrdering_termContext) {
	localctx = NewOrdering_termContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 126, SQLiteParserRULE_ordering_term)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1569)
		p.expr(0)
	}
	p.SetState(1572)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserCOLLATE_ {
		{
			p.SetState(1570)
			p.Match(SQLiteParserCOLLATE_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1571)
			p.Collation_name()
		}

	}
	p.SetState(1575)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserASC_ || _la == SQLiteParserDESC_ {
		{
			p.SetState(1574)
			p.Asc_desc()
		}

	}
	p.SetState(1579)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserNULLS_ {
		{
			p.SetState(1577)
			p.Match(SQLiteParserNULLS_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1578)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLiteParserFIRST_ || _la == SQLiteParserLAST_) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAsc_descContext is an interface to support dynamic dispatch.
type IAsc_descContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ASC_() antlr.TerminalNode
	DESC_() antlr.TerminalNode

	// IsAsc_descContext differentiates from other interfaces.
	IsAsc_descContext()
}

type Asc_descContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAsc_descContext() *Asc_descContext {
	var p = new(Asc_descContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_asc_desc
	return p
}

func InitEmptyAsc_descContext(p *Asc_descContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_asc_desc
}

func (*Asc_descContext) IsAsc_descContext() {}

func NewAsc_descContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Asc_descContext {
	var p = new(Asc_descContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_asc_desc

	return p
}

func (s *Asc_descContext) GetParser() antlr.Parser { return s.parser }

func (s *Asc_descContext) ASC_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserASC_, 0)
}

func (s *Asc_descContext) DESC_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDESC_, 0)
}

func (s *Asc_descContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Asc_descContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Asc_descContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterAsc_desc(s)
	}
}

func (s *Asc_descContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitAsc_desc(s)
	}
}

func (s *Asc_descContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitAsc_desc(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Asc_desc() (localctx IAsc_descContext) {
	localctx = NewAsc_descContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 128, SQLiteParserRULE_asc_desc)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1581)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SQLiteParserASC_ || _la == SQLiteParserDESC_) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFrame_leftContext is an interface to support dynamic dispatch.
type IFrame_leftContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Expr() IExprContext
	PRECEDING_() antlr.TerminalNode
	FOLLOWING_() antlr.TerminalNode
	CURRENT_() antlr.TerminalNode
	ROW_() antlr.TerminalNode
	UNBOUNDED_() antlr.TerminalNode

	// IsFrame_leftContext differentiates from other interfaces.
	IsFrame_leftContext()
}

type Frame_leftContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFrame_leftContext() *Frame_leftContext {
	var p = new(Frame_leftContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_frame_left
	return p
}

func InitEmptyFrame_leftContext(p *Frame_leftContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_frame_left
}

func (*Frame_leftContext) IsFrame_leftContext() {}

func NewFrame_leftContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Frame_leftContext {
	var p = new(Frame_leftContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_frame_left

	return p
}

func (s *Frame_leftContext) GetParser() antlr.Parser { return s.parser }

func (s *Frame_leftContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Frame_leftContext) PRECEDING_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserPRECEDING_, 0)
}

func (s *Frame_leftContext) FOLLOWING_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserFOLLOWING_, 0)
}

func (s *Frame_leftContext) CURRENT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCURRENT_, 0)
}

func (s *Frame_leftContext) ROW_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserROW_, 0)
}

func (s *Frame_leftContext) UNBOUNDED_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserUNBOUNDED_, 0)
}

func (s *Frame_leftContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Frame_leftContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Frame_leftContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterFrame_left(s)
	}
}

func (s *Frame_leftContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitFrame_left(s)
	}
}

func (s *Frame_leftContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitFrame_left(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Frame_left() (localctx IFrame_leftContext) {
	localctx = NewFrame_leftContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 130, SQLiteParserRULE_frame_left)
	p.SetState(1593)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 237, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1583)
			p.expr(0)
		}
		{
			p.SetState(1584)
			p.Match(SQLiteParserPRECEDING_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1586)
			p.expr(0)
		}
		{
			p.SetState(1587)
			p.Match(SQLiteParserFOLLOWING_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1589)
			p.Match(SQLiteParserCURRENT_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1590)
			p.Match(SQLiteParserROW_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1591)
			p.Match(SQLiteParserUNBOUNDED_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1592)
			p.Match(SQLiteParserPRECEDING_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFrame_rightContext is an interface to support dynamic dispatch.
type IFrame_rightContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Expr() IExprContext
	PRECEDING_() antlr.TerminalNode
	FOLLOWING_() antlr.TerminalNode
	CURRENT_() antlr.TerminalNode
	ROW_() antlr.TerminalNode
	UNBOUNDED_() antlr.TerminalNode

	// IsFrame_rightContext differentiates from other interfaces.
	IsFrame_rightContext()
}

type Frame_rightContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFrame_rightContext() *Frame_rightContext {
	var p = new(Frame_rightContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_frame_right
	return p
}

func InitEmptyFrame_rightContext(p *Frame_rightContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_frame_right
}

func (*Frame_rightContext) IsFrame_rightContext() {}

func NewFrame_rightContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Frame_rightContext {
	var p = new(Frame_rightContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_frame_right

	return p
}

func (s *Frame_rightContext) GetParser() antlr.Parser { return s.parser }

func (s *Frame_rightContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Frame_rightContext) PRECEDING_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserPRECEDING_, 0)
}

func (s *Frame_rightContext) FOLLOWING_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserFOLLOWING_, 0)
}

func (s *Frame_rightContext) CURRENT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCURRENT_, 0)
}

func (s *Frame_rightContext) ROW_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserROW_, 0)
}

func (s *Frame_rightContext) UNBOUNDED_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserUNBOUNDED_, 0)
}

func (s *Frame_rightContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Frame_rightContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Frame_rightContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterFrame_right(s)
	}
}

func (s *Frame_rightContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitFrame_right(s)
	}
}

func (s *Frame_rightContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitFrame_right(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Frame_right() (localctx IFrame_rightContext) {
	localctx = NewFrame_rightContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 132, SQLiteParserRULE_frame_right)
	p.SetState(1605)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 238, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1595)
			p.expr(0)
		}
		{
			p.SetState(1596)
			p.Match(SQLiteParserPRECEDING_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1598)
			p.expr(0)
		}
		{
			p.SetState(1599)
			p.Match(SQLiteParserFOLLOWING_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1601)
			p.Match(SQLiteParserCURRENT_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1602)
			p.Match(SQLiteParserROW_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1603)
			p.Match(SQLiteParserUNBOUNDED_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1604)
			p.Match(SQLiteParserFOLLOWING_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFrame_singleContext is an interface to support dynamic dispatch.
type IFrame_singleContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Expr() IExprContext
	PRECEDING_() antlr.TerminalNode
	UNBOUNDED_() antlr.TerminalNode
	CURRENT_() antlr.TerminalNode
	ROW_() antlr.TerminalNode

	// IsFrame_singleContext differentiates from other interfaces.
	IsFrame_singleContext()
}

type Frame_singleContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFrame_singleContext() *Frame_singleContext {
	var p = new(Frame_singleContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_frame_single
	return p
}

func InitEmptyFrame_singleContext(p *Frame_singleContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_frame_single
}

func (*Frame_singleContext) IsFrame_singleContext() {}

func NewFrame_singleContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Frame_singleContext {
	var p = new(Frame_singleContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_frame_single

	return p
}

func (s *Frame_singleContext) GetParser() antlr.Parser { return s.parser }

func (s *Frame_singleContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Frame_singleContext) PRECEDING_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserPRECEDING_, 0)
}

func (s *Frame_singleContext) UNBOUNDED_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserUNBOUNDED_, 0)
}

func (s *Frame_singleContext) CURRENT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCURRENT_, 0)
}

func (s *Frame_singleContext) ROW_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserROW_, 0)
}

func (s *Frame_singleContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Frame_singleContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Frame_singleContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterFrame_single(s)
	}
}

func (s *Frame_singleContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitFrame_single(s)
	}
}

func (s *Frame_singleContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitFrame_single(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Frame_single() (localctx IFrame_singleContext) {
	localctx = NewFrame_singleContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 134, SQLiteParserRULE_frame_single)
	p.SetState(1614)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case SQLiteParserOPEN_PAR, SQLiteParserPLUS, SQLiteParserMINUS, SQLiteParserTILDE, SQLiteParserCASE_, SQLiteParserCAST_, SQLiteParserCURRENT_DATE_, SQLiteParserCURRENT_TIME_, SQLiteParserCURRENT_TIMESTAMP_, SQLiteParserEXISTS_, SQLiteParserNOT_, SQLiteParserNULL_, SQLiteParserRAISE_, SQLiteParserLEAD_, SQLiteParserTRUE_, SQLiteParserFALSE_, SQLiteParserIDENTIFIER, SQLiteParserNUMERIC_LITERAL, SQLiteParserNUMBERED_BIND_PARAMETER, SQLiteParserNAMED_BIND_PARAMETER, SQLiteParserSTRING_LITERAL, SQLiteParserBLOB_LITERAL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1607)
			p.expr(0)
		}
		{
			p.SetState(1608)
			p.Match(SQLiteParserPRECEDING_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case SQLiteParserUNBOUNDED_:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1610)
			p.Match(SQLiteParserUNBOUNDED_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1611)
			p.Match(SQLiteParserPRECEDING_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case SQLiteParserCURRENT_:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1612)
			p.Match(SQLiteParserCURRENT_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1613)
			p.Match(SQLiteParserROW_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOffsetContext is an interface to support dynamic dispatch.
type IOffsetContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	COMMA() antlr.TerminalNode
	Signed_number() ISigned_numberContext

	// IsOffsetContext differentiates from other interfaces.
	IsOffsetContext()
}

type OffsetContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOffsetContext() *OffsetContext {
	var p = new(OffsetContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_offset
	return p
}

func InitEmptyOffsetContext(p *OffsetContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_offset
}

func (*OffsetContext) IsOffsetContext() {}

func NewOffsetContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OffsetContext {
	var p = new(OffsetContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_offset

	return p
}

func (s *OffsetContext) GetParser() antlr.Parser { return s.parser }

func (s *OffsetContext) COMMA() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, 0)
}

func (s *OffsetContext) Signed_number() ISigned_numberContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISigned_numberContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISigned_numberContext)
}

func (s *OffsetContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OffsetContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OffsetContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterOffset(s)
	}
}

func (s *OffsetContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitOffset(s)
	}
}

func (s *OffsetContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitOffset(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Offset() (localctx IOffsetContext) {
	localctx = NewOffsetContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 136, SQLiteParserRULE_offset)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1616)
		p.Match(SQLiteParserCOMMA)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1617)
		p.Signed_number()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDefault_valueContext is an interface to support dynamic dispatch.
type IDefault_valueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	COMMA() antlr.TerminalNode
	Signed_number() ISigned_numberContext

	// IsDefault_valueContext differentiates from other interfaces.
	IsDefault_valueContext()
}

type Default_valueContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDefault_valueContext() *Default_valueContext {
	var p = new(Default_valueContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_default_value
	return p
}

func InitEmptyDefault_valueContext(p *Default_valueContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_default_value
}

func (*Default_valueContext) IsDefault_valueContext() {}

func NewDefault_valueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Default_valueContext {
	var p = new(Default_valueContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_default_value

	return p
}

func (s *Default_valueContext) GetParser() antlr.Parser { return s.parser }

func (s *Default_valueContext) COMMA() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, 0)
}

func (s *Default_valueContext) Signed_number() ISigned_numberContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISigned_numberContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISigned_numberContext)
}

func (s *Default_valueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Default_valueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Default_valueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterDefault_value(s)
	}
}

func (s *Default_valueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitDefault_value(s)
	}
}

func (s *Default_valueContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitDefault_value(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Default_value() (localctx IDefault_valueContext) {
	localctx = NewDefault_valueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 138, SQLiteParserRULE_default_value)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1619)
		p.Match(SQLiteParserCOMMA)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1620)
		p.Signed_number()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPartition_byContext is an interface to support dynamic dispatch.
type IPartition_byContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	PARTITION_() antlr.TerminalNode
	BY_() antlr.TerminalNode
	AllExpr() []IExprContext
	Expr(i int) IExprContext

	// IsPartition_byContext differentiates from other interfaces.
	IsPartition_byContext()
}

type Partition_byContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPartition_byContext() *Partition_byContext {
	var p = new(Partition_byContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_partition_by
	return p
}

func InitEmptyPartition_byContext(p *Partition_byContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_partition_by
}

func (*Partition_byContext) IsPartition_byContext() {}

func NewPartition_byContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Partition_byContext {
	var p = new(Partition_byContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_partition_by

	return p
}

func (s *Partition_byContext) GetParser() antlr.Parser { return s.parser }

func (s *Partition_byContext) PARTITION_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserPARTITION_, 0)
}

func (s *Partition_byContext) BY_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserBY_, 0)
}

func (s *Partition_byContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *Partition_byContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Partition_byContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Partition_byContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Partition_byContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterPartition_by(s)
	}
}

func (s *Partition_byContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitPartition_by(s)
	}
}

func (s *Partition_byContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitPartition_by(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Partition_by() (localctx IPartition_byContext) {
	localctx = NewPartition_byContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 140, SQLiteParserRULE_partition_by)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1622)
		p.Match(SQLiteParserPARTITION_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1623)
		p.Match(SQLiteParserBY_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1625)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&126153566124512008) != 0) || ((int64((_la-72)) & ^0x3f) == 0 && ((int64(1)<<(_la-72))&70411693850625) != 0) || ((int64((_la-166)) & ^0x3f) == 0 && ((int64(1)<<(_la-166))&264242689) != 0) {
		{
			p.SetState(1624)
			p.expr(0)
		}

		p.SetState(1627)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOrder_by_exprContext is an interface to support dynamic dispatch.
type IOrder_by_exprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ORDER_() antlr.TerminalNode
	BY_() antlr.TerminalNode
	AllExpr() []IExprContext
	Expr(i int) IExprContext

	// IsOrder_by_exprContext differentiates from other interfaces.
	IsOrder_by_exprContext()
}

type Order_by_exprContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOrder_by_exprContext() *Order_by_exprContext {
	var p = new(Order_by_exprContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_order_by_expr
	return p
}

func InitEmptyOrder_by_exprContext(p *Order_by_exprContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_order_by_expr
}

func (*Order_by_exprContext) IsOrder_by_exprContext() {}

func NewOrder_by_exprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Order_by_exprContext {
	var p = new(Order_by_exprContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_order_by_expr

	return p
}

func (s *Order_by_exprContext) GetParser() antlr.Parser { return s.parser }

func (s *Order_by_exprContext) ORDER_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserORDER_, 0)
}

func (s *Order_by_exprContext) BY_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserBY_, 0)
}

func (s *Order_by_exprContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *Order_by_exprContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Order_by_exprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Order_by_exprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Order_by_exprContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterOrder_by_expr(s)
	}
}

func (s *Order_by_exprContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitOrder_by_expr(s)
	}
}

func (s *Order_by_exprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitOrder_by_expr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Order_by_expr() (localctx IOrder_by_exprContext) {
	localctx = NewOrder_by_exprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 142, SQLiteParserRULE_order_by_expr)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1629)
		p.Match(SQLiteParserORDER_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1630)
		p.Match(SQLiteParserBY_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1632)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&126153566124512008) != 0) || ((int64((_la-72)) & ^0x3f) == 0 && ((int64(1)<<(_la-72))&70411693850625) != 0) || ((int64((_la-166)) & ^0x3f) == 0 && ((int64(1)<<(_la-166))&264242689) != 0) {
		{
			p.SetState(1631)
			p.expr(0)
		}

		p.SetState(1634)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOrder_by_expr_asc_descContext is an interface to support dynamic dispatch.
type IOrder_by_expr_asc_descContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ORDER_() antlr.TerminalNode
	BY_() antlr.TerminalNode
	AllExpr() []IExprContext
	Expr(i int) IExprContext
	AllAsc_desc() []IAsc_descContext
	Asc_desc(i int) IAsc_descContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsOrder_by_expr_asc_descContext differentiates from other interfaces.
	IsOrder_by_expr_asc_descContext()
}

type Order_by_expr_asc_descContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOrder_by_expr_asc_descContext() *Order_by_expr_asc_descContext {
	var p = new(Order_by_expr_asc_descContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_order_by_expr_asc_desc
	return p
}

func InitEmptyOrder_by_expr_asc_descContext(p *Order_by_expr_asc_descContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_order_by_expr_asc_desc
}

func (*Order_by_expr_asc_descContext) IsOrder_by_expr_asc_descContext() {}

func NewOrder_by_expr_asc_descContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Order_by_expr_asc_descContext {
	var p = new(Order_by_expr_asc_descContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_order_by_expr_asc_desc

	return p
}

func (s *Order_by_expr_asc_descContext) GetParser() antlr.Parser { return s.parser }

func (s *Order_by_expr_asc_descContext) ORDER_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserORDER_, 0)
}

func (s *Order_by_expr_asc_descContext) BY_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserBY_, 0)
}

func (s *Order_by_expr_asc_descContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *Order_by_expr_asc_descContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Order_by_expr_asc_descContext) AllAsc_desc() []IAsc_descContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAsc_descContext); ok {
			len++
		}
	}

	tst := make([]IAsc_descContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAsc_descContext); ok {
			tst[i] = t.(IAsc_descContext)
			i++
		}
	}

	return tst
}

func (s *Order_by_expr_asc_descContext) Asc_desc(i int) IAsc_descContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAsc_descContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAsc_descContext)
}

func (s *Order_by_expr_asc_descContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserCOMMA)
}

func (s *Order_by_expr_asc_descContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, i)
}

func (s *Order_by_expr_asc_descContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Order_by_expr_asc_descContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Order_by_expr_asc_descContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterOrder_by_expr_asc_desc(s)
	}
}

func (s *Order_by_expr_asc_descContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitOrder_by_expr_asc_desc(s)
	}
}

func (s *Order_by_expr_asc_descContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitOrder_by_expr_asc_desc(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Order_by_expr_asc_desc() (localctx IOrder_by_expr_asc_descContext) {
	localctx = NewOrder_by_expr_asc_descContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 144, SQLiteParserRULE_order_by_expr_asc_desc)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1636)
		p.Match(SQLiteParserORDER_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1637)
		p.Match(SQLiteParserBY_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1638)
		p.expr(0)
	}
	p.SetState(1640)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserASC_ || _la == SQLiteParserDESC_ {
		{
			p.SetState(1639)
			p.Asc_desc()
		}

	}
	p.SetState(1649)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == SQLiteParserCOMMA {
		{
			p.SetState(1642)
			p.Match(SQLiteParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1643)
			p.expr(0)
		}
		p.SetState(1645)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserASC_ || _la == SQLiteParserDESC_ {
			{
				p.SetState(1644)
				p.Asc_desc()
			}

		}

		p.SetState(1651)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IUnary_operatorContext is an interface to support dynamic dispatch.
type IUnary_operatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOperator returns the operator token.
	GetOperator() antlr.Token

	// SetOperator sets the operator token.
	SetOperator(antlr.Token)

	// Getter signatures
	MINUS() antlr.TerminalNode
	PLUS() antlr.TerminalNode
	TILDE() antlr.TerminalNode
	NOT_() antlr.TerminalNode

	// IsUnary_operatorContext differentiates from other interfaces.
	IsUnary_operatorContext()
}

type Unary_operatorContext struct {
	antlr.BaseParserRuleContext
	parser   antlr.Parser
	operator antlr.Token
}

func NewEmptyUnary_operatorContext() *Unary_operatorContext {
	var p = new(Unary_operatorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_unary_operator
	return p
}

func InitEmptyUnary_operatorContext(p *Unary_operatorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_unary_operator
}

func (*Unary_operatorContext) IsUnary_operatorContext() {}

func NewUnary_operatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Unary_operatorContext {
	var p = new(Unary_operatorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_unary_operator

	return p
}

func (s *Unary_operatorContext) GetParser() antlr.Parser { return s.parser }

func (s *Unary_operatorContext) GetOperator() antlr.Token { return s.operator }

func (s *Unary_operatorContext) SetOperator(v antlr.Token) { s.operator = v }

func (s *Unary_operatorContext) MINUS() antlr.TerminalNode {
	return s.GetToken(SQLiteParserMINUS, 0)
}

func (s *Unary_operatorContext) PLUS() antlr.TerminalNode {
	return s.GetToken(SQLiteParserPLUS, 0)
}

func (s *Unary_operatorContext) TILDE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserTILDE, 0)
}

func (s *Unary_operatorContext) NOT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserNOT_, 0)
}

func (s *Unary_operatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Unary_operatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Unary_operatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterUnary_operator(s)
	}
}

func (s *Unary_operatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitUnary_operator(s)
	}
}

func (s *Unary_operatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitUnary_operator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Unary_operator() (localctx IUnary_operatorContext) {
	localctx = NewUnary_operatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 146, SQLiteParserRULE_unary_operator)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1652)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*Unary_operatorContext).operator = _lt

		_la = p.GetTokenStream().LA(1)

		if !(((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&4864) != 0) || _la == SQLiteParserNOT_) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*Unary_operatorContext).operator = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IError_messageContext is an interface to support dynamic dispatch.
type IError_messageContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	STRING_LITERAL() antlr.TerminalNode

	// IsError_messageContext differentiates from other interfaces.
	IsError_messageContext()
}

type Error_messageContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyError_messageContext() *Error_messageContext {
	var p = new(Error_messageContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_error_message
	return p
}

func InitEmptyError_messageContext(p *Error_messageContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_error_message
}

func (*Error_messageContext) IsError_messageContext() {}

func NewError_messageContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Error_messageContext {
	var p = new(Error_messageContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_error_message

	return p
}

func (s *Error_messageContext) GetParser() antlr.Parser { return s.parser }

func (s *Error_messageContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(SQLiteParserSTRING_LITERAL, 0)
}

func (s *Error_messageContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Error_messageContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Error_messageContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterError_message(s)
	}
}

func (s *Error_messageContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitError_message(s)
	}
}

func (s *Error_messageContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitError_message(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Error_message() (localctx IError_messageContext) {
	localctx = NewError_messageContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 148, SQLiteParserRULE_error_message)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1654)
		p.Match(SQLiteParserSTRING_LITERAL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IModule_argumentContext is an interface to support dynamic dispatch.
type IModule_argumentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Expr() IExprContext
	Column_def() IColumn_defContext

	// IsModule_argumentContext differentiates from other interfaces.
	IsModule_argumentContext()
}

type Module_argumentContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyModule_argumentContext() *Module_argumentContext {
	var p = new(Module_argumentContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_module_argument
	return p
}

func InitEmptyModule_argumentContext(p *Module_argumentContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_module_argument
}

func (*Module_argumentContext) IsModule_argumentContext() {}

func NewModule_argumentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Module_argumentContext {
	var p = new(Module_argumentContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_module_argument

	return p
}

func (s *Module_argumentContext) GetParser() antlr.Parser { return s.parser }

func (s *Module_argumentContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Module_argumentContext) Column_def() IColumn_defContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_defContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_defContext)
}

func (s *Module_argumentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Module_argumentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Module_argumentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterModule_argument(s)
	}
}

func (s *Module_argumentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitModule_argument(s)
	}
}

func (s *Module_argumentContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitModule_argument(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Module_argument() (localctx IModule_argumentContext) {
	localctx = NewModule_argumentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 150, SQLiteParserRULE_module_argument)
	p.SetState(1658)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 245, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1656)
			p.expr(0)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1657)
			p.Column_def()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IKeywordContext is an interface to support dynamic dispatch.
type IKeywordContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ABORT_() antlr.TerminalNode
	ACTION_() antlr.TerminalNode
	ADD_() antlr.TerminalNode
	AFTER_() antlr.TerminalNode
	ALL_() antlr.TerminalNode
	ALTER_() antlr.TerminalNode
	ANALYZE_() antlr.TerminalNode
	AND_() antlr.TerminalNode
	AS_() antlr.TerminalNode
	ASC_() antlr.TerminalNode
	ATTACH_() antlr.TerminalNode
	AUTOINCREMENT_() antlr.TerminalNode
	BEFORE_() antlr.TerminalNode
	BEGIN_() antlr.TerminalNode
	BETWEEN_() antlr.TerminalNode
	BY_() antlr.TerminalNode
	CASCADE_() antlr.TerminalNode
	CASE_() antlr.TerminalNode
	CAST_() antlr.TerminalNode
	CHECK_() antlr.TerminalNode
	COLLATE_() antlr.TerminalNode
	COLUMN_() antlr.TerminalNode
	COMMIT_() antlr.TerminalNode
	CONFLICT_() antlr.TerminalNode
	CONSTRAINT_() antlr.TerminalNode
	CREATE_() antlr.TerminalNode
	CROSS_() antlr.TerminalNode
	CURRENT_DATE_() antlr.TerminalNode
	CURRENT_TIME_() antlr.TerminalNode
	CURRENT_TIMESTAMP_() antlr.TerminalNode
	DATABASE_() antlr.TerminalNode
	DEFAULT_() antlr.TerminalNode
	DEFERRABLE_() antlr.TerminalNode
	DEFERRED_() antlr.TerminalNode
	DELETE_() antlr.TerminalNode
	DESC_() antlr.TerminalNode
	DETACH_() antlr.TerminalNode
	DISTINCT_() antlr.TerminalNode
	DROP_() antlr.TerminalNode
	EACH_() antlr.TerminalNode
	ELSE_() antlr.TerminalNode
	END_() antlr.TerminalNode
	ESCAPE_() antlr.TerminalNode
	EXCEPT_() antlr.TerminalNode
	EXCLUSIVE_() antlr.TerminalNode
	EXISTS_() antlr.TerminalNode
	EXPLAIN_() antlr.TerminalNode
	FAIL_() antlr.TerminalNode
	FOR_() antlr.TerminalNode
	FOREIGN_() antlr.TerminalNode
	FROM_() antlr.TerminalNode
	FULL_() antlr.TerminalNode
	GLOB_() antlr.TerminalNode
	GROUP_() antlr.TerminalNode
	HAVING_() antlr.TerminalNode
	IF_() antlr.TerminalNode
	IGNORE_() antlr.TerminalNode
	IMMEDIATE_() antlr.TerminalNode
	IN_() antlr.TerminalNode
	INDEX_() antlr.TerminalNode
	INDEXED_() antlr.TerminalNode
	INITIALLY_() antlr.TerminalNode
	INNER_() antlr.TerminalNode
	INSERT_() antlr.TerminalNode
	INSTEAD_() antlr.TerminalNode
	INTERSECT_() antlr.TerminalNode
	INTO_() antlr.TerminalNode
	IS_() antlr.TerminalNode
	ISNULL_() antlr.TerminalNode
	JOIN_() antlr.TerminalNode
	KEY_() antlr.TerminalNode
	LEFT_() antlr.TerminalNode
	LIKE_() antlr.TerminalNode
	LIMIT_() antlr.TerminalNode
	MATCH_() antlr.TerminalNode
	NATURAL_() antlr.TerminalNode
	NO_() antlr.TerminalNode
	NOT_() antlr.TerminalNode
	NOTNULL_() antlr.TerminalNode
	NULL_() antlr.TerminalNode
	OF_() antlr.TerminalNode
	OFFSET_() antlr.TerminalNode
	ON_() antlr.TerminalNode
	OR_() antlr.TerminalNode
	ORDER_() antlr.TerminalNode
	OUTER_() antlr.TerminalNode
	PLAN_() antlr.TerminalNode
	PRAGMA_() antlr.TerminalNode
	PRIMARY_() antlr.TerminalNode
	QUERY_() antlr.TerminalNode
	RAISE_() antlr.TerminalNode
	RECURSIVE_() antlr.TerminalNode
	REFERENCES_() antlr.TerminalNode
	REGEXP_() antlr.TerminalNode
	REINDEX_() antlr.TerminalNode
	RELEASE_() antlr.TerminalNode
	RENAME_() antlr.TerminalNode
	REPLACE_() antlr.TerminalNode
	RESTRICT_() antlr.TerminalNode
	RIGHT_() antlr.TerminalNode
	ROLLBACK_() antlr.TerminalNode
	ROW_() antlr.TerminalNode
	ROWS_() antlr.TerminalNode
	SAVEPOINT_() antlr.TerminalNode
	SELECT_() antlr.TerminalNode
	SET_() antlr.TerminalNode
	TABLE_() antlr.TerminalNode
	TEMP_() antlr.TerminalNode
	TEMPORARY_() antlr.TerminalNode
	THEN_() antlr.TerminalNode
	TO_() antlr.TerminalNode
	TRANSACTION_() antlr.TerminalNode
	TRIGGER_() antlr.TerminalNode
	UNION_() antlr.TerminalNode
	UNIQUE_() antlr.TerminalNode
	UPDATE_() antlr.TerminalNode
	USING_() antlr.TerminalNode
	VACUUM_() antlr.TerminalNode
	VALUES_() antlr.TerminalNode
	VIEW_() antlr.TerminalNode
	VIRTUAL_() antlr.TerminalNode
	WHEN_() antlr.TerminalNode
	WHERE_() antlr.TerminalNode
	WITH_() antlr.TerminalNode
	WITHOUT_() antlr.TerminalNode
	FIRST_VALUE_() antlr.TerminalNode
	OVER_() antlr.TerminalNode
	PARTITION_() antlr.TerminalNode
	RANGE_() antlr.TerminalNode
	PRECEDING_() antlr.TerminalNode
	UNBOUNDED_() antlr.TerminalNode
	CURRENT_() antlr.TerminalNode
	FOLLOWING_() antlr.TerminalNode
	CUME_DIST_() antlr.TerminalNode
	DENSE_RANK_() antlr.TerminalNode
	LAG_() antlr.TerminalNode
	LAST_VALUE_() antlr.TerminalNode
	LEAD_() antlr.TerminalNode
	NTH_VALUE_() antlr.TerminalNode
	NTILE_() antlr.TerminalNode
	PERCENT_RANK_() antlr.TerminalNode
	RANK_() antlr.TerminalNode
	ROW_NUMBER_() antlr.TerminalNode
	GENERATED_() antlr.TerminalNode
	ALWAYS_() antlr.TerminalNode
	STORED_() antlr.TerminalNode
	TRUE_() antlr.TerminalNode
	FALSE_() antlr.TerminalNode
	WINDOW_() antlr.TerminalNode
	NULLS_() antlr.TerminalNode
	FIRST_() antlr.TerminalNode
	LAST_() antlr.TerminalNode
	FILTER_() antlr.TerminalNode
	GROUPS_() antlr.TerminalNode
	EXCLUDE_() antlr.TerminalNode

	// IsKeywordContext differentiates from other interfaces.
	IsKeywordContext()
}

type KeywordContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyKeywordContext() *KeywordContext {
	var p = new(KeywordContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_keyword
	return p
}

func InitEmptyKeywordContext(p *KeywordContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_keyword
}

func (*KeywordContext) IsKeywordContext() {}

func NewKeywordContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *KeywordContext {
	var p = new(KeywordContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_keyword

	return p
}

func (s *KeywordContext) GetParser() antlr.Parser { return s.parser }

func (s *KeywordContext) ABORT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserABORT_, 0)
}

func (s *KeywordContext) ACTION_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserACTION_, 0)
}

func (s *KeywordContext) ADD_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserADD_, 0)
}

func (s *KeywordContext) AFTER_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserAFTER_, 0)
}

func (s *KeywordContext) ALL_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserALL_, 0)
}

func (s *KeywordContext) ALTER_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserALTER_, 0)
}

func (s *KeywordContext) ANALYZE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserANALYZE_, 0)
}

func (s *KeywordContext) AND_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserAND_, 0)
}

func (s *KeywordContext) AS_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserAS_, 0)
}

func (s *KeywordContext) ASC_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserASC_, 0)
}

func (s *KeywordContext) ATTACH_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserATTACH_, 0)
}

func (s *KeywordContext) AUTOINCREMENT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserAUTOINCREMENT_, 0)
}

func (s *KeywordContext) BEFORE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserBEFORE_, 0)
}

func (s *KeywordContext) BEGIN_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserBEGIN_, 0)
}

func (s *KeywordContext) BETWEEN_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserBETWEEN_, 0)
}

func (s *KeywordContext) BY_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserBY_, 0)
}

func (s *KeywordContext) CASCADE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCASCADE_, 0)
}

func (s *KeywordContext) CASE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCASE_, 0)
}

func (s *KeywordContext) CAST_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCAST_, 0)
}

func (s *KeywordContext) CHECK_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCHECK_, 0)
}

func (s *KeywordContext) COLLATE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOLLATE_, 0)
}

func (s *KeywordContext) COLUMN_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOLUMN_, 0)
}

func (s *KeywordContext) COMMIT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMIT_, 0)
}

func (s *KeywordContext) CONFLICT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCONFLICT_, 0)
}

func (s *KeywordContext) CONSTRAINT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCONSTRAINT_, 0)
}

func (s *KeywordContext) CREATE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCREATE_, 0)
}

func (s *KeywordContext) CROSS_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCROSS_, 0)
}

func (s *KeywordContext) CURRENT_DATE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCURRENT_DATE_, 0)
}

func (s *KeywordContext) CURRENT_TIME_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCURRENT_TIME_, 0)
}

func (s *KeywordContext) CURRENT_TIMESTAMP_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCURRENT_TIMESTAMP_, 0)
}

func (s *KeywordContext) DATABASE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDATABASE_, 0)
}

func (s *KeywordContext) DEFAULT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDEFAULT_, 0)
}

func (s *KeywordContext) DEFERRABLE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDEFERRABLE_, 0)
}

func (s *KeywordContext) DEFERRED_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDEFERRED_, 0)
}

func (s *KeywordContext) DELETE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDELETE_, 0)
}

func (s *KeywordContext) DESC_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDESC_, 0)
}

func (s *KeywordContext) DETACH_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDETACH_, 0)
}

func (s *KeywordContext) DISTINCT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDISTINCT_, 0)
}

func (s *KeywordContext) DROP_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDROP_, 0)
}

func (s *KeywordContext) EACH_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserEACH_, 0)
}

func (s *KeywordContext) ELSE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserELSE_, 0)
}

func (s *KeywordContext) END_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserEND_, 0)
}

func (s *KeywordContext) ESCAPE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserESCAPE_, 0)
}

func (s *KeywordContext) EXCEPT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserEXCEPT_, 0)
}

func (s *KeywordContext) EXCLUSIVE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserEXCLUSIVE_, 0)
}

func (s *KeywordContext) EXISTS_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserEXISTS_, 0)
}

func (s *KeywordContext) EXPLAIN_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserEXPLAIN_, 0)
}

func (s *KeywordContext) FAIL_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserFAIL_, 0)
}

func (s *KeywordContext) FOR_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserFOR_, 0)
}

func (s *KeywordContext) FOREIGN_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserFOREIGN_, 0)
}

func (s *KeywordContext) FROM_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserFROM_, 0)
}

func (s *KeywordContext) FULL_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserFULL_, 0)
}

func (s *KeywordContext) GLOB_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserGLOB_, 0)
}

func (s *KeywordContext) GROUP_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserGROUP_, 0)
}

func (s *KeywordContext) HAVING_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserHAVING_, 0)
}

func (s *KeywordContext) IF_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserIF_, 0)
}

func (s *KeywordContext) IGNORE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserIGNORE_, 0)
}

func (s *KeywordContext) IMMEDIATE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserIMMEDIATE_, 0)
}

func (s *KeywordContext) IN_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserIN_, 0)
}

func (s *KeywordContext) INDEX_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserINDEX_, 0)
}

func (s *KeywordContext) INDEXED_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserINDEXED_, 0)
}

func (s *KeywordContext) INITIALLY_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserINITIALLY_, 0)
}

func (s *KeywordContext) INNER_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserINNER_, 0)
}

func (s *KeywordContext) INSERT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserINSERT_, 0)
}

func (s *KeywordContext) INSTEAD_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserINSTEAD_, 0)
}

func (s *KeywordContext) INTERSECT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserINTERSECT_, 0)
}

func (s *KeywordContext) INTO_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserINTO_, 0)
}

func (s *KeywordContext) IS_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserIS_, 0)
}

func (s *KeywordContext) ISNULL_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserISNULL_, 0)
}

func (s *KeywordContext) JOIN_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserJOIN_, 0)
}

func (s *KeywordContext) KEY_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserKEY_, 0)
}

func (s *KeywordContext) LEFT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserLEFT_, 0)
}

func (s *KeywordContext) LIKE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserLIKE_, 0)
}

func (s *KeywordContext) LIMIT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserLIMIT_, 0)
}

func (s *KeywordContext) MATCH_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserMATCH_, 0)
}

func (s *KeywordContext) NATURAL_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserNATURAL_, 0)
}

func (s *KeywordContext) NO_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserNO_, 0)
}

func (s *KeywordContext) NOT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserNOT_, 0)
}

func (s *KeywordContext) NOTNULL_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserNOTNULL_, 0)
}

func (s *KeywordContext) NULL_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserNULL_, 0)
}

func (s *KeywordContext) OF_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserOF_, 0)
}

func (s *KeywordContext) OFFSET_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserOFFSET_, 0)
}

func (s *KeywordContext) ON_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserON_, 0)
}

func (s *KeywordContext) OR_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserOR_, 0)
}

func (s *KeywordContext) ORDER_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserORDER_, 0)
}

func (s *KeywordContext) OUTER_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserOUTER_, 0)
}

func (s *KeywordContext) PLAN_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserPLAN_, 0)
}

func (s *KeywordContext) PRAGMA_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserPRAGMA_, 0)
}

func (s *KeywordContext) PRIMARY_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserPRIMARY_, 0)
}

func (s *KeywordContext) QUERY_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserQUERY_, 0)
}

func (s *KeywordContext) RAISE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserRAISE_, 0)
}

func (s *KeywordContext) RECURSIVE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserRECURSIVE_, 0)
}

func (s *KeywordContext) REFERENCES_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserREFERENCES_, 0)
}

func (s *KeywordContext) REGEXP_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserREGEXP_, 0)
}

func (s *KeywordContext) REINDEX_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserREINDEX_, 0)
}

func (s *KeywordContext) RELEASE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserRELEASE_, 0)
}

func (s *KeywordContext) RENAME_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserRENAME_, 0)
}

func (s *KeywordContext) REPLACE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserREPLACE_, 0)
}

func (s *KeywordContext) RESTRICT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserRESTRICT_, 0)
}

func (s *KeywordContext) RIGHT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserRIGHT_, 0)
}

func (s *KeywordContext) ROLLBACK_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserROLLBACK_, 0)
}

func (s *KeywordContext) ROW_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserROW_, 0)
}

func (s *KeywordContext) ROWS_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserROWS_, 0)
}

func (s *KeywordContext) SAVEPOINT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserSAVEPOINT_, 0)
}

func (s *KeywordContext) SELECT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserSELECT_, 0)
}

func (s *KeywordContext) SET_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserSET_, 0)
}

func (s *KeywordContext) TABLE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserTABLE_, 0)
}

func (s *KeywordContext) TEMP_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserTEMP_, 0)
}

func (s *KeywordContext) TEMPORARY_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserTEMPORARY_, 0)
}

func (s *KeywordContext) THEN_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserTHEN_, 0)
}

func (s *KeywordContext) TO_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserTO_, 0)
}

func (s *KeywordContext) TRANSACTION_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserTRANSACTION_, 0)
}

func (s *KeywordContext) TRIGGER_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserTRIGGER_, 0)
}

func (s *KeywordContext) UNION_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserUNION_, 0)
}

func (s *KeywordContext) UNIQUE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserUNIQUE_, 0)
}

func (s *KeywordContext) UPDATE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserUPDATE_, 0)
}

func (s *KeywordContext) USING_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserUSING_, 0)
}

func (s *KeywordContext) VACUUM_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserVACUUM_, 0)
}

func (s *KeywordContext) VALUES_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserVALUES_, 0)
}

func (s *KeywordContext) VIEW_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserVIEW_, 0)
}

func (s *KeywordContext) VIRTUAL_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserVIRTUAL_, 0)
}

func (s *KeywordContext) WHEN_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserWHEN_, 0)
}

func (s *KeywordContext) WHERE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserWHERE_, 0)
}

func (s *KeywordContext) WITH_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserWITH_, 0)
}

func (s *KeywordContext) WITHOUT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserWITHOUT_, 0)
}

func (s *KeywordContext) FIRST_VALUE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserFIRST_VALUE_, 0)
}

func (s *KeywordContext) OVER_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserOVER_, 0)
}

func (s *KeywordContext) PARTITION_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserPARTITION_, 0)
}

func (s *KeywordContext) RANGE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserRANGE_, 0)
}

func (s *KeywordContext) PRECEDING_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserPRECEDING_, 0)
}

func (s *KeywordContext) UNBOUNDED_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserUNBOUNDED_, 0)
}

func (s *KeywordContext) CURRENT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCURRENT_, 0)
}

func (s *KeywordContext) FOLLOWING_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserFOLLOWING_, 0)
}

func (s *KeywordContext) CUME_DIST_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCUME_DIST_, 0)
}

func (s *KeywordContext) DENSE_RANK_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDENSE_RANK_, 0)
}

func (s *KeywordContext) LAG_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserLAG_, 0)
}

func (s *KeywordContext) LAST_VALUE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserLAST_VALUE_, 0)
}

func (s *KeywordContext) LEAD_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserLEAD_, 0)
}

func (s *KeywordContext) NTH_VALUE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserNTH_VALUE_, 0)
}

func (s *KeywordContext) NTILE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserNTILE_, 0)
}

func (s *KeywordContext) PERCENT_RANK_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserPERCENT_RANK_, 0)
}

func (s *KeywordContext) RANK_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserRANK_, 0)
}

func (s *KeywordContext) ROW_NUMBER_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserROW_NUMBER_, 0)
}

func (s *KeywordContext) GENERATED_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserGENERATED_, 0)
}

func (s *KeywordContext) ALWAYS_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserALWAYS_, 0)
}

func (s *KeywordContext) STORED_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserSTORED_, 0)
}

func (s *KeywordContext) TRUE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserTRUE_, 0)
}

func (s *KeywordContext) FALSE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserFALSE_, 0)
}

func (s *KeywordContext) WINDOW_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserWINDOW_, 0)
}

func (s *KeywordContext) NULLS_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserNULLS_, 0)
}

func (s *KeywordContext) FIRST_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserFIRST_, 0)
}

func (s *KeywordContext) LAST_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserLAST_, 0)
}

func (s *KeywordContext) FILTER_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserFILTER_, 0)
}

func (s *KeywordContext) GROUPS_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserGROUPS_, 0)
}

func (s *KeywordContext) EXCLUDE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserEXCLUDE_, 0)
}

func (s *KeywordContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *KeywordContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *KeywordContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterKeyword(s)
	}
}

func (s *KeywordContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitKeyword(s)
	}
}

func (s *KeywordContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitKeyword(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Keyword() (localctx IKeywordContext) {
	localctx = NewKeywordContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 152, SQLiteParserRULE_keyword)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1660)
		_la = p.GetTokenStream().LA(1)

		if !(((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&-134217728) != 0) || ((int64((_la-64)) & ^0x3f) == 0 && ((int64(1)<<(_la-64))&9223371761976868863) != 0) || ((int64((_la-128)) & ^0x3f) == 0 && ((int64(1)<<(_la-128))&72057594037927935) != 0)) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INameContext is an interface to support dynamic dispatch.
type INameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() IIdentifierContext

	// IsNameContext differentiates from other interfaces.
	IsNameContext()
}

type NameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNameContext() *NameContext {
	var p = new(NameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_name
	return p
}

func InitEmptyNameContext(p *NameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_name
}

func (*NameContext) IsNameContext() {}

func NewNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NameContext {
	var p = new(NameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_name

	return p
}

func (s *NameContext) GetParser() antlr.Parser { return s.parser }

func (s *NameContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *NameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterName(s)
	}
}

func (s *NameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitName(s)
	}
}

func (s *NameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Name() (localctx INameContext) {
	localctx = NewNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 154, SQLiteParserRULE_name)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1662)
		p.Identifier()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFunction_nameContext is an interface to support dynamic dispatch.
type IFunction_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() IIdentifierContext

	// IsFunction_nameContext differentiates from other interfaces.
	IsFunction_nameContext()
}

type Function_nameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunction_nameContext() *Function_nameContext {
	var p = new(Function_nameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_function_name
	return p
}

func InitEmptyFunction_nameContext(p *Function_nameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_function_name
}

func (*Function_nameContext) IsFunction_nameContext() {}

func NewFunction_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Function_nameContext {
	var p = new(Function_nameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_function_name

	return p
}

func (s *Function_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Function_nameContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Function_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Function_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Function_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterFunction_name(s)
	}
}

func (s *Function_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitFunction_name(s)
	}
}

func (s *Function_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitFunction_name(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Function_name() (localctx IFunction_nameContext) {
	localctx = NewFunction_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 156, SQLiteParserRULE_function_name)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1664)
		p.Identifier()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISchema_nameContext is an interface to support dynamic dispatch.
type ISchema_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() IIdentifierContext

	// IsSchema_nameContext differentiates from other interfaces.
	IsSchema_nameContext()
}

type Schema_nameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySchema_nameContext() *Schema_nameContext {
	var p = new(Schema_nameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_schema_name
	return p
}

func InitEmptySchema_nameContext(p *Schema_nameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_schema_name
}

func (*Schema_nameContext) IsSchema_nameContext() {}

func NewSchema_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Schema_nameContext {
	var p = new(Schema_nameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_schema_name

	return p
}

func (s *Schema_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Schema_nameContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Schema_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Schema_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Schema_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterSchema_name(s)
	}
}

func (s *Schema_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitSchema_name(s)
	}
}

func (s *Schema_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitSchema_name(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Schema_name() (localctx ISchema_nameContext) {
	localctx = NewSchema_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 158, SQLiteParserRULE_schema_name)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1666)
		p.Identifier()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITable_nameContext is an interface to support dynamic dispatch.
type ITable_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() IIdentifierContext

	// IsTable_nameContext differentiates from other interfaces.
	IsTable_nameContext()
}

type Table_nameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_nameContext() *Table_nameContext {
	var p = new(Table_nameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_table_name
	return p
}

func InitEmptyTable_nameContext(p *Table_nameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_table_name
}

func (*Table_nameContext) IsTable_nameContext() {}

func NewTable_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_nameContext {
	var p = new(Table_nameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_table_name

	return p
}

func (s *Table_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_nameContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Table_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Table_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterTable_name(s)
	}
}

func (s *Table_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitTable_name(s)
	}
}

func (s *Table_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitTable_name(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Table_name() (localctx ITable_nameContext) {
	localctx = NewTable_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 160, SQLiteParserRULE_table_name)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1668)
		p.Identifier()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITable_or_index_nameContext is an interface to support dynamic dispatch.
type ITable_or_index_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() IIdentifierContext

	// IsTable_or_index_nameContext differentiates from other interfaces.
	IsTable_or_index_nameContext()
}

type Table_or_index_nameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_or_index_nameContext() *Table_or_index_nameContext {
	var p = new(Table_or_index_nameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_table_or_index_name
	return p
}

func InitEmptyTable_or_index_nameContext(p *Table_or_index_nameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_table_or_index_name
}

func (*Table_or_index_nameContext) IsTable_or_index_nameContext() {}

func NewTable_or_index_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_or_index_nameContext {
	var p = new(Table_or_index_nameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_table_or_index_name

	return p
}

func (s *Table_or_index_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_or_index_nameContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Table_or_index_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_or_index_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Table_or_index_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterTable_or_index_name(s)
	}
}

func (s *Table_or_index_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitTable_or_index_name(s)
	}
}

func (s *Table_or_index_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitTable_or_index_name(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Table_or_index_name() (localctx ITable_or_index_nameContext) {
	localctx = NewTable_or_index_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 162, SQLiteParserRULE_table_or_index_name)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1670)
		p.Identifier()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IColumn_nameContext is an interface to support dynamic dispatch.
type IColumn_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() IIdentifierContext

	// IsColumn_nameContext differentiates from other interfaces.
	IsColumn_nameContext()
}

type Column_nameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumn_nameContext() *Column_nameContext {
	var p = new(Column_nameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_column_name
	return p
}

func InitEmptyColumn_nameContext(p *Column_nameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_column_name
}

func (*Column_nameContext) IsColumn_nameContext() {}

func NewColumn_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Column_nameContext {
	var p = new(Column_nameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_column_name

	return p
}

func (s *Column_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Column_nameContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Column_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Column_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Column_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterColumn_name(s)
	}
}

func (s *Column_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitColumn_name(s)
	}
}

func (s *Column_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitColumn_name(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Column_name() (localctx IColumn_nameContext) {
	localctx = NewColumn_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 164, SQLiteParserRULE_column_name)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1672)
		p.Identifier()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICollation_nameContext is an interface to support dynamic dispatch.
type ICollation_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() IIdentifierContext

	// IsCollation_nameContext differentiates from other interfaces.
	IsCollation_nameContext()
}

type Collation_nameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCollation_nameContext() *Collation_nameContext {
	var p = new(Collation_nameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_collation_name
	return p
}

func InitEmptyCollation_nameContext(p *Collation_nameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_collation_name
}

func (*Collation_nameContext) IsCollation_nameContext() {}

func NewCollation_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Collation_nameContext {
	var p = new(Collation_nameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_collation_name

	return p
}

func (s *Collation_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Collation_nameContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Collation_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Collation_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Collation_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterCollation_name(s)
	}
}

func (s *Collation_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitCollation_name(s)
	}
}

func (s *Collation_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitCollation_name(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Collation_name() (localctx ICollation_nameContext) {
	localctx = NewCollation_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 166, SQLiteParserRULE_collation_name)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1674)
		p.Identifier()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IForeign_tableContext is an interface to support dynamic dispatch.
type IForeign_tableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() IIdentifierContext

	// IsForeign_tableContext differentiates from other interfaces.
	IsForeign_tableContext()
}

type Foreign_tableContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyForeign_tableContext() *Foreign_tableContext {
	var p = new(Foreign_tableContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_foreign_table
	return p
}

func InitEmptyForeign_tableContext(p *Foreign_tableContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_foreign_table
}

func (*Foreign_tableContext) IsForeign_tableContext() {}

func NewForeign_tableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Foreign_tableContext {
	var p = new(Foreign_tableContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_foreign_table

	return p
}

func (s *Foreign_tableContext) GetParser() antlr.Parser { return s.parser }

func (s *Foreign_tableContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Foreign_tableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Foreign_tableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Foreign_tableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterForeign_table(s)
	}
}

func (s *Foreign_tableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitForeign_table(s)
	}
}

func (s *Foreign_tableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitForeign_table(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Foreign_table() (localctx IForeign_tableContext) {
	localctx = NewForeign_tableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 168, SQLiteParserRULE_foreign_table)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1676)
		p.Identifier()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IIndex_nameContext is an interface to support dynamic dispatch.
type IIndex_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() IIdentifierContext

	// IsIndex_nameContext differentiates from other interfaces.
	IsIndex_nameContext()
}

type Index_nameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIndex_nameContext() *Index_nameContext {
	var p = new(Index_nameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_index_name
	return p
}

func InitEmptyIndex_nameContext(p *Index_nameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_index_name
}

func (*Index_nameContext) IsIndex_nameContext() {}

func NewIndex_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Index_nameContext {
	var p = new(Index_nameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_index_name

	return p
}

func (s *Index_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Index_nameContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Index_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Index_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Index_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterIndex_name(s)
	}
}

func (s *Index_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitIndex_name(s)
	}
}

func (s *Index_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitIndex_name(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Index_name() (localctx IIndex_nameContext) {
	localctx = NewIndex_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 170, SQLiteParserRULE_index_name)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1678)
		p.Identifier()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITrigger_nameContext is an interface to support dynamic dispatch.
type ITrigger_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() IIdentifierContext

	// IsTrigger_nameContext differentiates from other interfaces.
	IsTrigger_nameContext()
}

type Trigger_nameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTrigger_nameContext() *Trigger_nameContext {
	var p = new(Trigger_nameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_trigger_name
	return p
}

func InitEmptyTrigger_nameContext(p *Trigger_nameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_trigger_name
}

func (*Trigger_nameContext) IsTrigger_nameContext() {}

func NewTrigger_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Trigger_nameContext {
	var p = new(Trigger_nameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_trigger_name

	return p
}

func (s *Trigger_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Trigger_nameContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Trigger_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Trigger_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Trigger_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterTrigger_name(s)
	}
}

func (s *Trigger_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitTrigger_name(s)
	}
}

func (s *Trigger_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitTrigger_name(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Trigger_name() (localctx ITrigger_nameContext) {
	localctx = NewTrigger_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 172, SQLiteParserRULE_trigger_name)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1680)
		p.Identifier()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IView_nameContext is an interface to support dynamic dispatch.
type IView_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() IIdentifierContext

	// IsView_nameContext differentiates from other interfaces.
	IsView_nameContext()
}

type View_nameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyView_nameContext() *View_nameContext {
	var p = new(View_nameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_view_name
	return p
}

func InitEmptyView_nameContext(p *View_nameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_view_name
}

func (*View_nameContext) IsView_nameContext() {}

func NewView_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *View_nameContext {
	var p = new(View_nameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_view_name

	return p
}

func (s *View_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *View_nameContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *View_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *View_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *View_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterView_name(s)
	}
}

func (s *View_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitView_name(s)
	}
}

func (s *View_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitView_name(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) View_name() (localctx IView_nameContext) {
	localctx = NewView_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 174, SQLiteParserRULE_view_name)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1682)
		p.Identifier()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IModule_nameContext is an interface to support dynamic dispatch.
type IModule_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() IIdentifierContext

	// IsModule_nameContext differentiates from other interfaces.
	IsModule_nameContext()
}

type Module_nameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyModule_nameContext() *Module_nameContext {
	var p = new(Module_nameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_module_name
	return p
}

func InitEmptyModule_nameContext(p *Module_nameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_module_name
}

func (*Module_nameContext) IsModule_nameContext() {}

func NewModule_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Module_nameContext {
	var p = new(Module_nameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_module_name

	return p
}

func (s *Module_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Module_nameContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Module_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Module_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Module_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterModule_name(s)
	}
}

func (s *Module_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitModule_name(s)
	}
}

func (s *Module_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitModule_name(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Module_name() (localctx IModule_nameContext) {
	localctx = NewModule_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 176, SQLiteParserRULE_module_name)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1684)
		p.Identifier()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPragma_nameContext is an interface to support dynamic dispatch.
type IPragma_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() IIdentifierContext

	// IsPragma_nameContext differentiates from other interfaces.
	IsPragma_nameContext()
}

type Pragma_nameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPragma_nameContext() *Pragma_nameContext {
	var p = new(Pragma_nameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_pragma_name
	return p
}

func InitEmptyPragma_nameContext(p *Pragma_nameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_pragma_name
}

func (*Pragma_nameContext) IsPragma_nameContext() {}

func NewPragma_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Pragma_nameContext {
	var p = new(Pragma_nameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_pragma_name

	return p
}

func (s *Pragma_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Pragma_nameContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Pragma_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Pragma_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Pragma_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterPragma_name(s)
	}
}

func (s *Pragma_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitPragma_name(s)
	}
}

func (s *Pragma_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitPragma_name(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Pragma_name() (localctx IPragma_nameContext) {
	localctx = NewPragma_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 178, SQLiteParserRULE_pragma_name)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1686)
		p.Identifier()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISavepoint_nameContext is an interface to support dynamic dispatch.
type ISavepoint_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() IIdentifierContext

	// IsSavepoint_nameContext differentiates from other interfaces.
	IsSavepoint_nameContext()
}

type Savepoint_nameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySavepoint_nameContext() *Savepoint_nameContext {
	var p = new(Savepoint_nameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_savepoint_name
	return p
}

func InitEmptySavepoint_nameContext(p *Savepoint_nameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_savepoint_name
}

func (*Savepoint_nameContext) IsSavepoint_nameContext() {}

func NewSavepoint_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Savepoint_nameContext {
	var p = new(Savepoint_nameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_savepoint_name

	return p
}

func (s *Savepoint_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Savepoint_nameContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Savepoint_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Savepoint_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Savepoint_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterSavepoint_name(s)
	}
}

func (s *Savepoint_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitSavepoint_name(s)
	}
}

func (s *Savepoint_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitSavepoint_name(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Savepoint_name() (localctx ISavepoint_nameContext) {
	localctx = NewSavepoint_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 180, SQLiteParserRULE_savepoint_name)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1688)
		p.Identifier()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITable_aliasContext is an interface to support dynamic dispatch.
type ITable_aliasContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() IIdentifierContext

	// IsTable_aliasContext differentiates from other interfaces.
	IsTable_aliasContext()
}

type Table_aliasContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_aliasContext() *Table_aliasContext {
	var p = new(Table_aliasContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_table_alias
	return p
}

func InitEmptyTable_aliasContext(p *Table_aliasContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_table_alias
}

func (*Table_aliasContext) IsTable_aliasContext() {}

func NewTable_aliasContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_aliasContext {
	var p = new(Table_aliasContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_table_alias

	return p
}

func (s *Table_aliasContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_aliasContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Table_aliasContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_aliasContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Table_aliasContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterTable_alias(s)
	}
}

func (s *Table_aliasContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitTable_alias(s)
	}
}

func (s *Table_aliasContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitTable_alias(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Table_alias() (localctx ITable_aliasContext) {
	localctx = NewTable_aliasContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 182, SQLiteParserRULE_table_alias)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1690)
		p.Identifier()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITransaction_nameContext is an interface to support dynamic dispatch.
type ITransaction_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() IIdentifierContext

	// IsTransaction_nameContext differentiates from other interfaces.
	IsTransaction_nameContext()
}

type Transaction_nameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTransaction_nameContext() *Transaction_nameContext {
	var p = new(Transaction_nameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_transaction_name
	return p
}

func InitEmptyTransaction_nameContext(p *Transaction_nameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_transaction_name
}

func (*Transaction_nameContext) IsTransaction_nameContext() {}

func NewTransaction_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Transaction_nameContext {
	var p = new(Transaction_nameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_transaction_name

	return p
}

func (s *Transaction_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Transaction_nameContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Transaction_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Transaction_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Transaction_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterTransaction_name(s)
	}
}

func (s *Transaction_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitTransaction_name(s)
	}
}

func (s *Transaction_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitTransaction_name(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Transaction_name() (localctx ITransaction_nameContext) {
	localctx = NewTransaction_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 184, SQLiteParserRULE_transaction_name)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1692)
		p.Identifier()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IWindow_nameContext is an interface to support dynamic dispatch.
type IWindow_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() IIdentifierContext

	// IsWindow_nameContext differentiates from other interfaces.
	IsWindow_nameContext()
}

type Window_nameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWindow_nameContext() *Window_nameContext {
	var p = new(Window_nameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_window_name
	return p
}

func InitEmptyWindow_nameContext(p *Window_nameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_window_name
}

func (*Window_nameContext) IsWindow_nameContext() {}

func NewWindow_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Window_nameContext {
	var p = new(Window_nameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_window_name

	return p
}

func (s *Window_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Window_nameContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Window_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Window_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Window_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterWindow_name(s)
	}
}

func (s *Window_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitWindow_name(s)
	}
}

func (s *Window_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitWindow_name(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Window_name() (localctx IWindow_nameContext) {
	localctx = NewWindow_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 186, SQLiteParserRULE_window_name)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1694)
		p.Identifier()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAliasContext is an interface to support dynamic dispatch.
type IAliasContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() IIdentifierContext

	// IsAliasContext differentiates from other interfaces.
	IsAliasContext()
}

type AliasContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAliasContext() *AliasContext {
	var p = new(AliasContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_alias
	return p
}

func InitEmptyAliasContext(p *AliasContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_alias
}

func (*AliasContext) IsAliasContext() {}

func NewAliasContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AliasContext {
	var p = new(AliasContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_alias

	return p
}

func (s *AliasContext) GetParser() antlr.Parser { return s.parser }

func (s *AliasContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *AliasContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AliasContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AliasContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterAlias(s)
	}
}

func (s *AliasContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitAlias(s)
	}
}

func (s *AliasContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitAlias(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Alias() (localctx IAliasContext) {
	localctx = NewAliasContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 188, SQLiteParserRULE_alias)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1696)
		p.Identifier()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFilenameContext is an interface to support dynamic dispatch.
type IFilenameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() IIdentifierContext

	// IsFilenameContext differentiates from other interfaces.
	IsFilenameContext()
}

type FilenameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFilenameContext() *FilenameContext {
	var p = new(FilenameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_filename
	return p
}

func InitEmptyFilenameContext(p *FilenameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_filename
}

func (*FilenameContext) IsFilenameContext() {}

func NewFilenameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FilenameContext {
	var p = new(FilenameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_filename

	return p
}

func (s *FilenameContext) GetParser() antlr.Parser { return s.parser }

func (s *FilenameContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *FilenameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FilenameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FilenameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterFilename(s)
	}
}

func (s *FilenameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitFilename(s)
	}
}

func (s *FilenameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitFilename(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Filename() (localctx IFilenameContext) {
	localctx = NewFilenameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 190, SQLiteParserRULE_filename)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1698)
		p.Identifier()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBase_window_nameContext is an interface to support dynamic dispatch.
type IBase_window_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() IIdentifierContext

	// IsBase_window_nameContext differentiates from other interfaces.
	IsBase_window_nameContext()
}

type Base_window_nameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBase_window_nameContext() *Base_window_nameContext {
	var p = new(Base_window_nameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_base_window_name
	return p
}

func InitEmptyBase_window_nameContext(p *Base_window_nameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_base_window_name
}

func (*Base_window_nameContext) IsBase_window_nameContext() {}

func NewBase_window_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Base_window_nameContext {
	var p = new(Base_window_nameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_base_window_name

	return p
}

func (s *Base_window_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Base_window_nameContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Base_window_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Base_window_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Base_window_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterBase_window_name(s)
	}
}

func (s *Base_window_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitBase_window_name(s)
	}
}

func (s *Base_window_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitBase_window_name(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Base_window_name() (localctx IBase_window_nameContext) {
	localctx = NewBase_window_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 192, SQLiteParserRULE_base_window_name)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1700)
		p.Identifier()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISimple_funcContext is an interface to support dynamic dispatch.
type ISimple_funcContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() IIdentifierContext

	// IsSimple_funcContext differentiates from other interfaces.
	IsSimple_funcContext()
}

type Simple_funcContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySimple_funcContext() *Simple_funcContext {
	var p = new(Simple_funcContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_simple_func
	return p
}

func InitEmptySimple_funcContext(p *Simple_funcContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_simple_func
}

func (*Simple_funcContext) IsSimple_funcContext() {}

func NewSimple_funcContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Simple_funcContext {
	var p = new(Simple_funcContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_simple_func

	return p
}

func (s *Simple_funcContext) GetParser() antlr.Parser { return s.parser }

func (s *Simple_funcContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Simple_funcContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Simple_funcContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Simple_funcContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterSimple_func(s)
	}
}

func (s *Simple_funcContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitSimple_func(s)
	}
}

func (s *Simple_funcContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitSimple_func(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Simple_func() (localctx ISimple_funcContext) {
	localctx = NewSimple_funcContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 194, SQLiteParserRULE_simple_func)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1702)
		p.Identifier()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAggregate_funcContext is an interface to support dynamic dispatch.
type IAggregate_funcContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() IIdentifierContext

	// IsAggregate_funcContext differentiates from other interfaces.
	IsAggregate_funcContext()
}

type Aggregate_funcContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAggregate_funcContext() *Aggregate_funcContext {
	var p = new(Aggregate_funcContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_aggregate_func
	return p
}

func InitEmptyAggregate_funcContext(p *Aggregate_funcContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_aggregate_func
}

func (*Aggregate_funcContext) IsAggregate_funcContext() {}

func NewAggregate_funcContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Aggregate_funcContext {
	var p = new(Aggregate_funcContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_aggregate_func

	return p
}

func (s *Aggregate_funcContext) GetParser() antlr.Parser { return s.parser }

func (s *Aggregate_funcContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Aggregate_funcContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Aggregate_funcContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Aggregate_funcContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterAggregate_func(s)
	}
}

func (s *Aggregate_funcContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitAggregate_func(s)
	}
}

func (s *Aggregate_funcContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitAggregate_func(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Aggregate_func() (localctx IAggregate_funcContext) {
	localctx = NewAggregate_funcContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 196, SQLiteParserRULE_aggregate_func)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1704)
		p.Identifier()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IWindow_funcContext is an interface to support dynamic dispatch.
type IWindow_funcContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LEAD_() antlr.TerminalNode
	Identifier() IIdentifierContext

	// IsWindow_funcContext differentiates from other interfaces.
	IsWindow_funcContext()
}

type Window_funcContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWindow_funcContext() *Window_funcContext {
	var p = new(Window_funcContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_window_func
	return p
}

func InitEmptyWindow_funcContext(p *Window_funcContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_window_func
}

func (*Window_funcContext) IsWindow_funcContext() {}

func NewWindow_funcContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Window_funcContext {
	var p = new(Window_funcContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_window_func

	return p
}

func (s *Window_funcContext) GetParser() antlr.Parser { return s.parser }

func (s *Window_funcContext) LEAD_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserLEAD_, 0)
}

func (s *Window_funcContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Window_funcContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Window_funcContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Window_funcContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterWindow_func(s)
	}
}

func (s *Window_funcContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitWindow_func(s)
	}
}

func (s *Window_funcContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitWindow_func(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Window_func() (localctx IWindow_funcContext) {
	localctx = NewWindow_funcContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 198, SQLiteParserRULE_window_func)
	p.SetState(1708)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case SQLiteParserLEAD_:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1706)
			p.Match(SQLiteParserLEAD_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case SQLiteParserOPEN_PAR, SQLiteParserIDENTIFIER:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1707)
			p.Identifier()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITable_function_nameContext is an interface to support dynamic dispatch.
type ITable_function_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() IIdentifierContext

	// IsTable_function_nameContext differentiates from other interfaces.
	IsTable_function_nameContext()
}

type Table_function_nameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_function_nameContext() *Table_function_nameContext {
	var p = new(Table_function_nameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_table_function_name
	return p
}

func InitEmptyTable_function_nameContext(p *Table_function_nameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_table_function_name
}

func (*Table_function_nameContext) IsTable_function_nameContext() {}

func NewTable_function_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_function_nameContext {
	var p = new(Table_function_nameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_table_function_name

	return p
}

func (s *Table_function_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_function_nameContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Table_function_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_function_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Table_function_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterTable_function_name(s)
	}
}

func (s *Table_function_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitTable_function_name(s)
	}
}

func (s *Table_function_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitTable_function_name(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Table_function_name() (localctx ITable_function_nameContext) {
	localctx = NewTable_function_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 200, SQLiteParserRULE_table_function_name)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1710)
		p.Identifier()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IIdentifierContext is an interface to support dynamic dispatch.
type IIdentifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	IDENTIFIER() antlr.TerminalNode
	OPEN_PAR() antlr.TerminalNode
	Identifier() IIdentifierContext
	CLOSE_PAR() antlr.TerminalNode

	// IsIdentifierContext differentiates from other interfaces.
	IsIdentifierContext()
}

type IdentifierContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIdentifierContext() *IdentifierContext {
	var p = new(IdentifierContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_identifier
	return p
}

func InitEmptyIdentifierContext(p *IdentifierContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_identifier
}

func (*IdentifierContext) IsIdentifierContext() {}

func NewIdentifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IdentifierContext {
	var p = new(IdentifierContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_identifier

	return p
}

func (s *IdentifierContext) GetParser() antlr.Parser { return s.parser }

func (s *IdentifierContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(SQLiteParserIDENTIFIER, 0)
}

func (s *IdentifierContext) OPEN_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserOPEN_PAR, 0)
}

func (s *IdentifierContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *IdentifierContext) CLOSE_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCLOSE_PAR, 0)
}

func (s *IdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IdentifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IdentifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterIdentifier(s)
	}
}

func (s *IdentifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitIdentifier(s)
	}
}

func (s *IdentifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitIdentifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Identifier() (localctx IIdentifierContext) {
	localctx = NewIdentifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 202, SQLiteParserRULE_identifier)
	p.SetState(1717)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case SQLiteParserIDENTIFIER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1712)
			p.Match(SQLiteParserIDENTIFIER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case SQLiteParserOPEN_PAR:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1713)
			p.Match(SQLiteParserOPEN_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1714)
			p.Identifier()
		}
		{
			p.SetState(1715)
			p.Match(SQLiteParserCLOSE_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

func (p *SQLiteParser) Sempred(localctx antlr.RuleContext, ruleIndex, predIndex int) bool {
	switch ruleIndex {
	case 27:
		var t *ExprContext = nil
		if localctx != nil {
			t = localctx.(*ExprContext)
		}
		return p.Expr_Sempred(t, predIndex)

	default:
		panic("No predicate with index: " + fmt.Sprint(ruleIndex))
	}
}

func (p *SQLiteParser) Expr_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 0:
		return p.Precpred(p.GetParserRuleContext(), 23)

	case 1:
		return p.Precpred(p.GetParserRuleContext(), 22)

	case 2:
		return p.Precpred(p.GetParserRuleContext(), 21)

	case 3:
		return p.Precpred(p.GetParserRuleContext(), 20)

	case 4:
		return p.Precpred(p.GetParserRuleContext(), 19)

	case 5:
		return p.Precpred(p.GetParserRuleContext(), 18)

	case 6:
		return p.Precpred(p.GetParserRuleContext(), 17)

	case 7:
		return p.Precpred(p.GetParserRuleContext(), 16)

	case 8:
		return p.Precpred(p.GetParserRuleContext(), 15)

	case 9:
		return p.Precpred(p.GetParserRuleContext(), 14)

	case 10:
		return p.Precpred(p.GetParserRuleContext(), 11)

	case 11:
		return p.Precpred(p.GetParserRuleContext(), 9)

	case 12:
		return p.Precpred(p.GetParserRuleContext(), 13)

	case 13:
		return p.Precpred(p.GetParserRuleContext(), 12)

	case 14:
		return p.Precpred(p.GetParserRuleContext(), 10)

	case 15:
		return p.Precpred(p.GetParserRuleContext(), 4)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}
